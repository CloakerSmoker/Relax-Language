DllImport i64 GetCurrentProcess() {Kernel32.dll, GetCurrentProcess}
DllImport void TerminateProcess(i64, i32) {Kernel32.dll, TerminateProcess}

define void Exit(i32 ExitCode) {
	TerminateProcess(GetCurrentProcess(), ExitCode)
}

#Include Memory.rlx
#Include String.rlx
#Include Console.rlx
#Include SafeString.rlx
#Include HashMap.rlx

declare i16* OpenAndRead(i8*, i32*)

#Include Lexer.rlx
#Include Parser.rlx

DllImport i32 GetLastError() {Kernel32.dll, GetLastError}
DllImport i8 CloseHandle(i64) {Kernel32.dll, CloseHandle}
DllImport i64 CreateFile(i8*, i32, i32, void*, i32, i32, i64) {Kernel32.dll, CreateFileA}

#Include PEBuilder.rlx
#Include ELFBuilder.rlx
#Include Compiler.rlx

DllImport i32 GetFileSize(i64, void) {Kernel32.dll, GetFileSize}
DllImport i8 ReadFile(i64, void*, i32, i32*, void) {Kernel32.dll, ReadFile}

define i16* OpenAndRead(i8* FilePath, i32* OutFileSize) {
	i64 GENERIC_READ := 0x80000000
	i8 FILE_SHARE_READ := 1
	i8 FILE_SHARE_WRITE := 2
	i8 OPEN_EXISTING := 3
	i16 FILE_ATTRIBUTE_NORMAL := 128
	
	i64 FileHandle := CreateFile(FilePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0)
	
	if (FileHandle = -1) {
		SwapOutputStream()
		AWrite("Could not open file: ")
		AWriteLine(FilePath)
		
		AWrite("Error code: ")
		IWriteLine(GetLastError())
		
		AWriteLine("Aborting")
		Exit(1)
	}
	
	i32 FileSize := GetFileSize(FileHandle, 0)
	
	if (OutFileSize != 0) {
		OutFileSize[0] := FileSize
	}
	
	void* FileBuffer := Alloc(FileSize)
	
	i32 ReadFileBytesRead := 0
	i8 ReadFileSuccess := ReadFile(FileHandle, FileBuffer, FileSize, &ReadFileBytesRead, 0)
	
	if (!(ReadFileSuccess) || ReadFileBytesRead != FileSize) {
		SwapOutputStream()
		AWrite("Could not read file: ")
		AWriteLine(FilePath)
		
		AWrite("Error code: ")
		IWriteLine(GetLastError())
		
		AWriteLine("Aborting")
		Exit(1)
	}
	
	i16* Source := AToW(FileBuffer As i8*, FileSize)
	
	Free(FileBuffer)
	CloseHandle(FileHandle)
	
	return Source
}

define i32 Main(i64 ArgC, i8** ArgV) {	
	GetArgs(&ArgC, &ArgV) /* NOP on Linux */
	
	i8 OutputELF := false
	i8* InputFilePath := 0
	i8* OutputFilePath := 0
	
	for (i32 Index := 0, Index < ArgC, Index += 1) {
		i8* NextArg := ArgV[Index]
		
		if (StringEquals(NextArg, "--elf")) {
			OutputELF := true
		}
		else if (StringEquals(NextArg, "--pe")) {
			OutputELF := false
		}
		else if (StringEquals(NextArg, "-i")) {			
			Index += 1
			InputFilePath := ArgV[Index]
			
			AWrite("Input File: ")
			AWriteLine(InputFilePath)
		}
		else if (StringEquals(NextArg, "-o")) {
			Index += 1
			OutputFilePath := ArgV[Index]
		
			AWrite("Output File: ")
			AWriteLine(OutputFilePath)
		}
	}

	if !(InputFilePath && OutputFilePath) {
		if (ArgC = 3) {
			InputFilePath := ArgV[1]
			OutputFilePath := ArgV[2]
		}
		else {
			SwapOutputStream()
			AWriteLine("No input+output file, aborting")
			Exit(1)
		}
	}
	
	i32 SourceLength := 0
	i16* Source := OpenAndRead(InputFilePath, &SourceLength)
	
	SafeWideString SourcePath
	SourcePath.Buffer := InputFilePath
	SourcePath.Length := WLen(InputFilePath)
	
	ParserState* P := ParserStart(NewTokenizer(&SourcePath, Source, SourceLength), OutputELF)
	CompilerStart(P, OutputFilePath, OutputELF)
}