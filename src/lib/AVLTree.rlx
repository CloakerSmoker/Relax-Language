;#Require "$/Console.rlx"
#Require "$/Memory.rlx"

i32 DIRECTION_LEFT := 0
i32 DIRECTION_RIGHT := 1

struct AVLTreeNode {
	AVLTreeNode* Left
	AVLTreeNode* Right
	i64 Key
	
	i32 Height
	i32 Size

	i32 ValueSize
	
	void[0] Value
	
	define void* ValueAsPointer() {
		if (this) {
			return *(this->Value As void**)
		}
		
		return null
	}

	define i32 CalculateHeight() {
		if (this != null) {
			i32 LeftHeight := this->Left->CalculateHeight()
			i32 RightHeight := this->Right->CalculateHeight()
	
			if (LeftHeight < RightHeight) {
				return RightHeight + 1
			}
			else {
				return LeftHeight + 1
			}
		}
		else {
			return 0
		}
	}

	define i32 CaclulateSize() {
		if (this != null) {
			i32 Size := 1

			if (this->Left) {
				Size += this->Left->Size
			}
			
			if (this->Right) {
				Size += this->Right->Size
			}

			return Size
		}
		else {
			return 0
		}
	}

	define void UpdateDimensions() {
		this->Height := this->CalculateHeight()
		this->Size  := this->CaclulateSize()
	}

	define i32 GetBalance() {
		if (this != null) {
			i32 LeftHeight := 0

			if (this->Left) {
				LeftHeight := this->Left->Height
			}

			i32 RightHeight := 0

			if (this->Right) {
				RightHeight := this->Right->Height
			}

			return RightHeight - LeftHeight
		}
		else {
			return 0
		}
	}

	declare i32 Count()

	define AVLTreeNode* RightRotate() {
		;Print("RR\n")

		AVLTreeNode* NewRoot := this->Left
		AVLTreeNode* OldRight := NewRoot->Right

		NewRoot->Right := this
		this->Left := OldRight

		this->UpdateDimensions()
		NewRoot->UpdateDimensions()

		return NewRoot
	}

	define AVLTreeNode* LeftRotate() {
		;Print("LR\n")

		AVLTreeNode* NewRoot := this->Right
		AVLTreeNode* OldLeft := NewRoot->Left

		NewRoot->Left := this
		this->Right := OldLeft

		this->UpdateDimensions()
		NewRoot->UpdateDimensions()

		return NewRoot
	}

	define AVLTreeNode* LeftRightRotate() {
		this->Left := this->Left->LeftRotate()

		return this->RightRotate()
	}
	
	define AVLTreeNode* RightLeftRotate() {
		this->Right := this->Right->RightRotate()

		return this->LeftRotate()
	}

	define AVLTreeNode* Balance() {
		i32 Balance := this->GetBalance()

		if (Balance >= 2) {
			; Right > left

			if (this->Right->GetBalance() >= 0) {
				return this->LeftRotate()
			}
			else {
				return this->RightLeftRotate()
			}
		}
		else if (Balance <= -2) {
			; Left > right

			if (this->Left->GetBalance() <= 0) {
				return this->RightRotate()
			}
			else {
				return this->LeftRightRotate()
			}
		}
		
		return this
	}
	
	define void SetValue(void* Value) {
		if (this->ValueSize && Value) {
			MoveMemory(this~>Value, Value, this->ValueSize)
		}
	}
	define void* GetValue() {
		return this~>Value
	}

	declare AVLTreeNode* Insert(i64, void*)

	define void InsertHelper(AVLTreeNode** Destination, i64 Key, void* Value) {
		if (*Destination = null) {
			AVLTreeNode* NewChild := Alloc(#AVLTreeNode + this->ValueSize)
			
			NewChild->ValueSize := this->ValueSize
			NewChild->SetValue(Value)

			NewChild->Key := Key
			NewChild->UpdateDimensions()

			*Destination := NewChild
		}
		else {
			*Destination := (*Destination)->Insert(Key, Value)
		}
	}

	define AVLTreeNode* Insert(i64 Key, void* Value) {
		if (this->Key != Key) {
			if (Key > this->Key) {
				this->InsertHelper(this~>Right, Key, Value)
			}
			else {
				this->InsertHelper(this~>Left, Key, Value)
			}

			this->UpdateDimensions()
			
			return this->Balance()
		}
		
		this->SetValue(Value)

		return this
	}
	define AVLTreeNode* Insert(i64 Key) {
		return this->Insert(Key, null)
	}

	define AVLTreeNode* RemoveMinimum(AVLTreeNode** pThis) {
		AVLTreeNode* Result := null
	
		if (this->Left) {
			Result := this->Left->RemoveMinimum(this~>Left)
		}
		else {
			*pThis := this->Right

			Result := this
		}

		if (*pThis) {
			(*pThis)->UpdateDimensions()
			*pThis := (*pThis)->Balance()
		}

		return Result
	}

	define AVLTreeNode* Remove(i64 Key) {
		if (this->Key = Key) {
			if (this->Right) {
				AVLTreeNode* RightMinimum := this->Right->RemoveMinimum(this~>Right)

				MoveMemory(this->Value, RightMinimum->Value, this->ValueSize)
				this->Key := RightMinimum->Key

				Free(RightMinimum)
			}
			else {
				AVLTreeNode* Left := this->Left

				Free(this)

				return Left
			}
		}
		else if (Key > this->Key) {
			this->Right := this->Right->Remove(Key)
		}
		else {
			this->Left := this->Left->Remove(Key)
		}

		this->UpdateDimensions()
		
		return this->Balance()
	}

	define i8 Has(i64 Key) {
		if (this = null) {
			return 0
		}
		else if (this->Key = Key) {
			return 1
		}
		else {
			if (Key > this->Key) {
				return this->Right->Has(Key)
			}
			else {
				return this->Left->Has(Key)
			}
		}
	}
	
	define AVLTreeNode* Get(i64 Key) {
		if (this = null) {
			return null
		}
		else if (this->Key = Key) {
			return this
		}
		else {
			if (Key > this->Key) {
				return this->Right->Get(Key)
			}
			else {
				return this->Left->Get(Key)
			}
		}
	}

	define i32 LeftSize() {
		if (this->Left) {
			return this->Left->Size
		}
		else {
			return 0
		}
	}

	define AVLTreeNode* At(i32 Index) {
		i32 LeftSize := this->LeftSize()

		if (Index = LeftSize) {
			return this
		}
		else {
			if (Index < LeftSize) {
				return this->Left->At(Index)
			}
			else {
				return this->Right->At(Index - LeftSize - 1)
			}
		}
	}

	define i32 IndexOf(i32 TotalLeftSize, i64 Key) {
		i32 LeftSize := this->LeftSize()

		if (this->Key = Key ) {
			return TotalLeftSize + LeftSize
		}
		else {
			if (Key < this->Key) {
				return this->Left->IndexOf(TotalLeftSize, Key)
			}
			else {
				return this->Right->IndexOf(TotalLeftSize + LeftSize + 1, Key)
			}
		}
	}

	define i32 IndexOf(i64 Key) {
		return this->IndexOf(0, Key)
	}

	define i32 Count() {
		if (this = null) {
			return 0
		}

		i32 Result := 1

		if (this->Left) {
			Result += this->Left->Size
		}

		if (this->Right) {
			Result += this->Right->Size
		}

		return Result
	}

	define self* Clone() {
		self* Result := CloneMemory(this, #AVLTreeNode + this->ValueSize)

		if (this->Left) {
			Result->Left := this->Left->Clone()
		}

		if (this->Right) {
			Result->Right := this->Right->Clone()
		}

		return Result
	}

	define void Free() {
		if (this->Left) {
			this->Left->Free()
			Free(this->Left)
		}

		if (this->Right) {
			this->Right->Free()
			Free(this->Right)
		}
	}

	define void Print(i32 Depth) {
		for (i32 Index := 0, Index < Depth, Index++) {
			Print("    ")
		}

		if (this = null) {
			Print("nil\n")
		}
		else {
			Print("%x %x (%i, %i) [%i]:\n", this->Key, *(this->Value As void**), this->GetBalance(), this->Height, this->Left->Size)

			this->Left->Print(Depth + 1)
			this->Right->Print(Depth + 1)
		}
	}

	define void PrintGraphViz(void(AVLTreeNode*) PrintNode) {
		Print("\tn%i[label=\"", this->Key)
		PrintNode(this)
		Print("\"];\n")

		if (this->Left) {
			Print("\tn%i -- n%i [label=\"L\"];\n", this->Key, this->Left->Key)
		}

		if (this->Right) {
			Print("\tn%i -- n%i [label=\"R\"];\n", this->Key, this->Right->Key)
		}

		if (this->Left) {
			this->Left->PrintGraphViz(PrintNode)
		}

		if (this->Right) {
			this->Right->PrintGraphViz(PrintNode)
		}
	}
}

struct AVLTree {
	AVLTreeNode* Root
	i32 ValueSize
	
	static AVLTree* New(i32 ValueSize) {
		AVLTree* this := Alloc(#AVLTree)
		
		this->ValueSize := ValueSize
		
		return this
	}

	define void Insert(i64 Key, void* Value) {
		if (this->Root = null) {
			this->Root := Alloc(#AVLTreeNode + this->ValueSize)
			
			this->Root->ValueSize := this->ValueSize
			this->Root->SetValue(Value)
			
			this->Root->Key := Key
		}
		else {
			this->Root := this->Root->Insert(Key, Value)
		}
	}
	define void Insert(i64 Key) {
		this->Insert(Key, null)
	}

	define void InsertPointer(i64 Key, void* Value) {
		this->Insert(Key, &Value As void*)
	}

	define void Remove(i64 Key) {
		if (this->Root) {
			this->Root := this->Root->Remove(Key)
		}
	}

	define i32 Count() {
		return this->Root->Count()
	}
	define i8 Has(i64 Key) {
		return this->Root->Has(Key)
	}
	define AVLTreeNode* NodeAt(i32 Index) {
		return this->Root->At(Index)
	}
	define i64 KeyAt(i32 Index) {
		return this->Root->At(Index)->Key
	}
	define void* ValueAt(i32 Index) {
		return this->Root->At(Index)->Value
	}
	define void* At(i32 Index) {
		return this->ValueAt(Index)
	}
	define void* PointerValueAt(i32 Index) {
		return *(this->Root->At(Index)->Value As void**)
	}
	define void* PointerAt(i32 Index) {
		return this->PointerValueAt(Index)
	}
	define i32 IndexOf(i64 Key) {
		return this->Root->IndexOf(Key)
	}

	define void Add(i64 Key, void* Value) {
		if (this->Has(Key)) {
			return
		}
		
		this->Insert(Key, Value)
	}
	define void Add(i64 Key) {
		this->Add(Key, null)
	}
	
	define void Set(i64 Key, void* Value) {
		if !(this->Has(Key)) {
			return
		}
		
		this->Insert(Key, Value)
	}
	define void Set(i64 Key) {
		this->Set(Key, null)
	}
	
	define AVLTreeNode* GetNode(i64 Key) {
		return this->Root->Get(Key)
	}
	
	define void* Get(i64 Key) {
		AVLTreeNode* Node := this->Root->Get(Key)
		
		if !(Node) {
			return null
		}
		
		return Node->Value
	}
	define void* GetPointer(i64 Key) {
		void** Result := this->Get(Key) As void**

		if (Result = null) {
			return null
		}

		return *Result
	}

	define void Free() {
		if (this->Root) {
			this->Root->Free()
			Free(this->Root)
		}
	}

	define self* Clone() {
		self* Result := self:New(this->ValueSize)

		if (this->Root) {
			Result->Root := this->Root->Clone()
		}

		return Result
	}

	define void Print() {
		this->Root->Print(0)
	}

	static void DefaultPrintNode(AVLTreeNode* this) {
		Print("%l\\nB%i, S%i, H%i", this->Key, this->GetBalance(), this->Size, this->Height)
	}

	define void PrintGraphViz(void(AVLTreeNode*) PrintNode) {
		Print("graph {\n")

		this->Root->PrintGraphViz(PrintNode)

		Print("}\n")
	}

	define void PrintGraphViz() {
		this->PrintGraphViz(&AVLTree:DefaultPrintNode)
	}
}

;define void Main() {
;	AVLTree* Tree := AVLTree:New(8)
;
;	Tree->Insert('1', "a")
;	Tree->Print()
;	Tree->Insert('2', "b")
;	Tree->Print()
;	Tree->Insert('3', "c")
;	Tree->Print()
;	Tree->Insert('4', "d")
;	Tree->Print()
;	Tree->Insert('5', "e")
;	Tree->Print()
;	Tree->Insert('6', "f")
;	Tree->Print()
;
;	Tree->Insert('0', "g")
;
;	Print("%i total nodes\n", Tree->Count())
;
;	for (i32 Index := 0, Index < Tree->Count(), Index++) {
;		AVLTreeNode* Node := Tree->NodeAt(Index)
;
;		Print("%i : %l, %c\n", Index, Node->Key, *(Node->Value As i8*))
;	}
;
;	Print("%i\n", Tree->IndexOf('1'))
;	Print("%i\n", Tree->IndexOf('2'))
;	Print("%i\n", Tree->IndexOf('3'))
;	Print("%i\n", Tree->IndexOf('4'))
;	Print("%i\n", Tree->IndexOf('5'))
;	Print("%i\n", Tree->IndexOf('6'))
;}
