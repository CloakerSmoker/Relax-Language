struct MemoryAllocator {
    void* State

    void*(void*, i64) Allocate
    void*(void*, void*, i64) Extend
    void(void*, void*) Free
}

#Require "$/MemoryBase.rlx"
#Require "@/Memory.rlx"

MemoryAllocator* CurrentAllocator := &DefaultAllocator

define void* Alloc(i64 Size) {
    return DefaultAllocator->Allocate(CurrentAllocator->State, Size)
}

define void* ReAlloc(void* Memory, i64 NewSize) {
    return CurrentAllocator->Extend(CurrentAllocator->State, Memory, NewSize)
}

define void Free(void* Memory) {
    CurrentAllocator->Free(CurrentAllocator->State, Memory)
}

define MemoryAllocator* WithAllocator(MemoryAllocator* New) {
	MemoryAllocator* Old := CurrentAllocator

	CurrentAllocator := New

	return Old
}

define void RestoreAllocator(MemoryAllocator* Old) {
	CurrentAllocator := Old
}

define void* CloneMemory(void* Memory, i32 Size) {
	void* NewBuffer := Alloc(Size)
	
	MoveMemory(NewBuffer, Memory, Size)
	
	return NewBuffer
}

struct ExpandArray {
	i32 ElementSize,
	i32 Capacity	
}

define void* AllocArray(i16 ElementSize, i16 InitialCapacity) {
	void* Buffer := Alloc(#ExpandArray + (ElementSize * InitialCapacity))
	ExpandArray* NewArray := Buffer
	
	NewArray->ElementSize := ElementSize
	NewArray->Capacity := InitialCapacity
	
	return Buffer + #ExpandArray
}

define void* ReAllocArray(void* ArrayBuffer, i32 AdditionalCapacity) {
	ExpandArray* Array := ArrayBuffer - #ExpandArray
	
	i32 ElementSize := Array->ElementSize
	i32 OldCapacity := Array->Capacity
	i32 NewCapacity := OldCapacity + AdditionalCapacity
	
	Array->Capacity := NewCapacity
	
	i32 NewSize := #ExpandArray + (ElementSize * NewCapacity)
	
	return ReAlloc(Array, NewSize) + #ExpandArray
}

define i32 GetArrayLength(void* ArrayBuffer) {
	return ((ArrayBuffer - #ExpandArray) As ExpandArray*)->Capacity
}

define void FreeArray(void* ArrayBuffer) {
	Free(ArrayBuffer - #ExpandArray)
}


;DllImport void* VirtualAlloc(void*, i64, i32, i32) {Kernel32.dll, VirtualAlloc}
;DllImport void VirtualProtect(void*, i64, i32, i32*) {Kernel32.dll, VirtualProtect}
;DllImport void VirtualFree(void*, i64, i32) {Kernel32.dll, VirtualFree}
;
;i32 MEM_COMMIT_RESERVE := 0x3000
;i32 PAGE_READ_WRITE := 0x4
;i32 PAGE_READ_EXECUTE := 0x20
;i32 MEM_RELEASE := 0x8000
;
;define void* AllocExecutableMemory(i64 Size) {
;	windows {
;		return VirtualAlloc(null, Size, MEM_COMMIT_RESERVE, PAGE_READ_WRITE)
;	}
;}
;define void LockExecutableMemory(void* Memory, i64 Size) {
;	windows {
;		i32 OldProtection := 0
;		VirtualProtect(Memory, Size, PAGE_READ_EXECUTE, &OldProtection)
;	}
;}
;define void FreeExecutableMemory(void* Memory) {
;	windows {
;		VirtualFree(Memory, 0, MEM_RELEASE)
;	}
;}
