DllImport i64 _GetProcessHeap() {Kernel32.dll, GetProcessHeap}
DllImport void* HeapAlloc(i64, i32, i64) {Kernel32.dll, HeapAlloc}
DllImport void* HeapReAlloc(i64, i32, void*, i64) {Kernel32.dll, HeapReAlloc}
DllImport i8 HeapFree(i64, i32, void*) {Kernel32.dll, HeapFree}

define i64 GetProcessHeap() {
	windows {
		return _GetProcessHeap()
	}
	
	return 0
}

define void FastSetMemory8(void* Memory, i64 Value, i64 Count) asm {
	mov, rax, rsi
	mov, rcx, rdx
	
	cld
	rep stosb
	
	ret
}
define void FastSetMemory64(void* Memory, i64 Value, i64 Count) asm {
	mov, rax, rsi
	mov, rcx, rdx
	
	cld
	rep stosq
	
	ret
}
define void FastZeroMemory(void* Memory, i64 Size) {
	i64 Offset := Size & ~0x7
	i64 Eights := Offset >> 3
	i64 Ones := Size & 0x7
	
	FastSetMemory64(Memory, 0, Eights)
	FastSetMemory8(Memory + Offset, 0, Ones)
}
define void FastMoveMemory(void* To, void* From, i64 Size) asm {
	mov, rcx, rdx
	
	cmp, rdi, rsi
	jlt, MoveDown
	
	dec, rdx
	add, rdi, rdx
	add, rsi, rdx
	
	std
	rep movsb
	
	ret
	
MoveDown:
	cld
	rep movsb
	
	ret
}

i64 hProcessHeap := GetProcessHeap()
i32 HEAP_ZERO_MEMORY := 0x00000008
i32 HEAP_REALLOC_IN_PLACE_ONLY := 0x00000010

#Require "$/HeapOfGarbage.rlx"

define void* Alloc(i64 Size) {
	windows {
		return HeapAlloc(hProcessHeap, HEAP_ZERO_MEMORY, Size)
	}
	linux {
		return GarbageHeapAlloc(Size As i32)
	}
}

define void* ReAlloc(void* Memory, i64 NewSize) {
	windows {
		return HeapReAlloc(hProcessHeap, HEAP_ZERO_MEMORY, Memory, NewSize)
	}
	linux {
		return GarbageHeapReAlloc(Memory, NewSize As i32)
	}
}

define void Free(void* Memory) {
	windows {
		HeapFree(hProcessHeap, 0, Memory)
	}
}

#Require "$/MemoryBase.rlx"

define void* CloneMemory(void* Memory, i32 Size) {
	void* NewBuffer := Alloc(Size)
	
	MoveMemory(NewBuffer, Memory, Size)
	
	return NewBuffer
}

struct ExpandArray {
	i32 ElementSize,
	i32 Capacity	
}

define void* AllocArray(i16 ElementSize, i16 InitialCapacity) {
	void* Buffer := Alloc(#ExpandArray + (ElementSize * InitialCapacity))
	ExpandArray* NewArray := Buffer
	
	NewArray->ElementSize := ElementSize
	NewArray->Capacity := InitialCapacity
	
	return Buffer + #ExpandArray
}

define void* ReAllocArray(void* ArrayBuffer, i32 AdditionalCapacity) {
	ExpandArray* Array := ArrayBuffer - #ExpandArray
	
	i32 ElementSize := Array->ElementSize
	i32 OldCapacity := Array->Capacity
	i32 NewCapacity := OldCapacity + AdditionalCapacity
	
	Array->Capacity := NewCapacity
	
	i32 NewSize := #ExpandArray + (ElementSize * NewCapacity)
	
	return ReAlloc(Array, NewSize) + #ExpandArray
}

define i32 GetArrayLength(void* ArrayBuffer) {
	return ((ArrayBuffer - #ExpandArray) As ExpandArray*)->Capacity
}

define void FreeArray(void* ArrayBuffer) {
	Free(ArrayBuffer - #ExpandArray)
}


;DllImport void* VirtualAlloc(void*, i64, i32, i32) {Kernel32.dll, VirtualAlloc}
;DllImport void VirtualProtect(void*, i64, i32, i32*) {Kernel32.dll, VirtualProtect}
;DllImport void VirtualFree(void*, i64, i32) {Kernel32.dll, VirtualFree}
;
;i32 MEM_COMMIT_RESERVE := 0x3000
;i32 PAGE_READ_WRITE := 0x4
;i32 PAGE_READ_EXECUTE := 0x20
;i32 MEM_RELEASE := 0x8000
;
;define void* AllocExecutableMemory(i64 Size) {
;	windows {
;		return VirtualAlloc(null, Size, MEM_COMMIT_RESERVE, PAGE_READ_WRITE)
;	}
;}
;define void LockExecutableMemory(void* Memory, i64 Size) {
;	windows {
;		i32 OldProtection := 0
;		VirtualProtect(Memory, Size, PAGE_READ_EXECUTE, &OldProtection)
;	}
;}
;define void FreeExecutableMemory(void* Memory) {
;	windows {
;		VirtualFree(Memory, 0, MEM_RELEASE)
;	}
;}