DllImport i64 _GetStdHandle(i32) {Kernel32.dll, GetStdHandle}
DllImport i8 SetConsoleTextAttribute(i64, i16) {Kernel32.dll, SetConsoleTextAttribute}
DllImport i8 SetConsoleMode(i64, i32) {Kernel32.dll, SetConsoleMode}
DllImport i8 GetConsoleMode(i64) {Kernel32.dll, SetConsoleMode}

#Require ./src/lib/Memory.rlx
#Require ./src/lib/String.rlx
#Require ./src/lib/File.rlx

define i64 GetStdHandle(i32 HandleNumber) {
	windows {
		return _GetStdHandle(HandleNumber)
	}
	linux {
		if (HandleNumber = -10) {return 0}
		else if (HandleNumber = -11) {return 1}
		else if (HandleNumber = -12) {return 2}
		else {return 3}
	}
}

i64 STDIN := GetStdHandle(-10)
i64 STDOUT := GetStdHandle(-11)
i64 STDERR := GetStdHandle(-12)

define void SwapOutputStream() {
	i64 Temp := STDOUT
	STDOUT := STDERR
	STDERR := Temp
}
define void SetInputMode(i64 Handle, i8 Enable) {
	windows {
		SetConsoleMode(Handle, Enable * (0x1 | 0x4 | 0x80))
	}
}

define void PrintNewLine() {
	windows {
		i16 NewLine := 0x0A0D
		
		FileWrite(STDOUT, &NewLine As void*, 2)
	}
	linux {
		i8 NewLine := 0x0A
		
		FileWrite(STDOUT, &NewLine As void*, 1)
	}
}
define void PrintCharacters(i8* Characters, i32 Count) {
	FileWrite(STDOUT, Characters, Count)
}

define void PrintLiteral(i64 PackedCharacters) {
	i8* Characters := (&PackedCharacters) As i8*
	
	for (i32 Length := 0, (Length < 8) && (Characters[Length] != 0), Length += 1) {}
	
	PrintCharacters(Characters, Length)
}
define void PrintCharacter(i8 Character) {
	PrintCharacters(&Character, 1)
}


i8{96} PrintBuffer

define void PrintString(i8* AString) {
	PrintCharacters(AString, StringLength(AString))
}

define void ClearPrintBuffer() {
	for (i32 Index := 0, Index < 12, Index += 1) {
		(PrintBuffer As i64*)[Index] := 0
	}
}
define void Print(i64 Number) {
	ClearPrintBuffer()
	PrintString(IToA(Number, 10, PrintBuffer))
}
define void PrintHex(i64 Number, i8 WithZeroX) {
	ClearPrintBuffer()
	PrintString(IToA(Number, 16, PrintBuffer, WithZeroX))
}
define void PrintHex(i64 Number) {
	PrintHex(Number, true)
}
define void PrintBinary(i64 Number) {
	ClearPrintBuffer()
	PrintString(IToA(Number, 2, PrintBuffer))
}

declare void SetColor(i8, i8)
declare void ResetColors()

define void Print(i8* Format, ... Args) {
	i32 Length := StringLength(Format)
	i32 ArgIndex := 1
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 Next := Format[Index]
		
		if (Next = '%') {
			Index += 1
			Next := Format[Index]
			void NextArg := Args[ArgIndex]
			
			if (Next = 'i') {
				Print(NextArg As i64)
			}
			else if (Next = 'x') {
				PrintHex(NextArg As i64)
			}
			else if (Next = 'c') {
				PrintCharacter(NextArg As i8)
			}
			else if (Next = 's') {
				PrintString(NextArg As i8*)
			}
			else if (Next = 'l') {
				PrintLiteral(NextArg As i64)
			}
			else if (Next = 'b') {
				PrintBinary(NextArg As i64)
			}
			
			ArgIndex += 1
		}
		else if (Next = '^') {
			Index += 2
			i8 Fore := GetCharacterValue(Format[Index - 1])
			i8 Back := GetCharacterValue(Format[Index])
			
			SetColor(Fore, Back)
		}
		else {
			PrintCharacter(Next)
		}
	}
}



i8 Bright := 0x08
i8 Red := 0x04
i8 Green := 0x02
i8 Blue := 0x01
i8 White := 0x0F
i8 Black := 0x00

define i8 TranslateWindowsColor(i8 Color) {
	/* Translates a windows color to an ANSI escape color */
	
	i8* ANSIColors := {i8: 0b000 0b100 0b010 0b110 0b001 0b101 0b011 0b111}
	i8 NewColor := ANSIColors[Color & 0b111]
	
	if (Color & Bright) {
		return (NewColor + 90) As i8
	}
	else {
		return (NewColor + 30) As i8
	}
}

define void PrintANSIEscape(i8 Foreground, i8 Background) {
	/* Writes a pair of ANSI escape sequences to change the terminal colors to Foreground/Background */
	
	PrintCharacter(0x1B)
	PrintCharacter('[')
	Print(TranslateWindowsColor(Foreground))
	PrintCharacter('m')
	
	PrintCharacter(0x1B)
	PrintCharacter('[')
	Print(TranslateWindowsColor(Background) + 10)
	PrintCharacter('m')
}

i8 NO_COLORS := false

define void SetColor(i8 Foreground, i8 Background) {
	if !(NO_COLORS) {
		linux {
			PrintANSIEscape(Foreground, Background)
		}
		windows {
			Background := (Background << 4) As i8
			
			SetConsoleTextAttribute(STDOUT, Foreground | Background)
		}
	}
}
define void ResetColors() {
	SetColor(White, Black)
}
define void TextColor(i8 Foreground) {
	SetColor(Foreground, Black)
}

/* Basic command line to argv parser since CommandLineToArgvW has no ascii version, and ArgV needs to be ASCII  */
define void ParseCommandLine(i8* CommandLine, i64* ArgC, i8*** ArgV) {
	i32 Length := StringLength(CommandLine)
	i32 ArgCount := 0
	i8** Args := Alloc(32 * 8) /* 32 max params */
	
	i32 CurrentArgStart := 0
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 NextCharacter := CommandLine[Index]
		
		if (NextCharacter = ' ') {
			Args[ArgCount] := CommandLine + CurrentArgStart
			ArgCount += 1
			
			CommandLine[Index] := 0
			
			while (CommandLine[Index + 1] = ' ') {
				Index += 1
			}
			
			CurrentArgStart := Index + 1
		}
		else if (NextCharacter = '"') {
			CurrentArgStart += 1
			CommandLine[Index] := 0
			
			while (CommandLine[Index] != '"') {
				Index += 1
			}
			
			CommandLine[Index] := 0
		}
	}
	
	Args[ArgCount] := CommandLine + CurrentArgStart
	ArgCount += 1
	
	ArgC[0] := ArgCount
	ArgV[0] := Args
}

DllImport i8* GetCommandLineA() {Kernel32.dll, GetCommandLineA}

define void GetArgs(i64* ArgC, i8*** ArgV) {
	/* Since this is a NOP on Linux, main can be pretty simple */
	
	windows {
		ParseCommandLine(GetCommandLineA(), ArgC, ArgV)
	}
}

define i8 ReadCharacter() {
	i8 CharacterRead := 0
	FileRead(STDIN, &CharacterRead, 1)
	
	;PrintCharacter(CharacterRead)
	return CharacterRead
}
define i8* ReadLine() {
	i8* Buffer := Alloc(200)
	i32 BufferSize := 200
	i32 BufferIndex := 0
	
	loop {
		if (BufferIndex >= BufferSize) {
			BufferSize += 200
			Buffer := ReAlloc(Buffer, BufferSize)
		}
		
		i8 NextCharacter := ReadCharacter()
		
		if (NextCharacter = 0x0A || NextCharacter = 0x0D) {
			if (BufferIndex = 0) {
				continue
			}
			
			PrintNewLine()
			Buffer[BufferIndex] := 0
			break
		}
		
		Buffer[BufferIndex] := NextCharacter
		BufferIndex += 1
	}
	
	return Buffer
}