DllImport i64 _GetStdHandle(i32) {Kernel32.dll, GetStdHandle}
DllImport i8 WriteConsole(i64, i16*, i32, i32*, i64) {Kernel32.dll, WriteConsoleW}
DllImport i8 WriteFile(i64, i8*, i32, i32*, i64) {Kernel32.dll, WriteFile}
DllImport i8 SetConsoleTextAttribute(i64, i16) {Kernel32.dll, SetConsoleTextAttribute}
DllImport i8 ReadConsole(i64, void*, i32, i32*, void) {Kernel32.dll, ReadConsoleW}


define i64 GetStdHandle(i32 HandleNumber) {
	windows {
		return _GetStdHandle(HandleNumber)
	}
	linux {
		if (HandleNumber = -10) {return 0}
		else if (HandleNumber = -11) {return 1}
		else if (HandleNumber = -12) {return 2}
	}
}


i64 STDIN := GetStdHandle(-10)
i64 STDOUT := GetStdHandle(-11)
i64 STDERR := GetStdHandle(-12)

define void SwapOutputStream() {
	i64 Temp := STDOUT
	STDOUT := STDERR
	STDERR := Temp
}
define void WriteNewLine() {
	windows {
		i32 BytesWritten := 0
		i16 NewLine := 0x0A0D
		
		WriteFile(STDOUT, &NewLine, 2, &BytesWritten, 0)
	}
	linux {
		i8 NewLine := 0x0A
		syscall:(1, STDOUT, &NewLine, 1)
	}
}
define void WriteCharacters(i8* Characters, i32 Count) {
	windows {
		i32 BytesWritten := 0
		
		WriteFile(STDOUT, Characters, Count, &BytesWritten, 0)
	}
	linux {
		syscall:(1, STDOUT, Characters, Count)
	}
}
define void WriteLiteral(i64 PackedCharacters) {
	i8* Characters := (&PackedCharacters) As i8*
	
	for (i32 Length := 0, (Length < 8) && (Characters[Length] != 0), Length += 1) {}
	
	WriteCharacters(Characters, Length)
}
define void WriteCharacter(i8 Character) {
	WriteCharacters(&Character, 1)
}
define i32 AWrite(i8* AString) {
	WriteCharacters(AString, ALen(AString))
/* 	
	windows {
		i32 BytesWritten := 0
		
		WriteFile(STDOUT, AString As i8*, ALen(AString), &BytesWritten, 0)
	}
	linux {
		syscall:(1, STDOUT, AString, ALen(AString))
	} */
}
define i32 AWriteLine(i8* AString) {
	AWrite(AString)
	WriteNewLine()
}

define i32 Write(i8* AString) {
	return 0
}
define i32 Write(i16 AString) {
	return 0
}

define i32 IWrite(i32** N) {
	return 0
}

define i32 Write(i16* WString) {
	i32 BytesWritten := 0
	i32 Index := 0
	
	while (WString[Index] != 0) {
		WriteCharacter(WString[Index] As i8)
		Index += 1
	}
}
define i32 WriteLine(i16* WString) {
	Write(WString)
	WriteNewLine()
}

define i32 IWrite(i64 Number) {
	i8* AString := IToA(Number)
	
	i32 Result := AWrite(AString)

	Free(AString)
	
	return Result
}
define i32 IWriteLine(i64 Number) {
	i8* AString := IToA(Number)
	
	i32 Result := AWriteLine(AString)
	
	Free(AString)
	
	return Result
}

define i32 IWriteHex(i64 Number) {
	i8* AString := IToAH(Number)
	
	i32 Result := AWrite(AString)

	Free(AString)
	
	return Result
}
define i32 IWriteHexLine(i64 Number) {
	i8* AString := IToAH(Number)
	
	i32 Result := AWriteLine(AString)
	
	Free(AString)
	
	return Result
}

i8 Bright := 0x08
i8 Red := 0x04
i8 Green := 0x02
i8 Blue := 0x01
i8 White := 0x0F
i8 Black := 0x00

define i8 TranslateWindowsColor(i8 Color) {
	/* Translates a windows color to an ANSI escape color */
	
	i8 NewRed := ((Color & Red) != 0)
	i8 NewGreen := ((Color & Green) != 0) * 2
	i8 NewBlue := ((Color & Blue) != 0) * 4
	
	i8 NewColor := NewRed | NewGreen | NewBlue
	
	if (Color & Bright) {
		return (NewColor + 90) As i8
	}
	else {
		return (NewColor + 30) As i8
	}
}

define void WriteANSIEscape(i8 Foreground, i8 Background) {
	/* Writes a pair of ANSI escape sequences to change the terminal colors to Foreground/Background */
	
	WriteCharacter(0x1B)
	WriteCharacter('[')
	IWrite(TranslateWindowsColor(Foreground))
	WriteCharacter('m')
	
	WriteCharacter(0x1B)
	WriteCharacter('[')
	IWrite(TranslateWindowsColor(Background) + 10)
	WriteCharacter('m')
}

i8 NO_COLORS := false

define void SetColor(i8 Foreground, i8 Background) {
	if (NO_COLORS) {
		return 0
	}
	
	linux {
		WriteANSIEscape(Foreground, Background)
	}
	windows {
		Background := Background << 4
		
		SetConsoleTextAttribute(STDOUT, Foreground | Background)
	}
}
define void ResetColors() {
	SetColor(White, Black)
}
define void TextColor(i8 Foreground) {
	SetColor(Foreground, Black)
}

define i16* ReadLine(i32 MaxLength) {
	windows {
		i16* Buffer := Alloc(MaxLength * 2)
		i32 CharactersRead := 0
	
		ReadConsole(STDIN, Buffer, MaxLength, &CharactersRead, 0)
		
		return Buffer
	}
}

/* Basic command line to argv parser since CommandLineToArgvW has no ascii version, and ArgV needs to be ASCII  */
define void ParseCommandLine(i8* CommandLine, i64* ArgC, i8*** ArgV) {
	i32 Length := ALen(CommandLine)
	i32 ArgCount := 0
	i8** Args := Alloc(32 * 8) /* 32 max params */
	
	i32 CurrentArgStart := 0
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 NextCharacter := CommandLine[Index]
		
		if (NextCharacter = ' ') {
			Args[ArgCount] := CommandLine + CurrentArgStart
			ArgCount += 1
			
			CommandLine[Index] := 0
			
			while (CommandLine[Index + 1] = ' ') {
				Index += 1
			}
			
			CurrentArgStart := Index + 1
		}
		else if (NextCharacter = '"') {
			CurrentArgStart += 1
			CommandLine[Index] := 0
			
			while (CommandLine[Index] != '"') {
				Index += 1
			}
			
			CommandLine[Index] := 0
		}
	}
	
	Args[ArgCount] := CommandLine + CurrentArgStart
	ArgCount += 1
	
	ArgC[0] := ArgCount
	ArgV[0] := Args
}

DllImport i8* GetCommandLineA() {Kernel32.dll, GetCommandLineA}

define void GetArgs(i64* ArgC, i8*** ArgV) {
	/* Since this is a NOP on Linux, main can be pretty simple */
	
	windows {
		ParseCommandLine(GetCommandLineA(), ArgC, ArgV)
	}
}