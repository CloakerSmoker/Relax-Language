define void RestoreHandlerContextAndTransferControl(i64 Code, void* Handler, void* OldRBP, void* OldRSP) asm {
	; Restores the execution context to how the function containing the handler expects, and then
	;  calls the handler passing the exception code
	
	mov, rbp, rdx
	mov, rsp, rcx
	jmp, rsi
}

struct StackFrame {
	StackFrame* LastFrame,
	i64* ReturnAddress
}

define i64* GetRBP() asm {
	mov, rax, rbp
	ret
}

/* 
	`Try` will (With `ThisFrame := RBP As StackFrame*`):
		1) Push `ThisFrame->LastFrame`		(saving it)
		2) Push `ThisFrame->ReturnAddress`	(saving it)
		
		3) Set `ThisFrame->LastFrame := RSP | 1`
		4) Set `ThisFrame->ReturnAddress := &CatchBlock`
		
	And `Throw` will:
		1) Walk up `ThisFrame->LastFrame` as a singly linked list, looking for `ThisFrame->LastFrame & 1`
			When `ThisFrame->LastFrame & 1` is true, we know that we've found a frame altered by `Try`
			which will have set `ThisFrame->ReturnAddress` to the address of a `Catch` block
		2) Set RBP to `ThisFrame`, restorting the base pointer for the function which contains 
			the `Catch` block, restoring access to any local variables of the function
		3) Set RSP to `ThisFrame->LastFrame - 1` which is equal to RSP inside of the `Try` block of the function
		4) Jump to `ThisFrame->ReturnAddress`, transferring control to the `catch` block, passing the exception
			code in RDI
	
	The end of a `Try` (or the start of a `Catch`) will:
		1) Pop the saved version of `ThisFrame->ReturnAddress` back into `ThisFrame->ReturnAddress`
		2) Pop the saved version of `ThisFrame->LastFrame` back into `ThisFrame->LastFrame`
		3) (If the catch block exists, and has a code variable) set the code variable to RDI passed by `Throw` 
	
	This *should* work in most cases, since `ThisFrame->LastFrame` (on all platforms) must be aligned to at least a 
		multiple of 8, and shockingly enough, both 1 and 9 are not multiples of 8, so there will never be a valid
		stack frame with `ThisFrame->LastFrame & 1` set (unless it is an exception handler).
	
	One potential problem is with outside software trying to walk the stack, but from what I've seen, all debuggers
		couldn't figure out the braindead simple stack layout *before* exception handling was added, so it doesn't
		really matter.
	
	Another problem is if a function `return`s while the stack frame is altered by one or more `try` blocks, which
		would cause RBP to be set to a corrupted RSP, and the `ret` portion of the return would jump to garbage
		memory (assuming the stack misalignment doesn't instantly crash everything)
	
	Really, the last problem applies to a `Try` stack frame modification ever being leaked, but without a funky
		inline assembly jump which never runs the tail end of the `Try` statement, this shouldn't be possible.
		
		
	Todo: Translate system errors/signals into native exceptions
	
*/

define StackFrame* FindHandler(i64* StartingFrame) {
	; Walks up stack frames looking for one marked as an exception handler
	
	StackFrame* Last := StartingFrame As StackFrame*
	
	while (Last) {
		if (Last->LastFrame & 1) {
			return Last
		}
		
		Last := Last->LastFrame
	}
	
	return null
}

void* UnhandledExceptionHandler := null

define void CallUnhandledExceptionFilter(i64 Code, void* Handler) asm {
	jmp, rsi
}

i8 EXCEPTION_WAS_LAST_CHANCE := false

define void CallUnhandledExceptionHandler(i64 Code) {
	if (UnhandledExceptionHandler != null && !EXCEPTION_WAS_LAST_CHANCE) {
		EXCEPTION_WAS_LAST_CHANCE := true
		
		CallUnhandledExceptionFilter(Code, UnhandledExceptionHandler)
	}
	
	TerminateAfterUnhandledException(Code)
}

define void Throw(i64 Code) {
	; Calls the first exception handler found in the call stack
	
	StackFrame* Last := FindHandler(GetRBP())
	
	if (Last = null) {
		CallUnhandledExceptionHandler(Code)
	}
	else {
		RestoreHandlerContextAndTransferControl(Code, Last->ReturnAddress, Last, Last->LastFrame - 1)
	}
}