#Require "$/StringBase.rlx"
#Require "$/Memory.rlx"

define i16* AToW(i8* AString, i32 Length) {
	/* Converts an ASCII string to a wide string */
	
	i16* NewBuffer := Alloc((Length * 2) + 2)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		NewBuffer[Index] := AString[Index]
	}
	
	return NewBuffer
}
define i8* WToA(i16* String, i32 Length) {
	i8* Buffer := Alloc(Length + 1)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		Buffer[Index] := String[Index] As i8
	}
	
	Buffer[Index] := 0
	
	return Buffer
}
define i8* WToA(i16* String) {
	return WToA(String, StringLength(String))
}

define i8* IToA(i64 Number, i64 Base) {
	return IToA(Number, Base, Alloc(100))
}
define i8* IToA(i64 Number) {
	return IToA(Number, 10, Alloc(100))
}
define i8* IToAH(i64 Number) {
	return IToA(Number, 16, Alloc(100))
}

define i16* IToW(i64 Number) {
	i8* AString := IToA(Number)
	i16* WString := AToW(AString, StringLength(AString))
	
	Free(AString As void*)
	
	return WString
}
define i16* IToWH(i64 Number) {
	i8* AString := IToAH(Number)
	i16* WString := AToW(AString, StringLength(AString))
	
	Free(AString As void*)
	
	return WString
}

define i64 AToI(i8* AString) {
	i16* WString := AToW(AString, StringLength(AString))
	
	i64 Result := WToI(WString)
	
	Free(WString)
	
	return Result	
}

define i8* Concatenate(i8* Left, i8* Right) {
	i32 LeftLength := StringLength(Left)
	i32 RightLength := StringLength(Right)
	
	i8* NewString := Alloc(LeftLength + RightLength + 1)
	
	MoveMemory(NewString, Left, LeftLength)
	MoveMemory(NewString + LeftLength, Right, RightLength)
	
	return NewString
}