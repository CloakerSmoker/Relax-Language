/* generics when? */
define i32 StringLength(i8* String) {
	for (i32 Length := 0, String[Length] != 0, Length += 1) {}
	
	return Length
}
define i32 WLen(i16* String) {
	for (i32 Length := 0, String[Length] != 0, Length += 1) {}
	
	return Length
}

define i16* AToW(i8* AString, i32 Length) {
	/* Converts an ASCII string to a wide string */
	
	i16* NewBuffer := Alloc((Length * 2) + 2)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		NewBuffer[Index] := AString[Index]
	}
	
	return NewBuffer
}
define i8* WToA(i16* WString) {
	i32 Length := WLen(WString)
	i8* Buffer := Alloc(Length + 1)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		Buffer[Index] := WString[Index]
	}
	
	return Buffer
}

define i16 Lower(i16 Character) {
	/* Gets a character as lowercase */
	
	if ('A' <= Character && Character <= 'Z') {
		Character += 32
	}
	
	return Character
}

define i8 CharacterEqualsNoCase(i16 CharacterOne, i16 CharacterTwo) {
	/* Checks if two characters are equal, ignoring case */
	return Lower(CharacterOne) = Lower(CharacterTwo)
}

define i8 IsAlpha(i16 Character) {
	/* Checks if a character is alpha */
	
	if ('a' <= Character && Character <= 'z') {
		return 1
	}
	else if ('A' <= Character && Character <= 'Z') {
		return 1
	}

	return 0
}
define i8 IsNumeric(i16 Character) {
	/* Checks if a character is a number of not */
	return (Character >= '0') && (Character <= '9')
}
define i8 IsNumber(i16 Character) {
	return IsNumeric(Character)
}

define i8 IsAlphaNumeric(i16 Character) {
	/* Checks if a character is alphanumeric(/can be part of an identifier) */
	return IsAlpha(Character) || IsNumeric(Character) || Character = '_'
}

define i8 IsPath(i16 Character) {
	if (IsAlphaNumeric(Character)) {
		return true
	}
	else if (Character = '/' || Character = '\') {
		return true
	}
	else if (Character = '.') {
		return true
	}
	
	return false
}

define i8 _IsHex(i16 Character) {
	/* Checks if a character is a hex character (a-fA-F) */
	
	if ((Character >= 'a') && (Character <= 'f')) {
		return true
	}
	else if ((Character >= 'A') && (Character <= 'F')) {
		return true
	}
	
	return false
}
define i8 IsHex(i16 Character) {
	/* Checks if a character is numeric or hex */
	return IsNumeric(Character) || _IsHex(Character)
}

define i8 IsWhiteSpace(i16 Character) {
	if (Character = ' ' || Character = '	') {
		/* space+tab */
		return true
	}
	else if (Character = 10 || Character = 13) {
		/* linefeeds */
		return true
	}

	return false
}

define i8 NumberToCharacter(i8 Number) {
	if (Number < 10) {
		return (Number + '0') As i8
	}
	else {
		return (Number - 10 + 'A') As i8
	}
}
define i8 GetCharacterValue(i8 Character) {
	Character := Lower(Character)
	
	if (Character >= 'a') {
		return ((Character - 'a') + 10) As i8
	}
	
	return (Character - '0') As i8
}

define void MemoryReverse(i8* Buffer, i32 Length) {
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 Temp := Buffer[Index]
		Buffer[Index] := Buffer[Length - 1]
		Buffer[Length - 1] := Temp
		
		Length -= 1
	}
}

define i8* IToA(i64 Number, i64 Base, i8* Buffer) {
	if (Buffer = null) {
		Buffer := Alloc(100)
	}
	
	i8 Sign := 0
	
	if (Number < 0) {
		Sign := true
		
		if (Base = 10) {
			Number := -Number
		}
		else if (Base = 16) {
			/* Negative hex numbers are printed as unsigned, and get the sign bit individually set in the output string */
			
			Number := Number & 0x7FFFFFFFFFFFFFFF
		}
	}
	
	for (i32 Index := 0, Number != 0, Index += 1) {
		Buffer[Index] := NumberToCharacter((Number % Base) As i8)
		Number := Number / Base
	}
	
	if (Index = 0) {
		Buffer[0] := '0'
		Index := 1
	}
	
	if (Sign) {
		if (Base = 10) {
			Buffer[Index] := '-'
			Index += 1
		}
		else if (Base = 16) {
			i8 Last := GetCharacterValue(Buffer[Index - 1])
			Last := Last | 0x8
			Buffer[Index - 1] := NumberToCharacter(Last)
		}
	}
	
	if (Base = 16) {
		Buffer[Index] := 'x'
		Buffer[Index + 1] := '0'
		Index += 2
	}
	
	MemoryReverse(Buffer, Index)
	
	return Buffer
}
define i8* IToA(i64 Number, i64 Base) {
	return IToA(Number, Base, null)
}
define i8* IToA(i64 Number) {
	return IToA(Number, 10, null)
}
define i8* IToAH(i64 Number) {
	return IToA(Number, 16, null)
}

define i16* IToW(i64 Number) {
	i8* AString := IToA(Number)
	i16* WString := AToW(AString, StringLength(AString))
	
	Free(AString As void*)
	
	return WString
}
define i16* IToWH(i64 Number) {
	i8* AString := IToAH(Number)
	i16* WString := AToW(AString, StringLength(AString))
	
	Free(AString As void*)
	
	return WString
}

define i64 WToI(i16* WString) {
	i64 Result := 0
	i64 Negative := 0
	
	i16 FirstCharacter := WString[0]
	
	if (FirstCharacter = '-') {
		Negative := 1
		WString += 2
		FirstCharacter := WString[0]
	}
	
	if !(IsNumeric(FirstCharacter)) {
		return 0
	}
	
	i32 Length := WLen(WString)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i16 NextCharacter := WString[Index]
		
		if !(IsNumeric(NextCharacter)) {
			Break
		}
		
		Result := (Result * 10) + (NextCharacter - '0')
	}
	
	if (Negative) {
		Result := -Result
	}
	
	return Result
}
define i64 AToI(i8* AString) {
	i16* WString := AToW(AString, StringLength(AString))
	
	i64 Result := WToI(WString)
	
	Free(WString)
	
	return Result	
}

define i8 StringEquals(i8* Left, i8* Right) {
	i32 Index := 0
	
	loop {
		i8 LeftCharacter := Left[Index]
		i8 RightCharacter := Right[Index]
		
		if (LeftCharacter = 0 && RightCharacter = 0) {
			return true
		}
		else if (LeftCharacter != RightCharacter || LeftCharacter = 0 || RightCharacter = 0) {
			return false
		}
		
		Index += 1
	}
}