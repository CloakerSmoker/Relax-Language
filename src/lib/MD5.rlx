i32 MD5_DIGEST_SIZE := 16
i32 MD5_WORK_SIZE := 0x10 * #i32
i32 MD5_TEMP_SIZE := 0x1000

struct MD5Hasher {
	i32* WorkWords
	i8* TempBuffer
	
	static MD5Hasher* New() {
		MD5Hasher* this := Alloc(#MD5Hasher)
		
		this->WorkWords := Alloc(MD5_WORK_SIZE)
		this->TempBuffer := Alloc(MD5_TEMP_SIZE)
		
		return this
	}
	
	define i32 RotateLeft(i32 N, i8 RotateBy) {
		return (N << RotateBy) | (N >> (32 As i8 - RotateBy))
	}
	
	define void Hash(void* RawData, i32 Length, void* Out, i8 IgnoreCase) {
		i8* Data := RawData As i8*
		
		i32* K := {i32: 
			0xd76aa478 0xe8c7b756 0x242070db 0xc1bdceee
			0xf57c0faf 0x4787c62a 0xa8304613 0xfd469501
			0x698098d8 0x8b44f7af 0xffff5bb1 0x895cd7be
			0x6b901122 0xfd987193 0xa679438e 0x49b40821
			0xf61e2562 0xc040b340 0x265e5a51 0xe9b6c7aa
			0xd62f105d 0x02441453 0xd8a1e681 0xe7d3fbc8
			0x21e1cde6 0xc33707d6 0xf4d50d87 0x455a14ed
			0xa9e3e905 0xfcefa3f8 0x676f02d9 0x8d2a4c8a
			0xfffa3942 0x8771f681 0x6d9d6122 0xfde5380c
			0xa4beea44 0x4bdecfa9 0xf6bb4b60 0xbebfbc70
			0x289b7ec6 0xeaa127fa 0xd4ef3085 0x04881d05
			0xd9d4d039 0xe6db99e5 0x1fa27cf8 0xc4ac5665
			0xf4292244 0x432aff97 0xab9423a7 0xfc93a039
			0x655b59c3 0x8f0ccc92 0xffeff47d 0x85845dd1
			0x6fa87e4f 0xfe2ce6e0 0xa3014314 0x4e0811a1
			0xf7537e82 0xbd3af235 0x2ad7d2bb 0xeb86d391
		}
		
		i8* R := {i8: 
			7 12 17 22
			7 12 17 22
			7 12 17 22
			7 12 17 22
			5 9 14 20
			5 9 14 20
			5 9 14 20
			5 9 14 20
			4 11 16 23
			4 11 16 23
			4 11 16 23
			4 11 16 23
			6 10 15 21
			6 10 15 21
			6 10 15 21
			6 10 15 21
		}
		
		i32 PartialHashA := 0x67452301
		i32 PartialHashB := 0xefcdab89
		i32 PartialHashC := 0x98badcfe
		i32 PartialHashD := 0x10325476
		
		for (i32 NewLength := Length + 1, NewLength % (512 / 8) != 448 / 8, NewLength += 1) {}
		
		i8* WorkBuffer := null
		i8 WorkBufferWasAllocated := false
		
		if (NewLength + 8 < MD5_TEMP_SIZE) {
			WorkBuffer := this->TempBuffer
			
			i64* ClearBuffer := WorkBuffer
			
			for (i32 ClearIndex := 0, ClearIndex < 512, ClearIndex += 1) {
				ClearBuffer[ClearIndex] := 0
			}
		}
		else {
			WorkBufferWasAllocated := true
			WorkBuffer := Alloc(NewLength + 8)
		}
		
		i32* WorkWords := this->WorkWords
		
		;MoveMemory(WorkBuffer, Data, Length)
		
		for (i32 CopyIndex := 0, CopyIndex < Length, CopyIndex += 1) {
			if (IgnoreCase) {
				WorkBuffer[CopyIndex] := Lower(Data[CopyIndex])
			}
			else {
				WorkBuffer[CopyIndex] := Data[CopyIndex]
			}
		}
		
		WorkBuffer[Length] := 0x80
		*(WorkBuffer + NewLength As i32*) := Length * 8
		
		;Print("Length = %x, NewLength = %x, Overall size = %x\n", Length, NewLength, NewLength + 8)
		
		for (i32 Offset := 0, Offset < NewLength, Offset += (512 / 8)) {
			MoveMemory(WorkWords, WorkBuffer + Offset, 16 * #i32)
			
			;Print("WorkWords: ")
			;PrintArray("\n%i", WorkWords, 4, 16)
			;Print("\n")
			
			i32 A := PartialHashA
			i32 B := PartialHashB
			i32 C := PartialHashC
			i32 D := PartialHashD
			
			;Print("[i = _] A=%i, B=%i, C=%i, D=%i\n", A As i64, B As i64, C As i64, D As i64)
			
			;Print("Hashing %x .. %x\n", Offset, Offset + 16 * #i32)
			
			for (i32 Index := 0, Index < 64, Index += 1) {
				i32 F := 0
				i32 G := 0
				
				if (Index < 16) {
					F := (B & C) | ((~B) & D)
					G := Index
				}
				else if (Index < 32) {
					F := (D & B) | ((~D) & C)
					G := (Index * 5 + 1) % 16
				}
				else if (Index < 48) {
					F := B ^ C ^ D
					G := (Index * 3 + 5) % 16
				}
				else {
					F := C ^ (B | (~D))
					G := (Index * 7) % 16
				}
				
				F += A + K[Index] + WorkWords[G]
				
				A := D
				D := C
				C := B
				B += this->RotateLeft(F, R[Index])
				
				;Print("[i = %i] A=%i, B=%i, C=%i, D=%i\n", Index, A As i64, B As i64, C As i64, D As i64)
			}
			
			;Print("Done with 64 rounds\n")
			
			PartialHashA += A
			PartialHashB += B
			PartialHashC += C
			PartialHashD += D
		}
		
		if (WorkBufferWasAllocated) {
			Free(WorkBuffer)
		}
		
		i32* ResultBuffer := Out As i32*
		
		ResultBuffer[0] := PartialHashA
		ResultBuffer[1] := PartialHashB
		ResultBuffer[2] := PartialHashC
		ResultBuffer[3] := PartialHashD
	}
	define void Hash(void* RawData, i32 Length, void* Out) {
		this->Hash(RawData, Length, Out, false)
	}
	
	define i8 NumberToCharacter(i32 Number) {
		if (Number < 10) {
			return (Number + '0') As i8
		}
		else {
			return (Number - 10 + 'a') As i8
		}
	}
	
	define void StringifyDigest(i8* IntoBuffer, void* Result) {
		i8* Bytes := Result As i8*
		
		for (i32 Index := 0, Index < 16, Index += 1) {
			i8 ThisByte := Bytes[Index]
			i8* ThisByteBuffer := IntoBuffer + Index * 2
			
			ThisByteBuffer[0] := this->NumberToCharacter((ThisByte & 0xF0) >> 4)
			ThisByteBuffer[1] := this->NumberToCharacter(ThisByte & 0x0F)
		}
		
		IntoBuffer[Index * 2] := 0
	}
	define i8* StringifyDigest(void* Result) {
		i8* Buffer := Alloc(32 + 1)
		
		this->StringifyDigest(Buffer, Result)
		
		return Buffer
	}
	
	define void PrintDigest(void* Result) {
		PrintLiteral('0x')
		
		i8* Bytes := Result As i8*
		
		for (i32 Index := 0, Index < 16, Index += 1) {
			PrintHex(Bytes[Index] As i64 & 0xFF, false)
		}
	}
}

MD5Hasher* MD5 := MD5Hasher:New()