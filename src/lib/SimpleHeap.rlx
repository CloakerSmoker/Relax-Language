struct SimpleHeap {
	/* Backing struct stored at the start of the program break to track heap size/next allocation location */
	
	void* Next,
	void* End
}

i32 DEFAULT_HEAP_SIZE := 0x100000

define SimpleHeap* SimpleHeapInit() {
	linux {
		void* ProgramBreak := syscall:(12, 0)
		
		syscall:(12, ProgramBreak + DEFAULT_HEAP_SIZE)
		
		SimpleHeap* Heap := ProgramBreak As SimpleHeap*
		
		Heap->Next := ProgramBreak + #SimpleHeap
		Heap->End := ProgramBreak + DEFAULT_HEAP_SIZE
		
		return Heap
	}
}

SimpleHeap* ProcessHeap := SimpleHeapInit()

define void SimpleHeapGrow() {	
	linux {
		ProcessHeap->End := syscall:(12, ProcessHeap->End + DEFAULT_HEAP_SIZE)
	}
}

define void* SimpleHeapAlloc(i64 Size) {
	linux {
		void* Result := ProcessHeap->Next
		void* ResultEnd := Result + Size + 8
		
		while (ResultEnd >= (ProcessHeap->End - 0x10000)) {		
			SimpleHeapGrow()
		}
		
		Result[0] := Size
		ProcessHeap->Next := ResultEnd
		
		return Result + 8
	}
}

define void SimpleHeapCopyClear(i8* From, i8* To, i64 Size) {
	linux {
		for (i64 Index := 0, Index < Size, Index += 1) {
			To[Index] := From[Index]
			/* Todo: Put this back in, once you figure out who's using ReAlloc'd memory
			From[Index] := 'R' */
		}
	}
}

define void* SimpleHeapReAlloc(void* Memory, i64 NewSize) {
	linux {
		i64 OldSize := (Memory - 8)[0]
		
		if (OldSize > NewSize) {
			return Memory
		}
		
		void* NewMemory := SimpleHeapAlloc(NewSize)
		
		SimpleHeapCopyClear(Memory, NewMemory, OldSize)
		
		return NewMemory
	}
}