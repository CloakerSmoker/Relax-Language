DllImport i8 SetConsoleTextAttribute(i64, i16) {Kernel32.dll, SetConsoleTextAttribute}
DllImport i8 SetConsoleMode(i64, i32) {Kernel32.dll, SetConsoleMode}
DllImport i8 GetConsoleMode(i64) {Kernel32.dll, SetConsoleMode}

#Require "$/FileBase.rlx"
#Require "$/StringBase.rlx"

#Require "@/ConsoleStreams.rlx"

define void SwapOutputStream() {
	i64 Temp := STDOUT
	STDOUT := STDERR
	STDERR := Temp
}
define void SetInputMode(i64 Handle, i8 Enable) {
	windows {
		SetConsoleMode(Handle, Enable * (0x1 | 0x4 | 0x80))
	}
}

define void PrintNewLine() {
	windows {
		i16 NewLine := 0x0A0D
		
		FileWrite(STDOUT, &NewLine As void*, 2)
	}
	linux {
		i8 NewLine := 0x0A
		
		FileWrite(STDOUT, &NewLine As void*, 1)
	}
}

define void PrintCharacter(i8 Character) {
	FileWrite(STDOUT, &Character, 1)
}
define void PrintCharacters(i8* Characters, i32 Count) {
	FileWrite(STDOUT, Characters, Count)
}

#Include "$/Print.rlx"

i8 Bright := 0x08
i8 Red := 0x04
i8 Green := 0x02
i8 Blue := 0x01
i8 White := 0x0F
i8 Black := 0x00

define i8 TranslateWindowsColor(i8 Color) {
	/* Translates a windows color to an ANSI escape color */
	
	i8* ANSIColors := {i8: 0b000 0b100 0b010 0b110 0b001 0b101 0b011 0b111}
	i8 NewColor := ANSIColors[Color & 0b111]
	
	if (Color & Bright) {
		return (NewColor + 90) As i8
	}
	else {
		return (NewColor + 30) As i8
	}
}

define void PrintANSIEscape(i8 Foreground, i8 Background) {
	/* Writes a pair of ANSI escape sequences to change the terminal colors to Foreground/Background */
	
	Print("\e[%im", TranslateWindowsColor(Foreground))
	Print("\e[%im", TranslateWindowsColor(Background) + 10)
}

i8 NO_COLORS := false

define void SetColor(i8 Foreground, i8 Background) {
	if !(NO_COLORS) {
		linux {
			PrintANSIEscape(Foreground, Background)
		}
		windows {
			Background := (Background << 4) As i8
			
			SetConsoleTextAttribute(STDOUT, Foreground | Background)
		}
	}
}
define void ResetColors() {
	SetColor(White, Black)
}
define void TextColor(i8 Foreground) {
	SetColor(Foreground, Black)
}

define i8 ReadCharacter() {
	i8 CharacterRead := 0
	FileRead(STDIN, &CharacterRead, 1)
	
	;PrintCharacter(CharacterRead)
	return CharacterRead
}