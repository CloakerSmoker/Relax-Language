#Require "$/FileBase.rlx"
#Require "$/Memory.rlx"

declare i8* MakeAbsolute(i8*)
declare i8* ExpandPath(i8*)

#Require "@/File.rlx"

define void* FileReadAll(i64 File) {
	i32 Size := FileGetSize(File)
	void* Buffer := Alloc(Size + 1)

	FileRead(File, Buffer, Size)

	return Buffer
}

define i8* MakeAbsolute(i8* Path) {
	if (Path[0] != '/') {
		i8* WorkingDirectory := GetWorkingDirectory()
		
		i32 PathLength := StringLength(Path)
		i32 WorkingDirectoryLength := StringLength(WorkingDirectory) 
		
		i8* Absolute := Alloc(WorkingDirectoryLength + 1 + PathLength + 1)
		
		MoveMemory(Absolute, WorkingDirectory, WorkingDirectoryLength)
		Absolute[WorkingDirectoryLength] := '/'
		MoveMemory(&Absolute[WorkingDirectoryLength] + 1, Path, PathLength)
		
		Free(WorkingDirectory)
		
		return Absolute
	}
	
	return Path
}

define i8* ExpandPath(i8* Path) {
	i32 Length := StringLength(Path)

	i8* Result := Alloc(Length + 2)
	i32 ResultIndex := 0
	
	i8* CurrentPart := Path

	for (i32 Index := 0, Index < Length, Index++) {
		i8 AtSeperator := Path[Index] = '/'
		i8 AtEnd := Index + 1 = Length
		
		if (AtSeperator || AtEnd) {
			if (AtSeperator) {
				Path[Index] := 0
			}
			else {
				Path[Index + AtEnd] := 0
			}
			
			if (StringEquals(CurrentPart, ".")) {
				
			}
			else if (StringEquals(CurrentPart, "..")) {
				for (i32 ReverseIndex := ResultIndex - 1, ReverseIndex >= 0, ReverseIndex--) {
					if (Result[ReverseIndex] = '/') {
						Result[ReverseIndex] := 0
						ResultIndex := ReverseIndex
						break
					}
				}
			}
			else {
				Result[ResultIndex++] := '/'
				
				MoveMemory(&Result[ResultIndex], CurrentPart, StringLength(CurrentPart))	
				ResultIndex += StringLength(CurrentPart)
			}
			
			if (AtEnd && AtSeperator) {
				Result[ResultIndex++] := '/'
				Result[ResultIndex] := 0
			}
			
			CurrentPart := &Path[Index + 1]
		}
	}
	
	MoveMemory(Result, Result + 1, StringLength(Result + 1))
	
	return Result
}
