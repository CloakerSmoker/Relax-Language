DllImport i64 GetProcessHeap() {Kernel32.dll, GetProcessHeap}
DllImport void* HeapAlloc(i64, i32, i64) {Kernel32.dll, HeapAlloc}
DllImport void* HeapReAlloc(i64, i32, void*, i64) {Kernel32.dll, HeapReAlloc}
DllImport i8 HeapFree(i64, i32, void*) {Kernel32.dll, HeapFree}

i32 HEAP_ZERO_MEMORY := 0x00000008
i32 HEAP_REALLOC_IN_PLACE_ONLY := 0x00000010

struct WindowsHeapAllocator {
    i64 Handle

    define void* Alloc(i64 Size) {
        return HeapAlloc(this->Handle, HEAP_ZERO_MEMORY, Size)
    }

    define void* ReAlloc(void* Memory, i64 NewSize) {
        return HeapReAlloc(this->Handle, HEAP_ZERO_MEMORY, Memory, NewSize)
    }

    define void Free(void* Memory) {
        HeapFree(this->Handle, 0, Memory)
    }
}

WindowsHeapAllocator DefaultWindowsHeap {
    Handle: GetProcessHeap()
}

MemoryAllocator DefaultAllocator {
    State: &DefaultWindowsHeap,
    Allocate: &WindowsHeapAllocator.Alloc,
    Extend: &WindowsHeapAllocator.ReAlloc,
    Free: &WindowsHeapAllocator.Free
}

define i32 SetAllocatorPanicHandler(i32 Priority, void(i8*, void*) Handler) {
	return 0
}