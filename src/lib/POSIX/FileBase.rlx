define i64 FileOpen(i8* FilePath, i32 Mode) {
    return syscall:(SYSCALL_OPEN, FilePath, Mode, 0x1C0)
}

define i64 FileOpenAt(i64 Directory, i8* FilePath, i32 Mode) {
    return syscall:(SYSCALL_OPENAT, Directory, FilePath, Mode, 0x1C0)
}

define i64 FileGetStatus(i64 File, FileStatus* Status) {
    return syscall:(SYSCALL_FSTAT, File, Status)
}

i32 SEEK_SET := 0
i32 SEEK_RELATIVE := 1
i32 SEEK_END := 2

enum SeekMode {
	Set,
	Offset,
	End
}

define i32 FileSeek(i64 File, i32 Offset, i32 Mode) {
    return syscall:(SYSCALL_SEEK, File, Offset, Mode) As i32
}
define i32 FileTell(i64 File) {
	return FileSeek(File, 0, SEEK_RELATIVE)
}

define i32 FileGetSize(i64 File) {
    i32 OldOffset := FileTell(File)
    i32 End := FileSeek(File, 0, SEEK_END)
    FileSeek(File, OldOffset, SEEK_SET)

    return End
}
define i32 FileRead(i64 File, void* Buffer, i32 BytesToRead) {
	i32 BytesRead := 0

    BytesRead := syscall:(SYSCALL_READ, File, Buffer, BytesToRead) As i32

	return BytesRead
}

define i32 FileWrite(i64 File, void* Buffer, i32 BufferSize) {
	i32 BytesWritten := 0

    BytesWritten := syscall:(SYSCALL_WRITE, File, Buffer, BufferSize) As i32

	return BytesWritten
}
define void FileClose(i64 File) {
    syscall:(SYSCALL_CLOSE, File)
}
define i64 FileGetError(i64 Result) {
	if (Result > 0) {
		return 0
	}

    return -Result + 1
}
define i32 FileDelete(i8* FilePath) {
    return syscall:(SYSCALL_UNLINK, FilePath) As i32
}

define void FileTruncate(i64 File, i64 Size) {
    syscall:(SYSCALL_FTRUNCATE, File, Size)
}

define void SetWorkingDirectory(i8* Path) {
    syscall:(SYSCALL_CHDIR, Path)
}
