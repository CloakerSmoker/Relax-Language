struct SafeWideString {
	i32 Length,
	i16* Buffer
}

define SafeWideString* AllocateNewSafeString() {
	return Alloc(#SafeWideString) As SafeWideString*
}
define void FreeSafeString(SafeWideString* StringToFree) {
	Free(StringToFree As void*)
}

define SafeWideString* AToS(i8* SourceString) {
	/* Converts an ASCII string to a SafeWideString (without freeing anything ever) */
	
	SafeWideString* NewString := AllocateNewSafeString()
	
	i32 Length := ALen(SourceString)
	
	NewString->Buffer := AToW(SourceString, Length)
	NewString->Length := Length
	
	return NewString
}

define i8 SafeStringEqualsAString(SafeWideString* StringOne, i8* StringTwo) {
	/* Compares a SafeWideString and i8* ASCII string */

	i32 Index := 0
	
	loop {
		i16 Left := Lower(StringOne->Buffer[Index])
		i16 Right := Lower(StringTwo[Index])
		
		if (Index >= StringOne->Length) {
			/* Handle reaching the end of the safe string */
			
			if (Right = 0) {
				/* If the AString has also ended, then they are equal */
				return true
			}
			else {
				/* Otherwise, they aren't equal */
				return false
			}
		}
		else if (Right = 0) {
			/* If the AString ends before the SafeWideString, then they are not equal */
			return false
		}
		
		if (Left != Right) {
			return false
		}
		
		Index += 1
	}
}

define void PrintSafeString(SafeWideString* StringToPrint) {
	/* Prints a safe string (safely) by using the string's length */
	
	for (i32 Index := 0, Index < (StringToPrint->Length), Index += 1) {
		i16 NextCharacter := StringToPrint->Buffer[Index] 
		
		WriteCharacter(NextCharacter As i8)
	}
}

define i64 SafeStringHexToI64(SafeWideString* StringToReadFrom, i8* Success) {
	/* Reads a hex number out of StringToReadFrom and returns it as an integer */
	
	i64 Result := 0
	
	i16* WString := StringToReadFrom->Buffer
	
	i16 FirstCharacter := WString[0]
	
	if !(IsHex(FirstCharacter)) {
		Success[0] := 0
		return 0
	}
	
	i32 Length := StringToReadFrom->Length
	
	for (i32 Index := 0, Index <= Length, Index += 1) {
		i16 NextCharacter := Lower(WString[Index])
		
		if !(IsHex(NextCharacter)) {
			Break
		}
		
		if (IsNumeric(NextCharacter)) {
			NextCharacter -= '0'
		}
		else {
			if (NextCharacter >= 'a' && NextCharacter <= 'f') {
				NextCharacter -= 'a' - 10
			}
		}
		
		Result := (Result * 16) + (NextCharacter)
	}
	
	Success[0] := 1
	
	return Result
}


define i64 SafeStringToI64(SafeWideString* StringToReadFrom, i8* Success) {
	/* Reads an (signed) integer out of StringToReadFrom and returns it */
	
	i64 Result := 0
	i64 Negative := 0
	
	i16* WString := StringToReadFrom->Buffer
	
	i16 FirstCharacter := WString[0]
	
	if (FirstCharacter = '-') {
		Negative := 1
		WString += 2
		FirstCharacter := WString[0]
	}
	
	if !(IsNumeric(FirstCharacter)) {
		Success[0] := 0
		return 0
	}
	
	i32 Length := StringToReadFrom->Length
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i16 NextCharacter := WString[Index]
		
		if !(IsNumeric(NextCharacter)) {
			Break
		}
		
		Result := (Result * 10) + (NextCharacter - '0')
	}
	
	Success[0] := 1
	
	if (Negative) {
		Result := -Result
	}
	
	return Result
}