#Require ./src/lib/Memory.rlx
#Require ./src/lib/String.rlx
#Require ./src/lib/Console.rlx

#Require "./src/lib/Exception.rlx"

i64 SAFE_STRING_PARSE_INTEGER_FAIL := 'SSPIF'

struct SafeString {
	i8* Buffer,
	i32 Length,
	i8 BufferIsSelfOwned
	
	static SafeString* New(i32 Length, i8* Buffer, i8 BufferIsSelfOwned) {
		SafeString* this := Alloc(#SafeString)
		
		this->Length := Length
		this->Buffer := Buffer
		this->BufferIsSelfOwned := BufferIsSelfOwned
		
		return this
	}
	static SafeString* New(i32 Length, i8* Buffer) {
		return SafeString:New(Length, Buffer, false) 
	}
	static SafeString* Adopt(i32 Length, i8* Buffer) {
		return SafeString:New(Length, Buffer, true)
	}
	
	define SafeString* Clone() {
		i8* NewBuffer := CloneMemory(this->Buffer, this->Length + 1)
		
		NewBuffer[this->Length] := 0
		
		return SafeString:Adopt(this->Length, NewBuffer)
	}
	
	define void Free() {
		if (this->BufferIsSelfOwned) {
			Free(this->Buffer)
		}
		
		Free(this)
	}
	
	define i8 ASCIICharacterAt(i32 Index) {
		return this->Buffer[Index]
	}
	define i8 ASCIICharacterAt(i32 Index, i8 Default) {
		if (Index >= this->Length) {
			return Default
		}
		
		return this->ASCIICharacterAt(Index)
	}
	
	define void ShiftLeft(i32 Index, i32 Length) {
		i32 StartOffset := Index 
		i32 EndOffset := Length
		
		i8* Start := this->Buffer + StartOffset
		i8* End := Start + EndOffset
		
		i32 ShiftCharacterCount := this->Length - Index - Length
		
		MoveMemory(Start, End, ShiftCharacterCount)
		
		this->Length -= Length
	}
	
	define void Remove(i32 Index, i32 Length) {
		this->ShiftLeft(Index, Length)
	}
	
	define void Replace(i32 Index, i32 Length, i8* Replacement, i32 ReplacementLength) {
		if (ReplacementLength < Length) {
			this->ShiftLeft(Index + ReplacementLength, Length - ReplacementLength)
		}
		
		for (i32 ReplacementIndex := 0, ReplacementIndex < ReplacementLength, ReplacementIndex += 1) {
			this->Buffer[Index + ReplacementIndex] := Replacement[ReplacementIndex] As i8
		}
	}
	
	define void Print() {
		for (i32 Index := 0, Index < this->Length, Index += 1) {
			PrintCharacter(this->ASCIICharacterAt(Index))
		}
	}
	define void PrintLine() {
		this->Print()
		Print("\n")
	}
	
	define i8 Equals(SafeString* Other) {
		return false
	}
	define i8 Equals(i8* Other) {
		i32 OtherLength := StringLength(Other)
		
		if (OtherLength != this->Length) {
			return false
		}
		
		for (i32 Index := 0, Index < OtherLength, Index += 1) {
			if (Lower(Other[Index]) != Lower(this->ASCIICharacterAt(Index))) {
				return false
			}
		}
		
		return true
	}
	
	define i64 ParseInteger(i64 Base) {
		i64 Result := 0
		i64 Sign := 1
		
		i32 Offset := 0
		
		if (this->ASCIICharacterAt(0, 0) = '-') {
			Sign := -1
			Offset += 1
		}
		
		if !(IsNumeric(this->ASCIICharacterAt(Offset, 0), Base)) {
			Throw(SAFE_STRING_PARSE_INTEGER_FAIL)
		}
		
		for (i32 Index := Offset, Index < this->Length, Index++) {
			i8 Next := this->ASCIICharacterAt(Index)
			
			if !(IsNumeric(Next, Base)) {
				Throw(SAFE_STRING_PARSE_INTEGER_FAIL)
			}
			
			Result *= Base
			Result += GetCharacterValue(Next)
		}
		
		return Result * Sign
	}
	define i64 ParseInteger() {
		return this->ParseInteger(10)
	}
	
	define i8* Raw() {
		return this->Buffer
	}
}

define SafeString* AllocateNewSafeString() {
	return Alloc(#SafeString) As SafeString*
}
define void FreeSafeString(SafeString* StringToFree) {
	Free(StringToFree As void*)
}

define SafeString* AToS(i8* SourceString) {
	return SafeString:New(StringLength(SourceString), SourceString)
}

define i8 SafeStringEqualsAString(SafeString* StringOne, i8* StringTwo) {
	/* Compares a SafeString and i8* ASCII string */

	i32 Index := 0
	
	loop {
		i16 Left := Lower(StringOne->Buffer[Index])
		i16 Right := Lower(StringTwo[Index])
		
		if (Index >= StringOne->Length) {
			/* Handle reaching the end of the safe string */
			
			if (Right = 0) {
				/* If the AString has also ended, then they are equal */
				return true
			}
			else {
				/* Otherwise, they aren't equal */
				return false
			}
		}
		else if (Right = 0) {
			/* If the AString ends before the SafeString, then they are not equal */
			return false
		}
		
		if (Left != Right) {
			return false
		}
		
		Index += 1
	}
	
	return false
}

define void PrintSafeString(SafeString* StringToPrint) {
	/* Prints a safe string (safely) by using the string's length */
	
	for (i32 Index := 0, Index < (StringToPrint->Length), Index += 1) {
		i16 NextCharacter := StringToPrint->Buffer[Index] 
		
		PrintCharacter(NextCharacter As i8)
	}
}