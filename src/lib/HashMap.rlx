#Require "$/String.rlx"
#Require "$/SafeString.rlx"
#Require "$/MD5.rlx"

struct HashMapElement {
	i64 Hash,
	void* Value,
	HashMapElement* NextElement
}

struct HashMap {
	i64 BufferMaxCount,
	
	union {
		void* Elements,
		HashMapElement** Buckets
	}
	
	i8 IgnoreCase
	
	define void Initialize() {
		if (this->BufferMaxCount = 0) {
			this->BufferMaxCount := 100
		}
		
		this->Elements := Alloc(this->BufferMaxCount * #HashMapElement*)
	}
	
	static HashMap* New() {
		HashMap* this := Alloc(#HashMap)
		
		this->Initialize()
		
		return this
	}
	
	define i64 HashString(i8* StringToHash, i32 Length) {
		i64 HashLow := 0
		i64 HashHigh := 0
		
		MD5->Hash(StringToHash, Length, &HashLow, this->IgnoreCase)
		
		return HashLow
	}
	define i64 HashString(SafeString* StringToHash) {
		return this->HashString(StringToHash->Buffer, StringToHash->Length)
	}
	define i64 HashString(i8* StringToHash) {
		return this->HashString(StringToHash, StringLength(StringToHash))
	}
	
	define i64 GetBucketIndex(i64 Hash) {
		i64 Index := Hash % this->BufferMaxCount
		
		if (Index < 0) {
			Index := -Index
		}
		
		return Index
	}
	
	define HashMapElement* FindElement(i64 Hash) {
		i64 Index := this->GetBucketIndex(Hash)
		
		HashMapElement* Bucket := this->Buckets[Index]
		
		if !(Bucket) {
			return null
		}
		
		while (Bucket->Hash != Hash) {
			if !(Bucket->NextElement) {
				return Bucket
			}
			
			Bucket := Bucket->NextElement
		}
		
		return Bucket
	}
	
	define HashMapElement* GetElement(i64 Hash) {
		HashMapElement* Result := this->FindElement(Hash)
		
		if (Result && Result->Hash = Hash) {
			return Result
		}
		
		return null
	}
	
	define void Upsert(i64 Hash, void* Value) {
		i64 Index := this->GetBucketIndex(Hash)
		
		HashMapElement* Bucket := this->FindElement(Index)
		HashMapElement* NewElement := null
		
		if (Bucket = null) {
			; This bucket is totally uninitialized, create it.
			
			NewElement := Alloc(#HashMapElement) As HashMapElement*
			NewElement->NextElement := null
			
			this->Buckets[Index] := NewElement
		}
		else if (Bucket->Hash != Hash) {
			; This bucket contains something, but with the wrong hash. Prepend a new element onto it
			
			NewElement := Alloc(#HashMapElement) As HashMapElement*
			NewElement->NextElement := Bucket->NextElement
		
			Bucket->NextElement := NewElement
		}
		else {
			; This bucket contains the exact hash we are looking for. Overwrite it
			
			NewElement := Bucket
		}
		
		; Update whichever element was found/allocated for this key with the new hash/value
		NewElement->Hash := Hash
		NewElement->Value := Value
	}
	
	define HashMapElement* Get(SafeString* Key) {
		return this->GetElement(this->HashString(Key))
	}
	define void Set(SafeString* Key, void Value) {
		this->Upsert(this->HashString(Key), Value As void*)
	}
	define void Set(SafeString* Key, void* Value) {
		this->Upsert(this->HashString(Key), Value)
	}
	
	define HashMapElement* Get(i8* Key) {
		return this->GetElement(this->HashString(Key))
	}
	define void Set(i8* Key, void Value) {
		this->Upsert(this->HashString(Key), Value As void*)
	}
	define void Set(i8* Key, void* Value) {
		this->Upsert(this->HashString(Key), Value)
	}
	
	define HashMapElement* Get(i8* Key, i32 KeyLength) {
		return this->GetElement(this->HashString(Key, KeyLength))
	}
	define void Set(i8* Key, i32 KeyLength, void Value) {
		this->Upsert(this->HashString(Key, KeyLength), Value As void*)
	}
	define void Set(i8* Key, i32 KeyLength, void* Value) {
		this->Upsert(this->HashString(Key, KeyLength), Value)
	}
	
	define HashMapElement* Get(i64 Key) {
		return this->GetElement(Key)
	}
	define void Set(i64 Key, void Value) {
		this->Upsert(Key, Value As void*)
	}
	define void Set(i64 Key, void* Value) {
		this->Upsert(Key, Value)
	}
}

define HashMap* NewHashMap() {
	HashMap* NewMap := Alloc(#HashMap) As HashMap*
	
	NewMap->Initialize()
	
	return NewMap
}