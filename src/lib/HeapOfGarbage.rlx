#Require "@/MemoryMapping.rlx"

struct GarbageHeap {
	void* Base
	void* Next
	void* End
}

GarbageHeap _Heap
GarbageHeap* Heap := &_Heap

i32 GARBAGE_HEAP_SIZE := 0x100_0000

define void* GarbageHeapInitialize() {
	Heap->Base := MapMemory(GARBAGE_HEAP_SIZE, MMAP_PROTECTION_READ | MMAP_PROTECTION_WRITE, MMAP_FLAG_NO_RESERVE | MMAP_FLAG_SHARED | MMAP_FLAG_ANONYMOUS)
	Heap->Next := Heap->Base
	Heap->End := Heap->Base + GARBAGE_HEAP_SIZE

	return null
}

void* ThisSucks := GarbageHeapInitialize()

define void* GarbageHeapAlloc(i32 Size) {
	void* Result := Heap->Next

	if (Result + Size + 8 >= Heap->End) {
		MapMemory(Heap->End, GARBAGE_HEAP_SIZE, MMAP_PROTECTION_READ | MMAP_PROTECTION_WRITE, MMAP_FLAG_NO_RESERVE | MMAP_FLAG_SHARED | MMAP_FLAG_ANONYMOUS)

		Heap->End += GARBAGE_HEAP_SIZE
	}

	*Result := Size

	Heap->Next += Size + 8

	return Result + 8
}

define void* GarbageHeapReAlloc(void* Memory, i32 Size) {
	i32 OldSize := *(Memory - 8) As i32

	if (Size <= OldSize) {
		return Memory
	}

	void* New := GarbageHeapAlloc(Size)
	FastMoveMemory(New, Memory, OldSize)
	FastSetMemory8(New + OldSize, 0, Size - OldSize)

	return New
}
