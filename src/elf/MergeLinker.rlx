
/*
 * "Merge" linker takes many object files, and merges them into one.
 * This means a lot of symbol resolution, and some partial linking, but not
 *  full address assignment or program headers or anything.
 *
 * Takes sections one at a time, and gradually builds up a master "result"
 *  object file which is the sum of the inputs.
 *
 * Step 1: Collect input (and fixup symbols)
 *  Consists of taking the sum of all sections in all input files, and
 *   merging them together by name.
 *  Section data is merged here, and symbols are cloned and adjusted to
 *   match the new data layout.
 * Step 2: Profit???
 *  I think those are the only real steps
 */


struct MergeLinker {
    ObjectFile* Result
    PointerArray* Objects ; <ObjectFile*>

    AVLTree* SymbolMap ; <ObjectSymbol* RemoteSymbol, ObjectSymbol* LocalSymbol>
    ;AVLTree* SectionMap ; <ObjectSection* Remote, ObjectSection* Local>

    i32 FileCount

    static self* New() {
        self* this := Alloc(#self)

        this->Result := ObjectFile:New()
        this->Objects := PointerArray:New()
        this->SymbolMap := AVLTree:New(#ObjectSymbol*)

        return this
    }

    define ObjectSection* FindSection(ObjectSection* Original) {
        return this->Result->GetSection(Original->Name)
    }

    define ObjectSection* FindOrAddResultSection(ObjectSection* Original) {
        ObjectSection* Section := this->Result->GetSection(Original->Name)

        if !(Section) {
            Section := ObjectSection:New(Original->Type, Original->Name)

            this->Result->AddSection(Section)

            ObjectSymbol* SectionSymbol := ObjectSymbol:New(SYMBOL_BINDING_LOCAL, SYMBOL_TYPE_SECTION, SYMBOL_VISIBILITY_DEFAULT, Section, Section->Name, 0, 0)

            this->Result->AddSymbol(SectionSymbol)
        }

        return Section
    }

    define ObjectSymbol* FindOrAddSymbol(ObjectSymbol* Symbol) {
        ObjectSymbol* Existing := this->SymbolMap->GetPointer(Symbol)

        if (Existing != null) {
            return Existing
        }

        ObjectSymbol* Clone := Symbol->Clone()

        this->SymbolMap->InsertPointer(Symbol, Clone)

        if (Symbol->Binding = SYMBOL_BINDING_LOCAL) {
            Clone->Name := FormatString("%s.%i", Symbol->Name, this->FileCount)
        }

        if (Symbol->Section != null) {
            Clone->Section := this->FindSection(Symbol->Section)
            Clone->Section->Symbols->Push(Clone)

            Clone->Value += Clone->Section->Size
        }

        if (Symbol->Binding = SYMBOL_BINDING_GLOBAL && this->Result->GlobalSymbols->Has(Clone->Name)) {
            Print("duplicate global symbol %s\n", Clone->Name)
            Exit(0)
        }

        this->Result->AddSymbol(Clone)

        return Clone
    }

    define void AddRelocation(ObjectRelocation* Relocation) {
        ; Resolves the symbol that the relocation should target.
        ; Considers binding/visibility rules
        ; Considers type mismatches

        ObjectSection* Section := this->FindOrAddResultSection(Relocation->Container)

        ObjectSymbol* Symbol := Relocation->Target

        ObjectRelocation* Result := ObjectRelocation:New(Section, Relocation->Type, Relocation->Offset, null, Relocation->Addend)

        Result->Target := this->FindOrAddSymbol(Symbol)
        Result->Offset += Section->Size

        Section->Relocations->Push(Result)
        Symbol->ReferenceBy(Result)
    }

    define void AddSection(ObjectSection* Section) {
        ObjectSection* Result := this->FindOrAddResultSection(Section)

        i64 Offset := Result->Size
        i32 SymbolCount := Section->Symbols->Count()

        for (i32 Index := 0, Index < SymbolCount, Index++) {
            ObjectSymbol* Existing := Section->Symbols->At(Index)

            Existing->DumpInline()
            Print("\n")

            this->FindOrAddSymbol(Existing)
        }

        i32 Count := Section->Relocations->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            ObjectRelocation* Relocation := Section->Relocations->At(Index)

            this->AddRelocation(Relocation)

            ;this->AddSymbol(Relocation->Target)
        }

        Result->Size += Section->Size
        Result->Data := ReAlloc(Result->Data, Result->Size)
        MoveMemory(Result->Data + Offset, Section->Data, Section->Size)
    }

    define void AddObject(ObjectFile* Object) {
        this->Objects->Push(Object)

        i32 SectionCount := Object->Sections->Count()

        for (i32 Index := 0, Index < SectionCount, Index++) {
            ObjectSection* Section := Object->Sections->At(Index)

            this->AddSection(Section)
        }

        this->FileCount += 1
    }
}