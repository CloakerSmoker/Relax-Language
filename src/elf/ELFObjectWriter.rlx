
; ELF loader: ELF object -> ELF shaped generic object -> generic object
; object linker: generic objects -> generic object
; ELF writer: generic object -> ELF shaped generic object -> 

; ELF object flavors: object (passthrough), static, dynamic

/*

Stages of lowering a generic object to a passthrough object:
1. Take ownership of sections (and assign section indexes)
2. Translate symbols (and assign symbol indexes)
3. Translate relocations (using section+symbol indexes)
4. Translate section headers

1. Translate sections
    - Assign section indexes
    - Create section header
    - Populate section header and preserve section data
    - Link related section headers (symtab -> strtab)
2. Translate symbols
    - Assimilate symbol tables
        - Convert as we go, adding to string table
    - Populate symbol table section header (symtab.first_non_local)
3. Translate relocations
    - Create relocation sections
    - Populate relocation section header (symbol table, applicant section)
    - 

0. Initialize
    1. Create internal sections
        - null
        - strtab
        - shstrtab
        - symtab
1. Juggle
    1. Expand sections
        - Each section with relocations is expanded into a .rela<name> section
        - Indexes assigned
    2. Transfer symbols
        - Symbol table is ordered
        - Indexes assigned
        - Symbols go from sections to the relocation section
    3. Transfer relocations
        - Relocations go from sections to specific relocation sections
2. Lower
    1. Translate sections
        - Mirror sections as ELFSectionHeader-s
        - Link related sections
        - Update flags/name (populate string table)
    2. Translate symbols
        - Mirror symbol table as ELFSymbol-s
        - Link symbols to sections
        - Update flags/name (populate symbol string table)
    3. Translate Relocations
        - Mirror relocations as ELFRelocation-s
        - Link relocations to sections/symbols
3. Emit
    1. Write headers
        - Copy section headers into ELF buffer
    2. Populate data
        - Copy section data into ELF buffer
 */

struct ELFObjectWriterPrototype {
    void* State

    ObjectSection*(void*, ObjectSymbol*) DoAssignSymbolTable

    define ObjectSection* AssignSymbolTable(ObjectSymbol* Symbol) {
        return this->DoAssignSymbolTable(this->State, Symbol)
    }

    void(void*, ObjectSection*, ELFSectionHeader*) DoTranslateSectionFields

    define void TranslateSectionFields(ObjectSection* Source, ELFSectionHeader* Target) {
        this->DoTranslateSectionFields(Source, Target)
    }

    void(void*, ObjectSymbol*, ELFSymbol*) DoTranslateSymbolFields

    define void TranslateSymbolFields(ObjectSymbol* Source, ELFSymbol* Target) {
        this->DoTranslateSymbolFields(this->State, Source, Target)
    }

    void(void*, ObjectRelocation*, ELFRelocation*) DoTranslateRelocationFields

    define void TranslateRelocationFields(ObjectRelocation* Source, ELFRelocation* Target) {
        this->DoTranslateRelocationFields(this->State, Source, Target)
    }

    define self* Clone() {
        return CloneMemory(this, #self)
    }
}


struct ELFObjectWriter {
    PointerArray* Sections ; <ObjectSection*>
    PointerArray* ELFSections ; <ELFSectionHeader*>

    ; Each symbol table also has a list of associated relocation sections
    ;  which target the given symbol table. These tables can either be
    ;  emitted into an object file, or merged into a single table and
    ;  emitted into an executable image.

    ; List of all smybol tables present
    PointerArray* SymbolTables ; <ObjectSection*>

    ; Maps unowned (source) sections to owned sections
    AVLTree* SectionMap ; <ObjectSection*, ObjectSection*>

    ; Maps a section with relocations to its individual relocation sections
    ;  for each symbol table present (sparsely)
    ; aka Map<DataSection, Map<SymbolTable, RelocationSection>
    AVLTree* SectionRelocationSections ; <ObjectSection*, AVLTree*<ObjectSection*, ObjectSection*>>
    AVLTree* RelocationSectionSections ; <ObjectSection*, ObjectSection*>

    ObjectSection* NullSection
    ObjectSection* SharedStringTable

    define ObjectSection* CreateSection(SECTION_TYPE Type, i8* Name, i32 InitialSize) {
        ObjectSection* Result := ObjectSection:New(Type, Name, Alloc(InitialSize + 1), InitialSize)

        this->Sections->Push(Result)

        return Result
    }

    define i32 GetSectionIndex(ObjectSection* Section) {
        return this->Sections->Find(Section)
    }

    define ObjectSection* CreateSymbolTable(i8* Name, i8* StringsName) {
        ObjectSection* StringTable := this->CreateSection(SECTION_TYPE_DATA, StringsName, 1)
        ObjectSection* SymbolTable := this->CreateSection(SECTION_TYPE_DATA, Name, 0)

        this->SymbolTables->Push(SymbolTable)

        return SymbolTable
    }

    define i32 GetSymbolTableIndex(ObjectSection* SymbolTable) {
        return this->SymbolTables->Find(SymbolTable)
    }

    ELFObjectWriterPrototype* Prototype

    ; Juggling

    define ObjectSection* AssignSymbolTable(ObjectSymbol* Symbol) {
        return this->Prototype->AssignSymbolTable(Symbol)
    }

    define void TranslateSectionFields(ObjectSection* Source, ELFSectionHeader* Target) {
        this->Prototype->TranslateSectionFields(Source, Target)
    }
    
    define void TranslateSymbolFields(ObjectSymbol* Source, ELFSymbol* Target) {
        this->Prototype->TranslateSymbolFields(Source, Target)
    }

    define void TranslateRelocationFields(ObjectRelocation* Source, ELFRelocation* Target) {
        this->Prototype->TranslateRelocationFields(Source, Target)
    }

    static self* New(ELFObjectWriterPrototype* Prototype) {
        self* this := Alloc(#self)

        this->Prototype := Prototype

        this->Sections := PointerArray:New()
        this->ELFSections := PointerArray:New()

        this->SymbolTables := PointerArray:New()
        this->SectionRelocationSections := AVLTree:New(#AVLTree*)
        this->RelocationSectionSections := AVLTree:New(#ObjectSection*)

        this->SectionMap := AVLTree:New(#ObjectSection*)

        ; Null section (to pad section indexes)
        this->NullSection := this->CreateSection(SECTION_TYPE_DISCARD, "", 0)

        ; String tables, 1 byte allocated size, 0 bytes actual size (to not skew string table offsets)
        this->SharedStringTable := this->CreateSection(SECTION_TYPE_DATA, ".shstrtab", 1)

        return this
    }

    define void AddSection(ObjectSection* Section) {
        ; Adopt a section, and create a dedicated relocation section for it
        ;  if it needs one.

        ObjectSection* Clone := Section->Clone()
        this->Sections->Push(Clone)

        this->SectionMap->InsertPointer(Section As i64, Clone)

        Section := Clone

        i32 RelocationCount := Section->Relocations->Count()

        if (RelocationCount) {
            AVLTree* RelocationSections := AVLTree:New(#ObjectSection*)
            this->SectionRelocationSections->InsertPointer(Section As i64, RelocationSections)

            for (i32 Index := 0, Index < RelocationCount, Index++) {
                ObjectRelocation* Relocation := Section->Relocations->At(Index)

                ObjectSection* SymbolTableSection := this->AssignSymbolTable(Relocation->Target)
                ObjectSection* RelocationSection := null

                if (RelocationSections->Has(SymbolTableSection As i64)) {
                    RelocationSection := RelocationSections->GetPointer(SymbolTableSection As i64)
                }
                else {
                    i8* RelocationSectionName := FormatString("%s.rela%s", SymbolTableSection->Name, Section->Name)

                    RelocationSection := this->CreateSection(SECTION_TYPE_DATA, RelocationSectionName, 0)

                    RelocationSections->InsertPointer(SymbolTableSection As i64, RelocationSection)

                    this->RelocationSectionSections->InsertPointer(RelocationSection As i64, Section)
                }

                RelocationSection->Relocations->Push(Relocation)
            }

            Section->Relocations->Clear()
        }
    }

    define void AddSections(ObjectFile* File) {
        i32 SectionCount := File->Sections->Count()

        for (i32 Index := 0, Index < SectionCount, Index++) {
            ObjectSection* Section := File->Sections->At(Index)

            this->AddSection(Section)
        }
    }

    define void PopulateFromSymbolTable(ObjectSymbolTable* Source) {
        ; Symbols are moved from the specific symbol table into a less specific
        ;  (and generic) ELF symbol table

        i32 Count := Source->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            ObjectSymbol* Symbol := Source->At(Index)

            ObjectSection* SymbolTableSection := this->AssignSymbolTable(Symbol)

            SymbolTableSection->Symbols->Push(Symbol)
        }
    }

    ; Lowering

    define i32 FindOrAddString(ObjectSection* StringTable, i8* String) {
        i32 Length := StringLength(String)
        i32 Offset := StringTable->Size As i32
        StringTable->Size += Length + 1

        StringTable->Data := ReAlloc(StringTable->Data, StringTable->Size)

        MoveMemory(StringTable->Data + Offset, String, Length)

        return Offset
    }

    define ELFSectionHeader* LowerSection(ObjectSection* Section) {
        ELFSectionHeader* Header := ELFSectionHeader:New()

        Header->NameOffset := this->FindOrAddString(this->SharedStringTable, Section->Name)

        this->TranslateSectionFields(Section, Header)

        return Header
    }

    define ELFSymbol* TranslateSymbol(ObjectSymbol* Symbol) {
        ELFSymbol* Result := ELFSymbol:New()

        ObjectSection* SymbolTable := this->AssignSymbolTable(Symbol)
        ObjectSection* StringTable := this->Sections->At(this->GetSectionIndex(SymbolTable) - 1)
        Result->NameOffset := this->FindOrAddString(StringTable, Symbol->Name)

        if (Symbol->Section) {
            ObjectSection* Section := this->SectionMap->GetPointer(Symbol->Section As i64)

            Result->SectionIndex := this->GetSectionIndex(Section) As i16
        }
        else {
            Result->SectionIndex := ELF_SHN_UNDEF
        }

        Result->Value := Symbol->Value
        Result->Size := Symbol->Size

        this->TranslateSymbolFields(Symbol, Result)

        return Result
    }

    define i32 GetSymbolIndex(ObjectSymbol* Symbol) {
        ObjectSection* SymbolTable := this->AssignSymbolTable(Symbol)
        return SymbolTable->Symbols->Find(Symbol) + 1
    }

    define ELFRelocation* TranslateRelocation(ObjectRelocation* Relocation) {
        ELFRelocation* Result := ELFRelocation:New()

        Result->Offset := Relocation->Offset
        Result->Addend := Relocation->Addend
        Result->Symbol(this->GetSymbolIndex(Relocation->Target))

        this->TranslateRelocationFields(Relocation, Result)

        return Result
    }

    define void Lower() {
        i32 SectionCount := this->Sections->Count()

        for (i32 Index := 0, Index < SectionCount, Index++) {
            ObjectSection* Section := this->Sections->At(Index)
            ELFSectionHeader* Header := this->LowerSection(Section)

            this->ELFSections->Push(Header)

            if (Section->Relocations->Count()) {
                ObjectRelocation* FirstRelocation := Section->Relocations->First()
                ObjectSection* SymbolTable := this->AssignSymbolTable(FirstRelocation->Target)
                i32 SymbolTableIndex := this->GetSectionIndex(SymbolTable)

                Header->AssociatedSectionIndex := SymbolTableIndex

                ObjectSection* ContainerSection := this->RelocationSectionSections->GetPointer(Section As i64)
                i32 ContainerSectionIndex := this->GetSectionIndex(ContainerSection)

                Header->ExtraInfo := ContainerSectionIndex

                Header->Type := ELF_SECTION_TYPE_RELOCATIONS_ADDEND
                Header->EntrySize := #ELFRelocation
            }
            else if (Section->Symbols->Count()) {
                ; Slight hack: symbol tables are directly proceded by their string tables

                Header->AssociatedSectionIndex := Index - 1

                Header->Type := ELF_SECTION_TYPE_SYMBOL_TABLE
                Header->EntrySize := #ELFSymbol

                ELFSectionHeader* SymbolStringsHeader := this->ELFSections->At(Index - 1)

                SymbolStringsHeader->Type := ELF_SECTION_TYPE_STRING_TABLE
            }
            else if (Section = this->SharedStringTable) {
                Header->Type := ELF_SECTION_TYPE_STRING_TABLE
            }
            else if (Index != 0) {
                Header->Type := ELF_SECTION_TYPE_DATA
            }
        }

        for (i32 Index := 0, Index < SectionCount, Index++) {
            ObjectSection* Section := this->Sections->At(Index)
            ELFSectionHeader* Header := this->ELFSections->At(Index)

            i32 SymbolCount := Section->Symbols->Count()

            if (SymbolCount) {
                Section->Size := (SymbolCount + 1) * #ELFSymbol
                Section->Data := Alloc(Section->Size)

                ELFSymbol* Symbols := Section->Data

                for (i32 SymbolIndex := 0, SymbolIndex < SymbolCount, SymbolIndex++) {
                    ObjectSymbol* OriginalSymbol := Section->Symbols->At(SymbolIndex)
                    ELFSymbol* Symbol := this->TranslateSymbol(OriginalSymbol)

                    MoveMemory(Symbols[SymbolIndex + 1], Symbol, #ELFSymbol)

                    if (Header->FirstNonLocalSymbolIndex = 0) {
                        if (Symbol->Binding() != ELF_SYMBOL_BINDING_LOCAL) {
                            Header->FirstNonLocalSymbolIndex := SymbolIndex + 1
                        }
                    }
                }

                if (Header->FirstNonLocalSymbolIndex = 0) {
                    Header->FirstNonLocalSymbolIndex := SymbolCount + 1
                }
            }
        }

        for (i32 Index := 0, Index < SectionCount, Index++) {
            ObjectSection* Section := this->Sections->At(Index)
            ELFSectionHeader* Header := this->ELFSections->At(Index)

            i32 RelocationCount := Section->Relocations->Count()

            if (RelocationCount) {
                Section->Size := RelocationCount * #ELFRelocation
                Section->Data := Alloc(Section->Size)

                ELFRelocation* Relocations := Section->Data

                for (i32 RelocationIndex := 0, RelocationIndex < RelocationCount, RelocationIndex++) {
                    ObjectRelocation* OriginalRelocation := Section->Relocations->At(RelocationIndex)
                    ELFRelocation* Relocation := this->TranslateRelocation(OriginalRelocation)

                    MoveMemory(Relocations[RelocationIndex], Relocation, #ELFRelocation)
                }
            }
        }
    }
}

struct ELFPassthroughObjectWriter {
    ObjectFile* Object
    ELFObjectWriter* Writer

    ObjectSection* SymbolTable

    define ObjectSection* AssignSymbolTable(ObjectSymbol* Symbol) {
        return this->SymbolTable
    }

    define void TranslateSectionFields(ObjectSection* Source, ELFSectionHeader* Target) {
        if (StringEquals(Source->Name, ".bss")) {
            
        }
    }

    define void TranslateSymbolFields(ObjectSymbol* Source, ELFSymbol* Target) {
        if (this->Object->LocalSymbols->Has(Source)) {
            Target->Binding(ELF_SYMBOL_BINDING_LOCAL)
        }
        else if (this->Object->GlobalSymbols->Has(Source)) {
            Target->Binding(ELF_SYMBOL_BINDING_GLOBAL)
        }
        else if (this->Object->WeakSymbols->Has(Source)) {
            Target->Binding(ELF_SYMBOL_BINDING_WEAK)
        }
        else if (this->Object->UndefinedSymbols->Has(Source)) {
            Target->Binding(ELF_SYMBOL_BINDING_GLOBAL)
        }

        if (Source->Type = SYMBOL_TYPE_FUNCTION) {
            Target->Type(ELF_SYMBOL_TYPE_FUNCTION)
        }
        else if (Source->Type = SYMBOL_TYPE_SECTION) {
            Target->Type(ELF_SYMBOL_TYPE_SECTION)
            Target->NameOffset := 0
        }
        else if (Source->Type = SYMBOL_TYPE_FILE) {
            Target->Type(ELF_SYMBOL_TYPE_FILE)
        }
    }

    define void TranslateRelocationFields(ObjectRelocation* Source, ELFRelocation* Target) {

    }

    static self* New(ObjectFile* File) {
        self* this := Alloc(#self)

        this->Object := File

        ELFObjectWriterPrototype Prototype {
            State: this,
            DoAssignSymbolTable: &self.AssignSymbolTable,
            DoTranslateSymbolFields: &self.TranslateSymbolFields,
            DoTranslateRelocationFields: &self.TranslateRelocationFields
        }

        this->Writer := ELFObjectWriter:New(Prototype.Clone())

        this->SymbolTable := this->Writer->CreateSymbolTable(".symtab", ".strtab")

        this->Writer->AddSections(File)

        this->Writer->PopulateFromSymbolTable(File->LocalSymbols)
        this->Writer->PopulateFromSymbolTable(File->GlobalSymbols)
        this->Writer->PopulateFromSymbolTable(File->WeakSymbols)
        this->Writer->PopulateFromSymbolTable(File->UndefinedSymbols)

        return this
    }

    define void Lower() {
        this->Writer->Lower()
    }

    define ELFEmitter* Emit() {
        ELFEmitter* Emitter := ELFEmitter:New(0x400)

        i32 Count := this->Writer->Sections->Count()

        Emitter->StartSectionHeaders()

        for (i32 Index := 0, Index < Count, Index++) {
            ELFSectionHeader* SectionHeader := this->Writer->ELFSections->At(Index)

            Emitter->WriteSectionHeader(SectionHeader)
        }

        for (i32 Index := 0, Index < Count, Index++) {
            ObjectSection* Section := this->Writer->Sections->At(Index)

            Emitter->WriteSectionData(Index, Section->Data, Section->Size)
        }

        ELFHeader* Header := Emitter->Header

        Header->SectionNameSectionIndex := this->Writer->GetSectionIndex(this->Writer->SharedStringTable) As i16

        return Emitter
    }
}