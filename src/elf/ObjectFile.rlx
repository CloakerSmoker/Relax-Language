
#Require "$/AVLTree.rlx"

#Require "./src/elf/ELFBuilder.rlx"

/*
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT A HIGHLY ESTEEMED DEED,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO BEING A PLACE OF HONOR,
 * FITNESS FOR COMMEMORATION, AND ANYTHING OF VALUE
 */

enum SECTION_TYPE {
    Discard
    Zero
    Data
}

define void Indent(i32 Level) {
    for (i32 Index := 0, Index < Level, Index++) {
        Print("\t")
    }
}

declare void DumpSymbol(i32, ObjectSymbol*)
declare void DumpSymbolInline(ObjectSymbol*)

declare void DumpRelocation(ObjectRelocation*)

struct ObjectSection {
    SECTION_TYPE Type

    i8* Name

    void* Data
    i64 Size

    ; For any section which has symbols defined inside of it
    PointerArray* Symbols ; <ObjectSymbol*>
    PointerArray* Relocations ; <ObjectRelocation*>

    static self* New(SECTION_TYPE Type, i8* Name, void* Data, i64 Size) {
        self* this := Alloc(#self)

        this->Type := Type

        this->Name := Name

        this->Data := Data
        this->Size := Size

        this->Symbols := PointerArray:New()
        this->Relocations := PointerArray:New()

        return this
    }

    define self* Clone() {
        self* Result := CloneMemory(this, #self)

        Result->Symbols := this->Symbols->Clone()
        Result->Relocations := this->Relocations->Clone()

        return Result
    }

    define i8 Is(SECTION_TYPE Type) {
        return this->Type = Type
    }

    define void Discard() {
        this->Symbols->Clear()
        this->Relocations->Clear()
        this->Size := 0
        this->Type := SECTION_TYPE_DISCARD
    }

    define void DumpRelocations(i32 Level) {
        i32 Count := this->Relocations->Count()

        if (Count = 0) {
            return
        }

        if (Count) {
            Print("Reloction list contains %i entries {\n", Count)

            for (i32 Index := 0, Index < Count, Index++) {
                ObjectRelocation* Relocation := this->Relocations->At(Index)

                Indent(Level + 1)
                DumpRelocation(Relocation)
                Print("\n")
            }

            Indent(Level)
            Print("}\n")
        }
    }
    
    define void Dump() {
        Print("Section %s {", this->Name)

        if (this->Type = SECTION_TYPE_DISCARD) {
            Print(" Discard }\n")
            return
        }

        Print("\n")

        Indent(1)
        this->DumpRelocations(1)

        if (this->Type = SECTION_TYPE_DATA) {
            Print("\tData {\n")
            Print("%hexdump\n", this->Data, this->Size)
            Print("\t}\n")
        }
        else if (this->Type = SECTION_TYPE_ZERO) {
            Print("\tZero { %i }\n", this->Size)
        }

        Print("}\n")
    }
}

enum SYMBOL_BINDING {
    Local
    Global
    Weak
}

define i8* SymbolBindingName(SYMBOL_BINDING Binding) {
    i8*[3] Names {
        "Local", "Global", "Weak"
    }

    return Names[Binding As i32]
}

enum SYMBOL_TYPE {
    None
    Object
    Function
    Section
    File
}

define i8* SymbolTypeName(SYMBOL_TYPE Type) {
    i8*[5] Names {
        "None", "Object", "Function", "Section", "File"
    }

    return Names[Type As i32]
}

enum SYMBOL_VISIBILITY {
    Default
    Internal
    Hidden
    Protected
    Dynamic
}

define i8* SymbolVisibilityName(SYMBOL_VISIBILITY Visibility) {
    i8*[5] Names {
        "Default", "Internal", "Hidden", "Protected", "Dynamic"
    }

    return Names[Visibility As i32]
}

struct ObjectSymbol {
    i8* Name
    i64 Size
    i64 Value

    SYMBOL_BINDING Binding
    SYMBOL_TYPE Type
    SYMBOL_VISIBILITY Visibility

    ObjectSection* Section

    PointerArray* Relocations ; <ObjectRelocation*>

    static self* New(SYMBOL_BINDING Binding, SYMBOL_TYPE Type, SYMBOL_VISIBILITY Visibility, ObjectSection* Section, i8* Name, i64 Size, i64 Value) {
        self* this := Alloc(#self)

        this->Binding := Binding
        this->Type := Type
        this->Visibility := Visibility

        this->Section := Section

        this->Name := Name
        this->Size := Size
        this->Value := Value

        this->Relocations := PointerArray:New()
        
        return this
    }

    define void DumpInline() {
        Print(SymbolBindingName(this->Binding))
        Print("[%s", SymbolTypeName(this->Type))

        if (this->Visibility != SYMBOL_VISIBILITY_DEFAULT) {
            Print(" %s", SymbolVisibilityName(this->Visibility))
        }

        Print("(")

        Print("%s)] = %x @ ", this->Name, this->Size)

        if (this->Section = null) {
            Print("<undef>")
        }
        else {
            Print("%s", this->Section->Name)
        }

        Print(" + %x", this->Value)
    }

    define void Dump(i32 Level) {
        this->DumpInline()

        i32 Count := this->Relocations->Count()

        if (Count) {
            Indent(Level + 1)
            Print("Referenced by {\n")

            for (i32 Index := 0, Index < Count, Index++) {
                ObjectRelocation* Relocation := this->Relocations->At(Index)

                Indent(Level + 2)
                DumpRelocation(Relocation)
                Print("\n")
            }

            Indent(Level + 1)
            Print("}\n")
        }
    }
}

enum RELOCATION_TYPE {
    None
    Offset_32
    Offset_64
    Absolute_32
    Absolute_64
}

define i8* RelocationTypeName(RELOCATION_TYPE Type) {
    i8*[5] Names {
        "Unimplemented", "Offset_32", "Offset_64", "Absolute_32", "Absolute_64"
    }

    return Names[Type As i32]
}

struct ObjectRelocation {
    ObjectSection* Container

    RELOCATION_TYPE Type
    i64 Offset

    ObjectSymbol* Target
    i64 Addend

    static self* New(ObjectSection* Container, RELOCATION_TYPE Type, i64 Offset, ObjectSymbol* Target, i64 Addend) {
        self* this := Alloc(#self)

        this->Container := Container

        this->Type := Type
        this->Offset := Offset

        this->Target := Target
        this->Addend := Addend

        return this
    }

    define void Dump() {
        Print("%s + %x (%s) -> &(", this->Container->Name, this->Offset, RelocationTypeName(this->Type))
        DumpSymbolInline(this->Target)
        Print(")")

        if (this->Addend) {
            Print(" + %i", this->Addend)
        }
    }
}

define void DumpSymbolInline(ObjectSymbol* Symbol) {
    Symbol->DumpInline()
}

define void DumpSymbol(i32 Indent, ObjectSymbol* Symbol) {
    Symbol->Dump(Indent)
}

define void DumpRelocation(ObjectRelocation* Relocation) {
    Relocation->Dump()
}

struct ObjectSymbolTable {
    PointerArray* Symbols ; <ObjectSymbol*>
    AVLTree SymbolsByName ; <i64, ObjectSymbol*>

    static self* New() {
        self* this := Alloc(#self)

        this->Symbols := PointerArray:New()
        this~>SymbolsByName->ValueSize := 8

        return this
    }

    define i32 Count() {
        return this->Symbols->Count()
    }

    define ObjectSymbol* At(i32 Index) {
        return this->Symbols->At(Index)
    }

    define void Add(ObjectSymbol* Symbol) {
        if (this->Symbols->Has(Symbol)) {
            return
        }

        this->Symbols->Push(Symbol)
        this~>SymbolsByName->InsertPointer(FNV1A(Symbol->Name), Symbol)
    }

    define i8 Has(i8* Name) {
        return this~>SymbolsByName->Has(FNV1A(Name))
    }

    define i8 Has(ObjectSymbol* Symbol) {
        return this->Has(Symbol->Name) && this->Symbols->Has(Symbol)
    }

    define ObjectSymbol* Find(i8* Name) {
        return this~>SymbolsByName->GetPointer(FNV1A(Name))
    }

    define void Dump(i32 Level) {
        i32 Count := this->Count()

        if (Count = 0) {
            Print("0 symbols\n")
            return
        }

        Print("%i symbols {\n", Count)

        for (i32 Index := 0, Index < Count, Index++) {
            Indent(Level + 1)
            Print("%i: ", Index)
            this->At(Index)->DumpInline()
            Print("\n")
        }

        Indent(Level)
        Print("}\n")
    }
}

struct ObjectFile {
    PointerArray* Sections ; <ObjectSection*>
    AVLTree SectionsByName ; <i64, ObjectSection*>

    ObjectSymbolTable* LocalSymbols
    ObjectSymbolTable* GlobalSymbols
    ObjectSymbolTable* WeakSymbols

    ObjectSymbolTable* UndefinedSymbols
    ObjectSymbolTable* DynamicSymbols

    static self* New() {
        self* this := Alloc(#self)

        this->Sections := PointerArray:New()
        this~>SectionsByName->ValueSize := 8

        this->LocalSymbols := ObjectSymbolTable:New()
        this->GlobalSymbols := ObjectSymbolTable:New()
        this->WeakSymbols := ObjectSymbolTable:New()
        this->UndefinedSymbols := ObjectSymbolTable:New()

        return this
    }

    define void AddSymbol(ObjectSymbol* Symbol) {
        if (Symbol->Section = null) {
            this->UndefinedSymbols->Add(Symbol)
        }
        else if (Symbol->Binding = SYMBOL_BINDING_LOCAL) {
            this->LocalSymbols->Add(Symbol)
        }
        else if (Symbol->Binding = SYMBOL_BINDING_GLOBAL) {
            this->GlobalSymbols->Add(Symbol)
        }
        else if (Symbol->Binding = SYMBOL_BINDING_WEAK) {
            this->WeakSymbols->Add(Symbol)
        }
    }

    define void AddSection(ObjectSection* Section) {
        if (Section->Type = SECTION_TYPE_DISCARD) {
            return
        }

        this->Sections->Push(Section)
        this~>SectionsByName->InsertPointer(FNV1A(Section->Name), Section)

        i32 Count := Section->Symbols->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            ObjectSymbol* Symbol := Section->Symbols->At(Index)

            this->AddSymbol(Symbol)
        }

        i32 Count := Section->Relocations->Count()

        for (i32 Index := 0, Index < Count, Index++) {
            ObjectRelocation* Relocation := Section->Relocations->At(Index)

            this->AddSymbol(Relocation->Target)
        }

        Section->Symbols->Clear()
    }

    define void DumpSections() {
        i32 SectionCount := this->Sections->Count()

        for (i32 SectionIndex := 0, SectionIndex < SectionCount, SectionIndex++) {
            ObjectSection* Section := this->Sections->At(SectionIndex)

            Section->Dump()
        }
    }

    define void DumpSymbolTables() {
        Print("Local symbol table contains ")
        this->LocalSymbols->Dump(0)

        Print("Global symbol table contains ")
        this->GlobalSymbols->Dump(0)

        Print("Weak symbol table contains ")
        this->WeakSymbols->Dump(0)

        Print("Undefined symbol table contains ")
        this->UndefinedSymbols->Dump(0)
    }

    define void DumpRelocations() {
        i32 SectionCount := this->Sections->Count()

        for (i32 SectionIndex := 0, SectionIndex < SectionCount, SectionIndex++) {
            ObjectSection* Section := this->Sections->At(SectionIndex)

            Section->DumpRelocations(0)
        }
    }
}