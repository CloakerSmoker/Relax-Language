#Require "$/Console.rlx"
#Require "./src/elf/ObjectFile.rlx"
#Require "./src/elf/ELFObjectLoader.rlx"
#Require "./src/elf/ELFEmitter.rlx"
#Require "./src/elf/ELFObjectWriter.rlx"
#Require "./src/elf/MergeLinker.rlx"
#Require "./src/elf/RelocationResolver.rlx"

define ELFObjectLoader* LoadELFObject(i8* FileName) {
    i64 F := FileOpen(FileName, FILE_READ)

    i32 Size := FileGetSize(F)
    void* Data := FileReadAll(F)

    FileClose(F)

    ELFObjectLoader* Object := ELFObjectLoader:New(Data, Size)

    Object->Load()

    return Object
}

define i64 Main(i64 ArgC, i8** ArgV) {
    i8* Mode := ArgV[1]

    if (StringEquals(Mode, "--dump-objects")) {
        for (i32 Index := 2, Index < ArgC, Index++) {
            i8* FileName := ArgV[Index]
            ELFObjectLoader* ELFLoader := LoadELFObject(FileName)

            ObjectFile* Object := ELFLoader->AsObject()

            Object->DumpSections()
            Object->DumpSymbolTables()
            Object->DumpRelocations()
        }
    }
    else if (StringEquals(Mode, "--passthrough-objects")) {
        for (i32 Index := 2, Index < ArgC, Index++) {
            i8* FileName := ArgV[Index]
            ELFObjectLoader* ELFLoader := LoadELFObject(FileName)

            ObjectFile* Object := ELFLoader->AsObject()

            Object->DumpSymbolTables()
            Object->DumpRelocations()
            
            ELFPassthroughObjectWriter* Passthrough := ELFPassthroughObjectWriter:New(Object)

            Passthrough->Lower()

            ELFEmitter* Emit := Passthrough->Emit()

            i64 f := FileOpen(ArgV[++Index], FILE_CREATE_NEW | FILE_WRITE)

            FileWrite(f, Emit->Buffer, Emit->Size)
            FileClose(f)
        }
    }
    else if (StringEquals(Mode, "--merge-then-passthrough")) {
        MergeLinker* Merger := MergeLinker:New()
        PointerArray* Objects := PointerArray:New() ; <ObjectFile*>

        for (i32 Index := 2, Index < ArgC - 1, Index++) {
            i8* FileName := ArgV[Index]
            ELFObjectLoader* ELFLoader := LoadELFObject(FileName)

            ObjectFile* Object := ELFLoader->AsObject()

            Print("Input file %i:\n", Index - 2)
            Object->DumpSymbolTables()
            Object->DumpRelocations()
            Print("=====\n")

            Merger->AddObject(Object)
        }

        ResolveRelocations(Merger->Result)

        Print("Result File:\n")

        Merger->Result->DumpSections()
        Merger->Result->DumpSymbolTables()
        Merger->Result->DumpRelocations()

        ELFPassthroughObjectWriter* Passthrough := ELFPassthroughObjectWriter:New(Merger->Result)

        Passthrough->Lower()

        ELFEmitter* Emit := Passthrough->Emit()

        i8* OutFile := ArgV[Index]
        Print("Writing to %s\n", OutFile)

        i64 f := FileOpen(OutFile, FILE_CREATE_NEW | FILE_WRITE)

        FileWrite(f, Emit->Buffer, Emit->Size)
        FileClose(f)
    }

    return false
}