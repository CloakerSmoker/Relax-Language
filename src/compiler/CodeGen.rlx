/*
==========================================
	Label helpers
==========================================
*/

define i32 NextLabel(CompilerState* Compiler) {
	i32 Result := Compiler->LabelIndex
	Compiler->LabelIndex += 1
	return Result
}

define void EnsureLabelBufferCapacity(CompilerState* Compiler) {
	/* Ensures that Compiler can hold at least one more label in its label buffer */
	
	if (Compiler->LabelBufferCapacity <= (Compiler->LabelCount + 1)) {
		Compiler->Labels := ReAlloc((Compiler->Labels) As void*, (Compiler->LabelBufferCapacity + 10) * 8) As Label**
		Compiler->LabelBufferCapacity += 10
	}
}

define Label* AppendLabel(CompilerState* Compiler, i32 LabelNumber, i8 IsPlaceholder) {
	EnsureLabelBufferCapacity(Compiler)
	
	Label* NewLabel := Alloc(#Label) As Label*
	
	NewLabel->LabelNumber := LabelNumber
	NewLabel->OffsetToReplace := Compiler->Index
	NewLabel->IsPlaceholder := IsPlaceholder
	
	Compiler->Labels[Compiler->LabelCount] := NewLabel
	Compiler->LabelCount += 1
	
	return NewLabel
}

define void UseLabel(CompilerState* Compiler, i32 LabelNumber) {
	/* Registers a label as being used, and writes a placeholder value into CodeBuffer for the label */
	
	AppendLabel(Compiler, LabelNumber, true)
	Compiler->Index += 4
}
define void OffsetLabel(CompilerState* Compiler, i32 Offset) {
	/* Adds an offset of Offset to the last label used */
	
	(Compiler->CodeBuffer As i32* + Compiler->Index - 4)[0] += Offset
}

define Label* SetLabel(CompilerState* Compiler, i32 LabelNumber) {
	/* Creates a new label which points to the current Compiler->Index */
	
	return AppendLabel(Compiler, LabelNumber, false)
}

define void ResolveLabel(CompilerState* Compiler, i32 LabelNumber, i32 Value) {
	for (i32 Index := 0, Index < Compiler->LabelCount, Index += 1) {
		Label* NextLabel := (Compiler->Labels)[Index]
		
		if (NextLabel->LabelNumber = LabelNumber && NextLabel->IsPlaceholder) {
			i32* ActualPlaceholder := ((Compiler->CodeBuffer) + (NextLabel->OffsetToReplace)) As i32*
			ActualPlaceholder[0] += Value - ((NextLabel->OffsetToReplace) + 4)
		}
	}
}
define void ResolveAllLabels(CompilerState* Compiler) {
	/* Goes through each label which is not a placeholder, but actually points to an index */
	
	for (i32 Index := 0, Index < Compiler->LabelCount, Index += 1) {
		Label* NextLabel := (Compiler->Labels)[Index]
		
		if !(NextLabel->IsPlaceholder) {
			/* And resolves each use of the label to the offset */
			ResolveLabel(Compiler, NextLabel->LabelNumber, NextLabel->OffsetToReplace)
		}
	}
}

/*
==========================================
	Number writing helpers
==========================================
*/

define void* GetIndexAsPointer(CompilerState* Compiler) {
	/* Helper to get a pointer into Compiler->CodeBuffer */
	
	return ((Compiler->CodeBuffer) + (Compiler->Index)) As void*
}

/* Helpers which write a number into Compiler->CodeBuffer and increment Compiler->Index */

declare void EnsureCodeBufferSize(CompilerState*)

define void PushI8(CompilerState* Compiler, i8 NumberToPush) {
	EnsureCodeBufferSize(Compiler)
	
	(Compiler->CodeBuffer)[Compiler->Index] := NumberToPush
	Compiler->Index += 1
}
define void PushByte(CompilerState* Compiler, i16 NumberToPush) {
	/* Alternate name for PushI8 since I was too used to typing PushByte, takes an i16 since 
		Some opcodes are >0x7F, and are can only be represented using i16s
	*/
	
	PushI8(Compiler, NumberToPush As i8)
}

define void PushI16(CompilerState* Compiler, i16 NumberToPush) {
	EnsureCodeBufferSize(Compiler)
	
	i16* PushLocation := GetIndexAsPointer(Compiler) As i16*
	PushLocation[0] := NumberToPush
	
	Compiler->Index += 2
}
define void PushI32(CompilerState* Compiler, i32 NumberToPush) {
	EnsureCodeBufferSize(Compiler)
	
	i32* PushLocation := GetIndexAsPointer(Compiler) As i32*
	PushLocation[0] := NumberToPush
	
	Compiler->Index += 4
}
define void PushI64(CompilerState* Compiler, i64 NumberToPush) {
	EnsureCodeBufferSize(Compiler)
	
	i64* PushLocation := GetIndexAsPointer(Compiler) As i64*
	PushLocation[0] := NumberToPush
	
	Compiler->Index += 8
}

/*
==========================================
	Register numbers/register helpers
==========================================
*/

/* Helpers to translate our R8-R15 into x64 R8-R15 */

define i8 RegisterRequiresREX(i8 RegisterNumber) {
	return RegisterNumber >= 8
}
define i8 ClampRegisterNumber(i8 RegisterNumber) {
	/* Takes a 0-15 register number and returns it as a 0-7 number (which might need a REX prefix) */
	
	if (RegisterRequiresREX(RegisterNumber)) {
		return RegisterNumber - 8 As i8
	}
	
	return RegisterNumber
}
define void PushRegisterInOpcode(CompilerState* Compiler, i16 Opcode, i8 Register) {
	Register := ClampRegisterNumber(Register)
	
	PushByte(Compiler, Opcode + Register)
}

/* Constants used while generating code */

i8 REX_BASE := 0x40

i8 REX_W := 8
i8 REX_R := 4
i8 REX_X := 2
i8 REX_B := 1

i8 NO_REGISTER := 0
i8 RAX := 0
i8 RBX := 3
i8 RCX := 1
i8 RDX := 2
i8 RSP := 4
i8 RBP := 5
i8 RSI := 6
i8 RDI := 7

/* Although R8-R15 actually have the same numbers of RAX-RDI, REX.B is encoded as bit 3 (which is removed and replaced with a REX prefix while actually encoding) */

i8 R8 := 8
i8 R9 := 9
i8 R10 := 10
i8 R11 := 11
i8 R12 := 12
i8 R13 := 13
i8 R14 := 14
i8 R15 := 15

i8 MODE_PTOR := 0
i8 MODE_PTOR_DISP8 := 1
i8 MODE_PTOR_DISP32 := 2

i8 MODE_RTOR := 3

define i8 GetSystemVRegister(i32 Index) {
	/* Translates a parameter number into which register (should) contain said parameter according to the SystemV ABI */
	
	if (Index = 5) {return R9}
	else if (Index = 4) {return R8}
	else if (Index = 3) {return RCX}
	else if (Index = 2) {return RDX}
	else if (Index = 1) {return RSI}
	else if (Index = 0) {return RDI}
	
	return RBX
}

/*
==========================================
	REX/ModRM/SIB helpers
==========================================
*/

define void EmitREX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 ExtraREX) {
	i8 Prefix := REX_BASE | ExtraREX
	
	if (RegisterRequiresREX(SourceRegister)) {
		Prefix := Prefix | REX_B
	}
	
	if (RegisterRequiresREX(DestinationRegister)) {
		Prefix := Prefix | REX_R
	}
	
	if !(Prefix = REX_BASE && ExtraREX = 0) {
		PushByte(Compiler, Prefix)
	}
}

define i8 MakeModRM(i8 Mode, i8 DestinationRegister, i8 SourceRegister) {
	Mode := (Mode << 6) As i8
	i8 Reg := (ClampRegisterNumber(DestinationRegister) << 3) As i8
	i8 RM := ClampRegisterNumber(SourceRegister)
	
	return Mode | Reg | RM
}

define void EmitModRM(CompilerState* Compiler, i8 Mode, i8 DestinationRegister, i8 SourceRegister) {
	PushByte(Compiler, MakeModRM(Mode, DestinationRegister, SourceRegister))
}

define void EmitLegacySizePrefix(CompilerState* Compiler) {
	PushByte(Compiler, 0x66)
}

define void EmitREXOpcodeModRM(CompilerState* Compiler, i16 Opcode, i8 Mode, i8 DestinationRegister, i8 SourceRegister, i8 ExtraREX) {
	EmitREX(Compiler, DestinationRegister, SourceRegister, ExtraREX)
	PushByte(Compiler, Opcode)
	EmitModRM(Compiler, Mode, DestinationRegister, SourceRegister)
}
define void EmitREXBigOpcodeModRM(CompilerState* Compiler, i16 FirstOpcodeByte, i16 SecondOpcodeByte, i8 Mode, i8 DestinationRegister, i8 SourceRegister, i8 ExtraREX) {
	EmitREX(Compiler, DestinationRegister, SourceRegister, ExtraREX)
	PushByte(Compiler, FirstOpcodeByte)
	PushByte(Compiler, SecondOpcodeByte)
	EmitModRM(Compiler, Mode, DestinationRegister, SourceRegister)
}

define i8 MakeSIB(i8 Scale, i8 IndexRegister, i8 BaseRegister) {
	i8 TrueScale := 0
	
	if (Scale = 2) {TrueScale := 1}
	else if (Scale = 4) {TrueScale := 2}
	else if (Scale = 8) {TrueScale := 3}
	
	return ((TrueScale << 6) | (IndexRegister << 3) | BaseRegister) As i8
}

define void EmitSIB(CompilerState* Compiler, i8 Scale, i8 IndexRegister, i8 BaseRegister) {
	PushByte(Compiler, MakeSIB(Scale, IndexRegister, BaseRegister))
}

define void EmitREXOpcodeModRMSIB(CompilerState* Compiler, i16 Opcode, i8 Mode, i8 DestinationRegister, i8 Scale, i8 IndexRegister, i8 BaseRegister, i8 ExtraREX) {
	if (RegisterRequiresREX(IndexRegister)) {
		ExtraREX := ExtraREX | REX_X
	}
	
	EmitREX(Compiler, DestinationRegister, BaseRegister, ExtraREX)
	PushByte(Compiler, Opcode)
	EmitModRM(Compiler, Mode, DestinationRegister, 4)
	EmitSIB(Compiler, Scale, ClampRegisterNumber(IndexRegister), ClampRegisterNumber(BaseRegister))
}

struct InstructionInfo {
	i8 HasTwoByteOpcode,
	i8 OpcodeOne,
	i8 OpcodeTwo,
	i8 ByteOpcodeOne,
	i8 ByteOpcodeTwo,
	i8 Mode,
	i8 REX,
	i8 Size
}

define void EmitInstruction(CompilerState* Compiler, InstructionInfo* Instruction, i8 DestinationRegister, i8 SourceRegister) {
	i8 OpcodeOne := Instruction->OpcodeOne
	i8 OpcodeTwo := Instruction->OpcodeTwo
	i8 REX := Instruction->REX
	
	if (Instruction->Size = 1) {
		OpcodeOne := Instruction->ByteOpcodeOne
		OpcodeTwo := Instruction->ByteOpcodeTwo
		REX := REX | REX_BASE
	}
	else if (Instruction->Size = 2) {
		EmitLegacySizePrefix(Compiler)
	}
	else if (Instruction->Size = 8) {
		REX := REX | REX_W
	}
	
	if (Instruction->HasTwoByteOpcode) {
		EmitREXBigOpcodeModRM(Compiler, OpcodeOne, OpcodeTwo, Instruction->Mode, DestinationRegister, SourceRegister, REX)
	}
	else {
		EmitREXOpcodeModRM(Compiler, OpcodeOne, Instruction->Mode, DestinationRegister, SourceRegister, REX)
	}
}

define void EmitBasicInstruction(CompilerState* Compiler, i16 Opcode, i8 Mode, i8 Size, i8 DestinationRegister, i8 SourceRegister) {
	/* Helper so each caller doesn't have to build an InstructionInfo and call EmitInstruction */
	
	InstructionInfo Instruction
	
	Instruction.HasTwoByteOpcode := false
	Instruction.REX := 0
	Instruction.OpcodeOne := Opcode As i8
	Instruction.ByteOpcodeOne := (Opcode - 1) As i8
	Instruction.Mode := Mode
	Instruction.Size := Size
	
	EmitInstruction(Compiler, &Instruction, DestinationRegister, SourceRegister)
}
define void EmitBasicInstructionDisplacement(CompilerState* Compiler, i16 Opcode, i8 Size, i8 DestinationRegister, i8 SourceRegister, i32 Displacement, i8 DisplacementSize) {
	if (DisplacementSize = 1) {
		EmitBasicInstruction(Compiler, Opcode, MODE_PTOR_DISP8, Size, DestinationRegister, SourceRegister)
		PushByte(Compiler, Displacement As i8)
	}
	else {
		EmitBasicInstruction(Compiler, Opcode, MODE_PTOR_DISP32, Size, DestinationRegister, SourceRegister)
		PushI32(Compiler, Displacement)
	}
}
/*
==========================================
	Jumps
==========================================
*/


define void EmitJump_RI64(CompilerState* Compiler, i8 Register) {
	EmitREXOpcodeModRM(Compiler, 0xFF, MODE_PTOR, 4, Register, 0)
}

define void EmitJump_Label(CompilerState* Compiler, i32 LabelNumber) {
	PushByte(Compiler, 0xE9)
	UseLabel(Compiler, LabelNumber)
}

define void EmitJXX_Label(CompilerState* Compiler, i32 LabelNumber, i16 Opcode) {
	PushByte(Compiler, 0x0F)
	PushByte(Compiler, Opcode)
	UseLabel(Compiler, LabelNumber)
}
define void EmitJEZ_Label(CompilerState* Compiler, i32 LabelNumber) {
	EmitJXX_Label(Compiler, LabelNumber, 0x84)
}
define void EmitJNZ_Label(CompilerState* Compiler, i32 LabelNumber) {
	EmitJXX_Label(Compiler, LabelNumber, 0x85)
}

define void EmitJGT_Label(CompilerState* Compiler, i32 LabelNumber) {
	EmitJXX_Label(Compiler, LabelNumber, 0x8F)
}
define void EmitJGE_Label(CompilerState* Compiler, i32 LabelNumber) {
	EmitJXX_Label(Compiler, LabelNumber, 0x8D)
}
define void EmitJLT_Label(CompilerState* Compiler, i32 LabelNumber) {
	EmitJXX_Label(Compiler, LabelNumber, 0x8C)
}
define void EmitJLE_Label(CompilerState* Compiler, i32 LabelNumber) {
	EmitJXX_Label(Compiler, LabelNumber, 0x8E)
}

/*
==========================================
	Moves
==========================================
*/


define void EmitZeroRegister(CompilerState* Compiler, i8 RegisterNumber) {
	if (RegisterRequiresREX(RegisterNumber)) {
		EmitREX(Compiler, NO_REGISTER, RegisterNumber, 0)
	}
	
	PushByte(Compiler, 0x33)
	EmitModRM(Compiler, MODE_RTOR, RegisterNumber, RegisterNumber)
}

define void EmitMove_R64_I64(CompilerState* Compiler, i8 RegisterNumber, i64 NumberToMove) {
	EmitREX(Compiler, NO_REGISTER, RegisterNumber, REX_W)
	PushRegisterInOpcode(Compiler, 0xB8, RegisterNumber)
	PushI64(Compiler, NumberToMove)
}
define void EmitMove_R32_I32(CompilerState* Compiler, i8 RegisterNumber, i32 NumberToMove) {
	EmitREX(Compiler, NO_REGISTER, RegisterNumber, 0)
	PushRegisterInOpcode(Compiler, 0xB8, RegisterNumber)
	PushI32(Compiler, NumberToMove)
}
define void EmitMove_R16_I16(CompilerState* Compiler, i8 RegisterNumber, i16 NumberToMove) {
	EmitLegacySizePrefix(Compiler)
	
	if (RegisterRequiresREX(RegisterNumber)) {
		EmitREX(Compiler, NO_REGISTER, RegisterNumber, 0)
	}
	
	PushRegisterInOpcode(Compiler, 0xB8, RegisterNumber)
	PushI16(Compiler, NumberToMove)
}
define void EmitMove_R8_I8(CompilerState* Compiler, i8 RegisterNumber, i8 NumberToMove) {
	EmitREX(Compiler, NO_REGISTER, RegisterNumber, REX_BASE)
	PushRegisterInOpcode(Compiler, 0xB0, RegisterNumber)
	PushI8(Compiler, NumberToMove)
}
define void EmitMove_RX_IX(CompilerState* Compiler, i8 RegisterNumber, i64 NumberToMove, i8 Size) {
	if (Size = 1) {EmitMove_R8_I8(Compiler, RegisterNumber, NumberToMove As i8)}
	else if (Size = 2) {EmitMove_R16_I16(Compiler, RegisterNumber, NumberToMove As i16)}
	else if (Size = 4) {EmitMove_R32_I32(Compiler, RegisterNumber, NumberToMove As i32)}
	else if (Size = 8) {EmitMove_R64_I64(Compiler, RegisterNumber, NumberToMove)}
}

define void EmitMove_R64_R64(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister) {
	EmitREXOpcodeModRM(Compiler, 0x8B, MODE_RTOR, DestinationRegister, SourceRegister, REX_W)
}
define void EmitMove_RX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x8B, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}

define void EmitMove_R64_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	if (Size = 1) {
		EmitREXBigOpcodeModRM(Compiler, 0x0F, 0xBE, MODE_RTOR, DestinationRegister, SourceRegister, REX_W)
	}
	else if (Size = 2) {
		EmitREXBigOpcodeModRM(Compiler, 0x0F, 0xBF, MODE_RTOR, DestinationRegister, SourceRegister, REX_W)
	}
	else if (Size = 4) {
		EmitREXOpcodeModRM(Compiler, 0x63, MODE_RTOR, DestinationRegister, SourceRegister, REX_W)
	}
	else {
		EmitMove_RX_RX(Compiler, DestinationRegister, SourceRegister, 8)
	}
}

define void EmitMove_RX_RIX_DISPX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i32 Displacement, i8 DisplacementSize, i8 Size) {
	EmitBasicInstructionDisplacement(Compiler, 0x8B, Size, DestinationRegister, SourceRegister, Displacement, DisplacementSize)
}

/* Move [register + displacement], register */

/* Flipped operands due to MR encoding */

define void EmitMove_RIX_DISP32_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i32 Displacement, i8 Size) {
	EmitBasicInstruction(Compiler, 0x89, MODE_PTOR_DISP32, Size, SourceRegister, DestinationRegister)
	
	PushI32(Compiler, Displacement)
}

/* Flipped operands due to MR encoding */

define void EmitMove_RIX_DISP8_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Displacement, i8 Size) {
	EmitBasicInstruction(Compiler, 0x89, MODE_PTOR_DISP8, Size, SourceRegister, DestinationRegister)
	
	PushI8(Compiler, Displacement)
}

define void EmitMove_RIX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x89, MODE_PTOR, Size, SourceRegister, DestinationRegister)
}


define void EmitMove_RIX_DISPX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i32 Displacement, i8 Size) {
	i8 DisplacementSize := GetNumberSize(Displacement As i64)
	
	if (DisplacementSize > 1) {
		EmitMove_RIX_DISP32_RX(Compiler, DestinationRegister, SourceRegister, Displacement As i32, Size)
	}
	else {
		EmitMove_RIX_DISP8_RX(Compiler, DestinationRegister, SourceRegister, Displacement As i8, Size)
	}
}

define void EmitMove_RX_SIB(CompilerState* Compiler, i8 DestinationRegister, i8 Scale, i8 IndexRegister, i8 BaseRegister) {
	i8 Opcode := 0x8B As i8
	i8 REX := 0
	
	if (Scale = 1) {
		Opcode := 0x8A As i8
		REX := REX_BASE
	}
	else if (Scale = 2) {
		EmitLegacySizePrefix(Compiler)
	}
	else if (Scale = 8) {
		REX := REX_W
	}
	
	EmitREXOpcodeModRMSIB(Compiler, Opcode, MODE_PTOR, DestinationRegister, Scale, IndexRegister, BaseRegister, REX)
}

/*
==========================================
	Deref moves
==========================================
*/
define void EmitMove_RX_RIX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x8B, MODE_PTOR, Size, DestinationRegister, SourceRegister)
}

/*
==========================================
	Lea
==========================================
*/

define void EmitLea_R64_R64_DISP8(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Displacement) {
	EmitREXOpcodeModRM(Compiler, 0x8D, MODE_PTOR_DISP8, DestinationRegister, SourceRegister, REX_W)
	PushByte(Compiler, Displacement)
}
define void EmitLea_R64_R64_DISP32(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i32 Displacement) {
	EmitREXOpcodeModRM(Compiler, 0x8D, MODE_PTOR_DISP32, DestinationRegister, SourceRegister, REX_W)
	PushI32(Compiler, Displacement)
}
define void EmitLea_R64_R64_DISPX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i32 Displacement) {
	i8 Size := GetNumberSize(Displacement)
	
	if (Size = 1) {
		EmitLea_R64_R64_DISP8(Compiler, DestinationRegister, SourceRegister, Displacement As i8)
	}
	else {
		EmitLea_R64_R64_DISP32(Compiler, DestinationRegister, SourceRegister, Displacement)
	}
}

define void EmitLea_R64_SIB(CompilerState* Compiler, i8 DestinationRegister, i8 Scale, i8 IndexRegister, i8 BaseRegister) {
	EmitREXOpcodeModRMSIB(Compiler, 0x8D, MODE_PTOR, DestinationRegister, Scale, IndexRegister, BaseRegister, REX_W)
}

/*
==========================================
	Adds
==========================================
*/
define void EmitAdd_RX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x03, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}
define void EmitAdd_RIX_DISPX_RX(CompilerState* Compiler, i8 SourceRegister, i8 DestinationRegister, i32 Displacement, i8 Size) {
	EmitBasicInstructionDisplacement(Compiler, 0x01, Size, DestinationRegister, SourceRegister, Displacement, GetNumberSize(Displacement))
}

define void EmitAdd_R64_I8(CompilerState* Compiler, i8 TargetRegister, i8 Number) {
	EmitREXOpcodeModRM(Compiler, 0x83, MODE_RTOR, 0, TargetRegister, REX_W)
	PushByte(Compiler, Number)
}
define void EmitAdd_R64_I32(CompilerState* Compiler, i8 TargetRegister, i32 Number) {
	EmitREXOpcodeModRM(Compiler, 0x81, MODE_RTOR, 0, TargetRegister, REX_W)
	PushI32(Compiler, Number)
}
define void EmitAdd_R64_IX(CompilerState* Compiler, i8 TargetRegister, i32 Number) {
	i8 Size := GetNumberSize(Number)
	
	if (Size = 1) {EmitAdd_R64_I8(Compiler, TargetRegister, Number As i8)}
	else if (Size <= 4) {EmitAdd_R64_I32(Compiler, TargetRegister, Number)}
}

define void EmitInc_RX(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xFF, MODE_RTOR, Size, 0, TargetRegister)
}
define void EmitInc_RIX(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xFF, MODE_PTOR, Size, 0, TargetRegister)
}

/*
==========================================
	Subs
==========================================
*/

define void EmitSub_RX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x2B, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}
define void EmitSub_RIX_DISPX_RX(CompilerState* Compiler, i8 SourceRegister, i8 DestinationRegister, i32 Displacement, i8 Size) {
	EmitBasicInstructionDisplacement(Compiler, 0x29, Size, DestinationRegister, SourceRegister, Displacement, GetNumberSize(Displacement))
}

define void EmitSub_R64_I8(CompilerState* Compiler, i8 TargetRegister, i8 Number) {
	EmitREXOpcodeModRM(Compiler, 0x83, MODE_RTOR, 5, TargetRegister, REX_W)
	PushByte(Compiler, Number)
}
define void EmitSub_R64_I32(CompilerState* Compiler, i8 TargetRegister, i32 Number) {
	EmitREXOpcodeModRM(Compiler, 0x81, MODE_RTOR, 5, TargetRegister, REX_W)
	PushI32(Compiler, Number)
}
define void EmitSub_R64_IX(CompilerState* Compiler, i8 TargetRegister, i32 Number) {
	i8 Size := GetNumberSize(Number)
	
	if (Size = 1) {EmitSub_R64_I8(Compiler, TargetRegister, Number As i8)}
	else if (Size <= 4) {EmitSub_R64_I32(Compiler, TargetRegister, Number)}
}

define void EmitNeg_RX(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xF7, MODE_RTOR, Size, 3, TargetRegister)
}

define void EmitDec_RX(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xFF, MODE_RTOR, Size, 1, TargetRegister)
}
define void EmitDec_RIX(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xFF, MODE_PTOR, Size, 1, TargetRegister)
}

/*
==========================================
	Mul/div
==========================================
*/

define void EmitIMul_RX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	InstructionInfo I
	
	I.HasTwoByteOpcode := true
	I.OpcodeOne := 0x0F
	I.OpcodeTwo := 0xAF As i8
	I.Mode := MODE_RTOR
	
	if (Size = 1) {
		Size := 2
	}
	
	I.Size := Size
	
	EmitInstruction(Compiler, &I, DestinationRegister, SourceRegister) 
}
define void EmitIMul_R64_I8(CompilerState* Compiler, i8 DestinationRegister, i8 Value) {
	EmitBasicInstruction(Compiler, 0x6B, MODE_RTOR, 8, DestinationRegister, DestinationRegister)
	PushByte(Compiler, Value)
}


define void EmitCXX(CompilerState* Compiler, i8 Size) {
	if (Size = 2) {EmitLegacySizePrefix(Compiler)}
	else if (Size = 8) {PushByte(Compiler, REX_BASE | REX_W)}
	
	PushByte(Compiler, 0x99)
}


define void EmitIDiv_RAX_RX(CompilerState* Compiler, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xF7, MODE_RTOR, Size, 7, SourceRegister)
}

define void EmitSAL_RX_I8(CompilerState* Compiler, i8 TargetRegister, i8 ShiftCount, i8 Size) {
	EmitBasicInstruction(Compiler, 0xC1, MODE_RTOR, Size, 4, TargetRegister)
	
	PushByte(Compiler, ShiftCount)
}

define void EmitSAR_RX_I8(CompilerState* Compiler, i8 TargetRegister, i8 ShiftCount, i8 Size) {
	EmitBasicInstruction(Compiler, 0xC1, MODE_RTOR, Size, 5, TargetRegister)
	
	PushByte(Compiler, ShiftCount)
}

define void EmitSHL_RX_CL(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xD3, MODE_RTOR, Size, 4, TargetRegister)
}

define void EmitSHR_RX_CL(CompilerState* Compiler, i8 TargetRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xD3, MODE_RTOR, Size, 5, TargetRegister)
}


/*
==========================================
	Push/Pop
==========================================
*/

define void EmitPush_R64(CompilerState* Compiler, i8 RegisterNumber) {
	EmitREX(Compiler, NO_REGISTER, RegisterNumber, 0)
	PushRegisterInOpcode(Compiler, 0x50, RegisterNumber)
}
define void EmitPop_R64(CompilerState* Compiler, i8 RegisterNumber) {
	EmitREX(Compiler, NO_REGISTER, RegisterNumber, 0)
	PushRegisterInOpcode(Compiler, 0x58, RegisterNumber)
}
define void EmitPush_R64_DISP8(CompilerState* Compiler, i8 RegisterNumber, i8 Displacement) {
	EmitBasicInstruction(Compiler, 0xFF, MODE_PTOR_DISP8, 4, 6, RegisterNumber)
	PushByte(Compiler, Displacement)
}
define void EmitPop_R64_DISP8(CompilerState* Compiler, i8 RegisterNumber, i8 Displacement) {
	EmitBasicInstruction(Compiler, 0x8F, MODE_PTOR_DISP8, 4, 0, RegisterNumber)
	PushByte(Compiler, Displacement)
}

/*
==========================================
	Functions
==========================================
*/

define void EmitLeave(CompilerState* Compiler) {
	PushByte(Compiler, 0xC9)
}

define void EmitReturn(CompilerState* Compiler) {
	PushByte(Compiler, 0xC3)
}

define void EmitCall_Label(CompilerState* Compiler, i32 LabelNumber) {
	PushByte(Compiler, 0xE8)
	UseLabel(Compiler, LabelNumber)
}

define void EmitSysCall(CompilerState* Compiler) {
	PushByte(Compiler, 0x0F)
	PushByte(Compiler, 0x05)
}

/*
==========================================
	Logic
==========================================
*/

define void EmitTest_RX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x85, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}

define void EmitCmp_RX_RX(CompilerState* Compiler, i8 DestinationRegister, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x39, MODE_RTOR, Size, SourceRegister, DestinationRegister)
}

/*
==========================================
	Specific Logic
==========================================
*/

define void EmitAnd_RX_RX(CompilerState* Compiler, i8 SourceRegister, i8 DestinationRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x21, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}

define void EmitAnd_RX_IX(CompilerState* Compiler, i8 TargetRegister, i32 Mask, i8 Size) {
	EmitBasicInstruction(Compiler, 0x81, MODE_RTOR, Size, 4, TargetRegister)
	
	if (Size = 1) {
		PushByte(Compiler, Mask As i8)
	}
	else if (Size = 2) {
		PushI16(Compiler, Mask As i16)
	}
	else if (Size = 4) {
		PushI32(Compiler, Mask)
	}
}

define void EmitOr_RX_RX(CompilerState* Compiler, i8 SourceRegister, i8 DestinationRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x09, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}

define void EmitXor_RX_RX(CompilerState* Compiler, i8 SourceRegister, i8 DestinationRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0x31, MODE_RTOR, Size, DestinationRegister, SourceRegister)
}

define void EmitNot_RX(CompilerState* Compiler, i8 SourceRegister, i8 Size) {
	EmitBasicInstruction(Compiler, 0xF7, MODE_RTOR, Size, 2, SourceRegister)
}

define i8 R8NeedsREX(i8 RegisterNumber) {
	if (4 <= RegisterNumber && RegisterNumber <= 7) {
		return REX_BASE
	}
	
	return 0
}

define void EmitSetX_R8(CompilerState* Compiler, i16 Opcode, i8 DestinationRegister) {
	EmitREXBigOpcodeModRM(Compiler, 0x0F, Opcode, MODE_RTOR, NO_REGISTER, DestinationRegister, R8NeedsREX(DestinationRegister))
}

define void EmitSetE_R8(CompilerState* Compiler, i8 DestinationRegister) {
	EmitSetX_R8(Compiler, 0x94, DestinationRegister)
}
define void EmitSetNE_R8(CompilerState* Compiler, i8 DestinationRegister) {
	EmitSetX_R8(Compiler, 0x95, DestinationRegister)
}
define void EmitSetL_R8(CompilerState* Compiler, i8 DestinationRegister) {
	EmitSetX_R8(Compiler, 0x9C, DestinationRegister)
}
define void EmitSetLE_R8(CompilerState* Compiler, i8 DestinationRegister) {
	EmitSetX_R8(Compiler, 0x9E, DestinationRegister)
}
define void EmitSetG_R8(CompilerState* Compiler, i8 DestinationRegister) {
	EmitSetX_R8(Compiler, 0x9F, DestinationRegister)
}
define void EmitSetGE_R8(CompilerState* Compiler, i8 DestinationRegister) {
	EmitSetX_R8(Compiler, 0x9D, DestinationRegister)
}

/*
==========================================
	Other
==========================================
*/

define void EmitInt3(CompilerState* Compiler) {
	PushByte(Compiler, 0xCC)
}
define void EmitOutB(CompilerState* Compiler) {
	PushByte(Compiler, 0xEE)
}
define void EmitInB(CompilerState* Compiler) {
	PushByte(Compiler, 0xEC)
}
define void EmitLea_RAX_Label(CompilerState* Compiler, i32 Label) {
	PushByte(Compiler, 0x8D)
	EmitModRM(Compiler, 0, RAX, 5)
	UseLabel(Compiler, Label)
}
define void EmitLea_R64_Label(CompilerState* Compiler, i8 TargetRegister, i32 Label) {
	EmitBasicInstruction(Compiler, 0x8D, 0, 4, TargetRegister, 5)
	UseLabel(Compiler, Label)
}
define void EmitXCHG_R64_RI64(CompilerState* Compiler, i8 Register, i8 PointerRegister) {
	EmitBasicInstruction(Compiler, 0x87, MODE_PTOR, 8, Register, PointerRegister)
}
define void EmitIRet(CompilerState* Compiler) {
	PushByte(Compiler, 0x48)
	PushByte(Compiler, 0xCF)
}