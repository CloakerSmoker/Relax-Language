
#Require "$/AVLTree.rlx"
#Require "./src/compiler/Utility.rlx"

; Constants end around line 130

i8 TOKEN_TYPE_EOF := 0
i8 TOKEN_TYPE_NONE := 100
i8 TOKEN_TYPE_OPERATOR := 1
i8 TOKEN_TYPE_IDENTIFIER := 2
i8 TOKEN_TYPE_INTEGER := 3
i8 TOKEN_TYPE_STRING := 4
i8 TOKEN_TYPE_WIDE_STRING := 5
i8 TOKEN_TYPE_PUNCTUATION := 6
i8 TOKEN_TYPE_KEYWORD := 7
i8 TOKEN_TYPE_DEBUG_CHARACTER := 8

; "synthetic" token types, aka only useful for highlighting/formatting

i8 TOKEN_TYPE_COMMENT := 9
i8 TOKEN_TYPE_DIRECTIVE := 10
i8 TOKEN_TYPE_SYNTHETIC_INTEGER := 11
i8 TOKEN_TYPE_SYNTHETIC_STRING := 12

/* TODO: Bit shifts need to be higher precedence than bitwise operations */

i8 OPERATOR_FIRST_ASSIGNMENT := 0
i8 PRECEDENCE_1 := 0
	i8 OPERATOR_COLON_EQUAL := 0
	i8 OPERATOR_PLUS_EQUAL := 1
	i8 OPERATOR_MINUS_EQUAL := 2
	i8 OPERATOR_STAR_EQUAL := 3
	i8 OPERATOR_SLASH_EQUAL := 4
	i8 OPERATOR_PERCENT_EQUAL := 5
	i8 OPERATOR_AND_EQUAL := 6
	i8 OPERATOR_OR_EQUAL := 7
	i8 OPERATOR_XOR_EQUAL  := 8
i8 OPERATOR_LAST_ASSIGNMENT := 8

i8 PRECEDENCE_2 := 9
i8 OPERATOR_FIRST_SHORT_CIRCUIT := 9
	i8 OPERATOR_LOGICAL_AND := 9
	i8 OPERATOR_LOGICAL_OR := 10
i8 OPERATOR_LAST_SHORT_CIRCUIT := 10

i8 PRECEDENCE_3 := 11
i8 OPERATOR_FIRST_COMPARISON := 11
	i8 OPERATOR_EQUAL := 11
	i8 OPERATOR_BANG_EQUAL := 12
	i8 OPERATOR_LESS := 13
	i8 OPERATOR_LESS_EQAUL := 14
	i8 OPERATOR_GREATER := 15
	i8 OPERATOR_GREATER_EQAUL := 16
i8 OPERATOR_LAST_COMPARISON := 16

i8 PRECEDENCE_4 := 17
i8 OPERATOR_AS := 17

i8 PRECEDENCE_5 := 18
i8 OPERATOR_PLUS := 18
i8 OPERATOR_MINUS := 19

i8 PRECEDENCE_6 := 20
i8 OPERATOR_STAR := 20
i8 OPERATOR_SLASH := 21
i8 OPERATOR_PERCENT := 22

i8 PRECEDENCE_7 := 23
i8 OPERATOR_AND := 23
i8 OPERATOR_OR := 24
i8 OPERATOR_XOR := 25

i8 PRECEDENCE_8 := 26
i8 OPERATOR_LESS_LESS := 26
i8 OPERATOR_GREATER_GREATER := 27

; Precedence level 10 is for prefix operators !-~*&

i8 PRECEDENCE_9 := 28
i8 OPERATOR_BANG := 28
i8 OPERATOR_TILDE := 29

i8 PRECEDENCE_10 := 30
i8 OPERATOR_PLUS_PLUS := 30
i8 OPERATOR_MINUS_MINUS := 31

i8 OPERATOR_PLUS_PLUS_LEFT := 30
i8 OPERATOR_MINUS_MINUS_LEFT := 31
i8 OPERATOR_PLUS_PLUS_RIGHT := 32
i8 OPERATOR_MINUS_MINUS_RIGHT := 33

i8 PRECEDENCE_11 := 34
i8 OPERATOR_OPEN_BRACKET := 34

i8 PRECEDENCE_12 := 35
i8 OPERATOR_DOT := 35
i8 OPERATOR_MINUS_GREATER := 36
i8 OPERATOR_TILDE_GREATER := 37

i8 OPERATOR_COLON := 38
i8 OPERATOR_POUND := 39


i8 PUNCTUATION_OPEN_PAREN := 0
i8 PUNCTUATION_CLOSE_PAREN := 1

i8 PUNCTUATION_OPEN_BRACE := 2
i8 PUNCTUATION_CLOSE_BRACE := 3

i8 PUNCTUATION_CLOSE_BRACKET := 4

i8 PUNCTUATION_COMMA := 5
i8 PUNCTUATION_AT := 6

i8 PUNCTUATION_COLON_COLON := 7

i8 KEYWORD_DECLARE := 0
i8 KEYWORD_DEFINE := 1
i8 KEYWORD_DLLIMPORT := 2
; declare/define/dllimport must be 0-2, as the parser uses `TokenValue <= KEYWORD_DLLIMPORT` to check for
;  the various flavors of function definition

i8 KEYWORD_IF := 3
i8 KEYWORD_ELSE := 4

i8 KEYWORD_FOR := 5
i8 KEYWORD_WHILE := 6
i8 KEYWORD_LOOP := 7

i8 KEYWORD_CONTINUE := 8
i8 KEYWORD_BREAK := 9

i8 KEYWORD_STRUCT := 10
i8 KEYWORD_UNION := 11
i8 KEYWORD_BITS := 12
i8 KEYWORD_UNALIGNED := 13

i8 KEYWORD_RETURN := 14

i8 KEYWORD_WINDOWS := 15
i8 KEYWORD_LINUX := 16

i8 KEYWORD_ASSEMBLY := 17

i8 KEYWORD_TRY := 18
i8 KEYWORD_CATCH := 19

i8 KEYWORD_X64 := 20
i8 KEYWORD_STATIC := 21

i8 KEYWORD_USING := 22
i8 KEYWORD_ENUM := 23

i8 KEYWORD_EXTERNAL := 24
i8 KEYWORD_EXPORT := 25

i8 KEYWORD_NAMESPACE := 26

i8 KEYWORD_CLASS := 27
i8 KEYWORD_IMPLEMENTS := 29
i8 KEYWORD_INTERFACE := 30

; Should be zero, but somehow I used 0 as a regular value
i8 KEYWORD_NONE := 127

define i8 IsIdentifier(i8 Character) {
	return IsAlphaNumeric(Character) || Character = '?'
}

struct KeywordMapping {
	i8 Value
}

struct Token {
	SourceContext Context
	
	union {
		void* Value
		i64 IntegerValue
		SafeString* StringValue
	}
	
	union {
		i8 Type
		i16 Padding
	}
	
	define void Error(i8* Message) {
		this~>Context->Error(Message)
	}
	define void Warn(i8* Message) {
		this~>Context->Warn(Message)
	}
	
	define i8 Is(i8 Type, i64 Value) {
		if (this->Type != Type) {
			return false
		}
		
		if (Type = TOKEN_TYPE_IDENTIFIER || Type = TOKEN_TYPE_STRING || Type = TOKEN_TYPE_INTEGER) {
			/* Special case for tokens containing strings, since TokenToTest->Value	is a SafeString* and worthless in a comparison */
			
			return true
		} 
		
		return this->Value = Value
	}
	define i8 Is(i8 Type) {
		return this->Type = Type
	}

	define void Free() {
		if (this->Type = TOKEN_TYPE_IDENTIFIER || this->Type = TOKEN_TYPE_STRING || this->Type = TOKEN_TYPE_WIDE_STRING) {
			this->StringValue->Free()
		}

		Free(this)
	}
}

struct LexerState {
	BuildConfig* Config
	SafeString* SourceFilePath
	
	AVLTree Keywords
	
	i8* Source
	i32 SourceIndex
	i32 SourceLength
	
	i32 TokenIndex
	i32 MaxTokenIndex
	i32 TokenCapacity

	i32 CurrentLineNumber
	i32 CurrentTokenStart
	
	LexerState* Parent
	LexerState* Child

	i32 IncludedAtLine
	
	union {
		void* Buffer
		Token** Tokens
	}
	
	define void DefineKeyword(i8* Name, i8 Value) {
		KeywordMapping Mapping {
			Value: Value
		}

		i64 Hash := FNV1A(Name, StringLength(Name), true)

		this~>Keywords->Insert(Hash, &Mapping)
	}

	define i8 LookupKeyword(SafeString* Name) {
		i64 Hash := FNV1A(Name->Buffer, Name->Length, true)

		KeywordMapping* Mapping := this~>Keywords->Get(Hash)

		if (Mapping) {
			return Mapping->Value
		}
		else {
			return KEYWORD_NONE
		}
	}
	
	static LexerState* New(BuildConfig* Config, LexerState* Parent, i8* Source, i32 SourceLength, SafeString* SourceFilePath) {
		LexerState* this := Alloc(#LexerState)
		
		this->Config := Config
		this->Parent := Parent
		
		this->Source := Source
		this->SourceLength := SourceLength
		this->SourceFilePath := SourceFilePath
		
		if (Parent = null) {
			this->TokenCapacity := 300
			this->Buffer := Alloc(this->TokenCapacity * 8)
		}
		
		this->CurrentLineNumber := 1

		this~>Keywords->ValueSize := #KeywordMapping
		
		this->DefineKeyword("declare",   KEYWORD_DECLARE)
		this->DefineKeyword("define",    KEYWORD_DEFINE)
		this->DefineKeyword("dllimport", KEYWORD_DLLIMPORT)
		this->DefineKeyword("if",        KEYWORD_IF)
		this->DefineKeyword("else",      KEYWORD_ELSE)
		this->DefineKeyword("for",       KEYWORD_FOR)
		this->DefineKeyword("while",     KEYWORD_WHILE)
		this->DefineKeyword("loop",      KEYWORD_LOOP)
		this->DefineKeyword("continue",  KEYWORD_CONTINUE)
		this->DefineKeyword("break",     KEYWORD_BREAK)
		this->DefineKeyword("struct",    KEYWORD_STRUCT)
		this->DefineKeyword("return",    KEYWORD_RETURN)
		this->DefineKeyword("union",     KEYWORD_UNION)
		this->DefineKeyword("bits",      KEYWORD_BITS)
		this->DefineKeyword("unaligned", KEYWORD_UNALIGNED)
		this->DefineKeyword("windows",   KEYWORD_WINDOWS)
		this->DefineKeyword("linux",     KEYWORD_LINUX)
		this->DefineKeyword("asm",       KEYWORD_ASSEMBLY)
		this->DefineKeyword("try",       KEYWORD_TRY)
		this->DefineKeyword("catch",     KEYWORD_CATCH)
		this->DefineKeyword("x64",       KEYWORD_X64)
		this->DefineKeyword("static",    KEYWORD_STATIC)
		this->DefineKeyword("using",     KEYWORD_USING)
		this->DefineKeyword("enum",      KEYWORD_ENUM)
		this->DefineKeyword("external",  KEYWORD_EXTERNAL)
		this->DefineKeyword("export",    KEYWORD_EXPORT)
		this->DefineKeyword("namespace", KEYWORD_NAMESPACE)
		;this->DefineKeyword("class",     KEYWORD_CLASS)
		;this->DefineKeyword("implements",KEYWORD_IMPLEMENTS)
		;this->DefineKeyword("interface", KEYWORD_INTERFACE)
		
		return this
	}
	static LexerState* New(BuildConfig* Config, i8* Source, i32 SourceLength, SafeString* SourceFilePath) {
		return LexerState:New(Config, null, Source, SourceLength, SourceFilePath)
	}
	static LexerState* New(LexerState* Parent, i8* Source, i32 SourceLength, SafeString* SourceFilePath) {
		return LexerState:New(Parent->Config, Parent, Source, SourceLength, SourceFilePath)
	}
	
	define i8 PeekNextCharacter() {
		return Lower(this->Source[this->SourceIndex])
	}
	define i8 GetNextCharacter() {
		i8 Result := this->PeekNextCharacter()
		
		this->SourceIndex += 1
		
		if (Result = 0xA) {
			this->CurrentLineNumber += 1
		}
		
		return Result
	}
	define i8 GetNextCharacterRaw() {
		i8 Result := this->Source[this->SourceIndex]
		
		this->GetNextCharacter()
		
		return Result
	}
	define void Backtrack() {
		this->SourceIndex -= 1
		
		if (this->PeekNextCharacter() = 0xA) {
			this->CurrentLineNumber -= 1
		}
	}
	
	define i8 NextCharacterMatches(i8 TargetCharacter) {
		if (this->PeekNextCharacter() = TargetCharacter) {
			this->GetNextCharacter()
			return true
		}
		
		return false
	}
	define i8 AtEnd() {
		return this->SourceIndex >= this->SourceLength
	}
	
	define void EnsureCapacity(i32 NeededCapacity) {
		if (this->MaxTokenIndex + NeededCapacity >= this->TokenCapacity) {
			this->TokenCapacity += 300
			
			this->Buffer := ReAlloc(this->Buffer, this->TokenCapacity * 8)
		}
	}
	define Token* GetToken(i32 TokenIndex) {
		return this->Tokens[TokenIndex]
	}

	define Token* MakeToken(i8 TokenType, void* TokenValue, i32 Line, i32 Position, i16 Length) {
		Token* NewToken := Alloc(#Token)

		NewToken->Type := TokenType
		NewToken->Value := TokenValue
		
		SourceContext* Context := NewToken~>Context
		
		Context->Lexer := this
		Context->LineNumber := Line
		Context->PositionInSource := Position
		Context->LengthInSource := Length

		return NewToken
	}

	define Token* MakeToken(i8 TokenType, void* TokenValue, i32 Position, i16 Length) {
		return this->MakeToken(TokenType, TokenValue, this->CurrentLineNumber, Position, Length)
	}

	define Token* MakeToken(i8 TokenType, void* TokenValue, i32 Position) {
		return this->MakeToken(TokenType, TokenValue, this->CurrentLineNumber, Position, (this->SourceIndex - Position) As i16)
	}
	
	define Token* AppendToken(Token* NewToken) {
		if (this->Parent != null) {
			return this->Parent->AppendToken(NewToken)
		}
		else {
			this->EnsureCapacity(1)
			this->Tokens[this->MaxTokenIndex++] := NewToken
			
			return NewToken
		}
	}
	
	define Token* AppendToken(i8 TokenType, void* TokenValue, i32 Position, i16 Length) {
		return this->AppendToken(this->MakeToken(TokenType, TokenValue, Position, Length))
	}
	define Token* AppendToken(i8 TokenType, void* TokenValue) {
		return this->AppendToken(this->MakeToken(TokenType, TokenValue, this->CurrentTokenStart))
	}
	define Token* AppendToken(i8 TokenType, i64 TokenValue) {
		return this->AppendToken(this->MakeToken(TokenType, TokenValue As void*, this->CurrentTokenStart))
	}
	
	define Token* AppendOperator(i8 OperatorValue) {
		return this->AppendToken(TOKEN_TYPE_OPERATOR, OperatorValue)
	}
	define Token* AppendPunctuation(i8 PunctuationValue) {
		return this->AppendToken(TOKEN_TYPE_PUNCTUATION, PunctuationValue)
	}
	
	define SafeString* GetString(i32 StartIndex, i32 EndIndex) {
		i32 Length := EndIndex - StartIndex
		i8* Clone := CloneMemory(this->Source + StartIndex, Length + 1)
		Clone[Length] := 0

		return SafeString:Adopt(Length, Clone)
	}
	define SafeString* GetString(i32 StartIndex) {
		return this->GetString(StartIndex, this->SourceIndex)
	}
	
	define i64 ProcessNumber(i32 StartIndex) {
		i64 Base := 10
		
		if (this->NextCharacterMatches('x')) {
			Base := 16
		}
		else if (this->NextCharacterMatches('o')) {
			Base := 8
		}
		else if (this->NextCharacterMatches('b')) {
			Base := 2
		}
	
		loop {
			i8 NextCharacter := this->GetNextCharacter()
			
			if !(IsNumeric(NextCharacter, Base) || NextCharacter = '_') {
				this->Backtrack()
				break
			}
			else if (this->AtEnd()) {
				break
			}
		}
		
		SafeString* NumericLiteral := this->GetString(StartIndex + (Base != 10) * 2)
		
		for (i32 Index := 0, Index < NumericLiteral->Length, Index += 1) {
			if (NumericLiteral->ASCIICharacterAt(Index) = '_') {
				NumericLiteral->Remove(Index, 1)
			}	
		}
		
		i64 Result := NumericLiteral->ParseInteger(Base)
		
		NumericLiteral->Free()
		
		return Result
	}
	
	define i8 LookupCompoundAssignment(i8 NextCharacter) {
		i8 NewType := TOKEN_TYPE_NONE
		
		if 		(NextCharacter = ':') 	{NewType := OPERATOR_COLON_EQUAL	}
		else if (NextCharacter = '+') 	{NewType := OPERATOR_PLUS_EQUAL		}
		else if (NextCharacter = '-') 	{NewType := OPERATOR_MINUS_EQUAL	}
		else if (NextCharacter = '*') 	{NewType := OPERATOR_STAR_EQUAL		}
		else if (NextCharacter = '/') 	{NewType := OPERATOR_SLASH_EQUAL	}
		else if (NextCharacter = '%') 	{NewType := OPERATOR_PERCENT_EQUAL	}
		else if (NextCharacter = '&') 	{NewType := OPERATOR_AND_EQUAL		}
		else if (NextCharacter = '|') 	{NewType := OPERATOR_OR_EQUAL		}
		else if (NextCharacter = '^') 	{NewType := OPERATOR_XOR_EQUAL		}
		else if (NextCharacter = '<') 	{NewType := OPERATOR_LESS_EQAUL		}
		else if (NextCharacter = '>') 	{NewType := OPERATOR_GREATER_EQAUL	}
		else if (NextCharacter = '!') 	{NewType := OPERATOR_BANG_EQUAL		}
		
		return NewType
	}
	
	declare Token* GetNextToken(i8)
	
	define Token* GetNextToken() {
		return this->GetNextToken(1)
	}
	
	define Token* GetNextToken(i8 IsNotReinvoke) {		
		i32 TokenIndex := this->TokenIndex
		this->TokenIndex += IsNotReinvoke
		
		if (TokenIndex < this->MaxTokenIndex) {
			return this->GetToken(TokenIndex)
		}
		
		if (this->AtEnd()) {
			if (this->Parent) {
				return null
			}
			else {
				return this->AppendToken(TOKEN_TYPE_EOF, null)
			}
		}
		
		if (this->Child != null) {
			Token* Result := this->Child->GetNextToken(false)
			
			if (Result != null) {
				return Result
			}
			else {
				this->Child := null
			}
		}
		
		i32 StartingIndex := this->SourceIndex
		this->CurrentTokenStart := StartingIndex
		i8 NextCharacter := this->GetNextCharacter()
		
		if (this->NextCharacterMatches('=')) {
			i8 NewType := this->LookupCompoundAssignment(NextCharacter)
			
			if (NewType = TOKEN_TYPE_NONE) {
				/* If we didn't match and X= operator, backtrack and continue like normal */
				this->Backtrack()
			}
			else {
				/* But if we did match an X=, return the matched operator */
				return this->AppendOperator(NewType)
			}
		}
		
		if (NextCharacter = '=') {
			/* Manually compare for all of the operators */
			
			return this->AppendOperator(OPERATOR_EQUAL)
		}
		else if (NextCharacter = '+') {
			if (this->NextCharacterMatches('+')) {
				return this->AppendOperator(OPERATOR_PLUS_PLUS)
			}
			
			return this->AppendOperator(OPERATOR_PLUS)
		}
		else if (NextCharacter = '-') {
			if (this->NextCharacterMatches('-')) {
				return this->AppendOperator(OPERATOR_MINUS_MINUS)
			}
			else if (this->NextCharacterMatches('>')) {
				return this->AppendOperator(OPERATOR_MINUS_GREATER)
			}
			
			return this->AppendOperator(OPERATOR_MINUS)
		}
		else if (NextCharacter = '~') {
			if (this->NextCharacterMatches('>')) {
				return this->AppendOperator(OPERATOR_TILDE_GREATER)
			}
			
			return this->AppendOperator(OPERATOR_TILDE)
		}
		else if (NextCharacter = '*') {
			return this->AppendOperator(OPERATOR_STAR)
		}
		else if (NextCharacter = ';') {
			i32 StartingLine := this->CurrentLineNumber
			i32 Length := 1
			
			while (this->CurrentLineNumber = StartingLine && !this->AtEnd()) {
				this->GetNextCharacter()
				Length++
			}

			if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
				this->AppendToken(this->MakeToken(TOKEN_TYPE_COMMENT, null, StartingLine, StartingIndex, Length As i16))
			}
			
			return this->GetNextToken(false)
		}
		else if (NextCharacter = '/') {
			if (this->NextCharacterMatches('*')) {
				i8 Depth := 1

				i32 Line := this->CurrentLineNumber
				i32 Position := this->CurrentTokenStart
				i32 Length := 2
				
				loop {
					NextCharacter := this->GetNextCharacter()
					Length++
					
					if (NextCharacter = '*' && this->PeekNextCharacter() = '/') {
						this->GetNextCharacter()
						
						Depth -= 1
						Length++
					}
					else if (NextCharacter = '/' && this->PeekNextCharacter() = '*') {
						this->GetNextCharacter()
						
						Depth += 1
						Length++
					}
					
					if (Depth = 0) {
						if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
							this->AppendToken(this->MakeToken(TOKEN_TYPE_COMMENT, null, Line, Position, Length As i16))
						}

						break
					}

					if (this->CurrentLineNumber != Line) {
						if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
							this->AppendToken(this->MakeToken(TOKEN_TYPE_COMMENT, null, Line, Position, Length As i16))
						}

						Line := this->CurrentLineNumber
						Position := 0
						Length := 0
					}
					
					if (this->AtEnd()) {
						this->AppendToken(0, null, StartingIndex, 2)->Error("Unclosed block comment")
					}
				}
				
				return this->GetNextToken(false)
			}
			
			return this->AppendOperator(OPERATOR_SLASH)
		}
		else if (NextCharacter = '%') {
			return this->AppendOperator(OPERATOR_PERCENT)
		}
		else if (NextCharacter = '.') {
			return this->AppendOperator(OPERATOR_DOT)
		}
		else if (NextCharacter = '<') {
			if (this->NextCharacterMatches('<')) {
				return this->AppendOperator(OPERATOR_LESS_LESS)
			}
			
			return this->AppendOperator(OPERATOR_LESS)
		}
		else if (NextCharacter = '>') {
			if (this->NextCharacterMatches('>')) {
				return this->AppendOperator(OPERATOR_GREATER_GREATER)
			}
			
			return this->AppendOperator(OPERATOR_GREATER)
		}
		else if (NextCharacter = '^') {
			return this->AppendOperator(OPERATOR_XOR)
		}
		else if (NextCharacter = '&') {
			if (this->NextCharacterMatches('&')) {
				return this->AppendOperator(OPERATOR_LOGICAL_AND)
			}
			
			return this->AppendOperator(OPERATOR_AND)
		}
		else if (NextCharacter = '|') {
			if (this->NextCharacterMatches('|')) {
				return this->AppendOperator(OPERATOR_LOGICAL_OR)
			}
			
			return this->AppendOperator(OPERATOR_OR)
		}
		else if (NextCharacter = '!') {
			return this->AppendOperator(OPERATOR_BANG)
		}
		else if (NextCharacter = ':') {
			if (this->NextCharacterMatches(':')) {
				return this->AppendPunctuation(PUNCTUATION_COLON_COLON)
			}

			return this->AppendOperator(OPERATOR_COLON)
		}
		else if (NextCharacter = '(') {
			return this->AppendPunctuation(PUNCTUATION_OPEN_PAREN)
		}
		else if (NextCharacter = ')') {
			return this->AppendPunctuation(PUNCTUATION_CLOSE_PAREN)
		}
		else if (NextCharacter = '{') {
			return this->AppendPunctuation(PUNCTUATION_OPEN_BRACE)
		}
		else if (NextCharacter = '}') {
			return this->AppendPunctuation(PUNCTUATION_CLOSE_BRACE)
		}
		else if (NextCharacter = '[') {
			; `[` Is an operator in order for `Array->A.B[Something]` to parse correctly, since `[` does have
			;  precedence and can't be treated as a regular character
			return this->AppendOperator(OPERATOR_OPEN_BRACKET)
		}
		else if (NextCharacter = ']') {
			return this->AppendPunctuation(PUNCTUATION_CLOSE_BRACKET)
		}
		else if (NextCharacter = ',') {
			return this->AppendPunctuation(PUNCTUATION_COMMA)
		}
		else if (NextCharacter = '@') {
			return this->AppendPunctuation(PUNCTUATION_AT)
		}
		else if (NextCharacter = ''') {
			; If the next character is an open single quote, then consume 1-8 characters as a single integer
			
			i64 LiteralValue := 0
			i8* LiteralValueBytes := &LiteralValue As i8*
			
			for (i32 LiteralIndex := 0, LiteralIndex < 8, LiteralIndex += 1) {
				LiteralValueBytes[LiteralIndex] := this->GetNextCharacterRaw()
				
				if (this->PeekNextCharacter() = ''' || this->AtEnd()) {
					break
				}
			}
			
			NextCharacter := this->GetNextCharacter()
			
			if (NextCharacter != ''') {
				; Make sure there's a closing single quote
				
				this->AppendToken(0, null, StartingIndex, 1)->Error("Expected close single quote for character constant")
			}
			
			return this->AppendToken(TOKEN_TYPE_INTEGER, LiteralValue)
		}
		else if (NextCharacter = '"') {
			; When tokenizing a string, first we need to find the bounds of the string so we can extract it
			;  from the source, and process any escape sequences
			
			i32 Length := 0
			
			while !(this->AtEnd()) {
				NextCharacter := this->GetNextCharacter()
				
				Length += 1
				
				if (NextCharacter = '\') {
					; If we find an escaped character, just skip over it
					
					this->GetNextCharacter()
					Length += 1
				}
				else if (NextCharacter = '"') {
					; If we find a unescaped quote, we've found the end of the string
					
					break
				}
			}
			
			if (this->AtEnd() && NextCharacter != '"') {
				; If we're at EOF, then this string is missing a close quote
				
				this->AppendToken(0, null, StartingIndex, 1)->Error("Expected close quote before EOF")
			}
			
			; Allow the `r`, `w`, and `rw` suffixes to mark a string as:
			;  raw, wide characters, or both
			i8 SkipEscapes := this->NextCharacterMatches('r')
			i8 WideCharacters := this->NextCharacterMatches('w')
			
			; Since `GetString` returns a sort-of slice out of the original source string
			;  we need to clone it before actually replacing any escape sequences, otherwise
			;   error printouts would show strings after they are escaped
			SafeString* ConstantStringLiteral := this->GetString(StartingIndex + 1)
			
			; Since `this->SourceIndex` is used in `GetString` to determine the length of the
			;  string, we need to correct the length to not include the closing quote, and any suffixes
			;   (this could have been passed directly to `GetString`, but it would have made the line too long)
			
			ConstantStringLiteral->Length -= 1 + SkipEscapes + WideCharacters
			
			SafeString* StringLiteral := ConstantStringLiteral->Clone()
			
			ConstantStringLiteral->Free()
			
			; Only actually replace escape sequences when we're not working with a raw string
			
			if !(SkipEscapes) {
				; First, we need to use the line ending option to decide if `\n` is actually
				;  `\r\n` or just `\n`
				
				i16 NewLine := 0x0A
				i32 NewLineLength := 1
				
				if (this->Config->LineEnding = LINE_ENDING_CRLF) {
					NewLine := 0x0A0D
					NewLineLength := 2				
				}
				
				i8* NewLineString := &NewLine As i8*
				
				; Now we can go through each character, and replace escape sequences
				
				for (i32 StringIndex := 0, StringIndex < StringLiteral->Length, StringIndex += 1) {
					NextCharacter := StringLiteral->ASCIICharacterAt(StringIndex)
					
					if (NextCharacter = '\') {
						i8 EscapeCharacter := StringLiteral->ASCIICharacterAt(StringIndex + 1)
						
						i8* Replacement := &EscapeCharacter
						i32 ReplacementLength := 1
						
						if (EscapeCharacter = 'n') {
							Replacement := NewLineString
							ReplacementLength := NewLineLength
						}
						else if (EscapeCharacter = 'e') {
							Replacement := i8[0x1B]
						}
						else if (EscapeCharacter = 't') {
							Replacement := "	"
						}
						
						StringLiteral->Replace(StringIndex, 2, Replacement, ReplacementLength)
					}
				}
				
				; Since `StringLiteral->Replace` will modify `StringLiteral` itself, the `MakeToken` call
				;  below will make a token containing the escaped string
			}
			
			; Return the string as a TOKEN_TYPE_STRING 
			;  (or TOKEN_TYPE_WIDE_STRING depending on the `w` suffix)
			return this->AppendToken(TOKEN_TYPE_STRING + WideCharacters, StringLiteral)
		}
		else if (IsNumeric(NextCharacter)) {
			return this->AppendToken(TOKEN_TYPE_INTEGER, this->ProcessNumber(StartingIndex))
		}
		else if (IsAlpha(NextCharacter) || NextCharacter = '_') {
			if (NextCharacter = 'a') {
				if (this->GetNextCharacter() = 's' && IsWhiteSpace(this->PeekNextCharacter())) {
					return this->AppendOperator(OPERATOR_AS)
				}
				
				this->Backtrack()
			}
			
			while (IsIdentifier(NextCharacter) && !this->AtEnd()) {
				NextCharacter := this->GetNextCharacter()
			}
			
			if !(IsIdentifier(NextCharacter)) {
				this->Backtrack()
			}
			
			/* Gather all alphanumeric characters in a row */
			
			SafeString* TokenText := this->GetString(StartingIndex)
			
			i8 FoundKeyword := this->LookupKeyword(TokenText)
			
			if (FoundKeyword != KEYWORD_NONE) {
				/* If the characters make up a keyword, then free the string and make the keyword token */
				TokenText->Free()
				
				return this->AppendToken(TOKEN_TYPE_KEYWORD, FoundKeyword)
			}
			else {
				/* Otherwise, make an identifier token */
				return this->AppendToken(TOKEN_TYPE_IDENTIFIER, TokenText)
			}
		}
		else if (NextCharacter = '`') {
			i32 Start := this->SourceIndex

			while !(this->AtEnd()) {
				if (this->NextCharacterMatches('`')) {
					break
				}

				NextCharacter := this->GetNextCharacter()
			}

			if (this->AtEnd() && NextCharacter != '`') {
				this->AppendToken(0, null, StartingIndex, 1)->Error("Expected close tilde before EOF")
			}

			SafeString* TokenText := this->GetString(Start, this->SourceIndex - 1)
			
			return this->AppendToken(TOKEN_TYPE_IDENTIFIER, TokenText)
		}
		else if (NextCharacter = '#' && IsAlphaNumeric(this->PeekNextCharacter())) {
			NextCharacter := this->PeekNextCharacter()
			
			while (IsAlphaNumeric(NextCharacter) && !this->AtEnd()) {
				NextCharacter := this->GetNextCharacter()
			}

			if !(this->AtEnd()) {
				this->Backtrack()
			}
			
			SafeString* DirectiveText := this->GetString(StartingIndex + 1)
			
			i8 IsRequire := DirectiveText->Equals("require")
			i8 IsInclude := DirectiveText->Equals("include")

			i8 IsImageBase := DirectiveText->Equals("ImageBase")
			
			if (IsRequire || IsInclude) {
				if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
					this->AppendToken(TOKEN_TYPE_DIRECTIVE, null)
				}

				StartingIndex := this->SourceIndex + 1

				; Includes leading/trailing quote
				i32 PathStartingIndex := StartingIndex
				
				this->GetNextCharacter()

				if !(this->NextCharacterMatches('"')) {
					this->AppendToken(0, null, StartingIndex, 1)->Error("Expected open quote for path")
				}
				
				StartingIndex += 1

				i8 IsLibraryInclude := false
				i8 IsPlatformInclude := false
				
				if (this->NextCharacterMatches('$')) {
					; Allow a single $ before a file name as a way to include files
					;  from the compiler's `src/lib/` directory instead of shipping
					;   a copy of the standard library with every project.
					
					IsLibraryInclude := true
				}
				else if (this->NextCharacterMatches('@')) {
					; Same as above, but to do a platform-relative include

					IsPlatformInclude := true
				}

				NextCharacter := this->PeekNextCharacter()
				
				while (IsPath(NextCharacter, true) && !this->AtEnd()) {
					NextCharacter := this->GetNextCharacter()
				}
				
				if !(this->AtEnd()) {
					this->Backtrack()
				}
				
				SafeString* IncludePath := this->GetString(StartingIndex)
				
				if !(this->NextCharacterMatches('"')) {
					this->AppendToken(0, null, StartingIndex, 1)->Error("Expected closing quote for include/require path.")
				}

				if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
					this->AppendToken(this->MakeToken(TOKEN_TYPE_SYNTHETIC_STRING, null, PathStartingIndex))
				}

				SourceContext IncludePathBlame {
					Lexer: this,
					LineNumber: this->CurrentLineNumber,
					PositionInSource: PathStartingIndex,
					LengthInSource: (this->SourceIndex - PathStartingIndex) As i16
				}
				
				i8* IncludePathBuffer := IncludePath->Buffer
				
				if (IsLibraryInclude) {
					; $Path => $COMPILER_DIR/src/lib/Path
					
					i32 LibraryDirectoryPathLength := StringLength(this->Config->LibraryDirectory)
					
					IncludePathBuffer := Alloc(LibraryDirectoryPathLength + IncludePath->Length)
					
					MoveMemory(IncludePathBuffer, this->Config->LibraryDirectory, LibraryDirectoryPathLength)
					MoveMemory(IncludePathBuffer + LibraryDirectoryPathLength, IncludePath->Buffer + 1, IncludePath->Length - 1)
				}
				else if (IsPlatformInclude) {
					; $Path => $COMPILER_DIR/src/lib/$PLATFORM/Path

					if !(this->Config->PlatformName) {
						IncludePathBlame.Error("Can't use platform relative include without specifying a platform")
					}

					i32 Size := FormatLength("%s%s", this->Config->PlatformDirectory, IncludePath->Buffer + 1)
					IncludePathBuffer := Alloc(Size + 1)

					FormatString(IncludePathBuffer, Size, "%s%s", this->Config->PlatformDirectory, IncludePath->Buffer + 1)
				}
				
				i8* AbsoluteIncludePath := GetAbsolutePath(IncludePathBuffer)

				;Print("Expanded '%s' to '%s'\n", IncludePath->Buffer, AbsoluteIncludePath)

				if (IsLibraryInclude || IsPlatformInclude) {
					Free(IncludePathBuffer)
				}
				
				if (IsRequire) {
					if (this->Config->HasIncludedPath(AbsoluteIncludePath)) {
						IncludePath->Free()

						return this->GetNextToken(false)
					}
				}
				
				this->Config->DefineIncludedPath(AbsoluteIncludePath, AbsoluteIncludePath)
				this->Config->DefineIncludedPath(IncludePath, AbsoluteIncludePath)
				
				if !(this->Config->DumpInfo & DUMP_SILENT) {
					Print("Including file: '")
					IncludePath->Print()
					Print("'\n")
				}
				
				i32 IncludeFileSize := 0
				i8* IncludeFileText := OpenAndRead(AbsoluteIncludePath, &IncludeFileSize, &IncludePathBlame)
				
				this->Child := LexerState:New(this, IncludeFileText, IncludeFileSize, IncludePath)
				this->Child->IncludedAtLine := this->CurrentLineNumber
				
				return this->GetNextToken(false)
			}
			else if (IsImageBase || DirectiveText->Equals("PhysicalImageBase")) {
				if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
					this->AppendToken(TOKEN_TYPE_DIRECTIVE, null)
				}
				
				if !(IsWhiteSpace(this->GetNextCharacter())) {
					Print("Expected whitespace after #ImageBase.")
					Exit(1)
				}

				i32 Start := this->SourceIndex
				
				this->GetNextCharacter()
				
				if (IsImageBase) {
					this->Config->ImageBase := this->ProcessNumber(this->SourceIndex - 1)
				}
				else {
					this->Config->PhysicalImageBase := this->ProcessNumber(this->SourceIndex - 1)
				}

				if (this->Config->DumpInfo & DUMP_SYNTHETIC_TOKENS) {
					this->AppendToken(this->MakeToken(TOKEN_TYPE_SYNTHETIC_INTEGER, null, Start))
				}
				
				return this->GetNextToken(false)
			}
			else {
				this->SourceIndex := StartingIndex + 1
				
				return this->AppendOperator(OPERATOR_POUND)
			}
		}
		else if (NextCharacter = '#') {
			return this->AppendOperator(OPERATOR_POUND)
		}
		else if (NextCharacter = 0 || IsWhiteSpace(NextCharacter)) {
			/* Ignore null characters and whitespace */
			
			return this->GetNextToken(false)
		}
		else {
			this->AppendToken(0, null, StartingIndex, 1)->Error("Unexpected character")
			return null
		}
	}
	
	
	define i32 Freeze() {
		return this->TokenIndex
	}
	define void Unfreeze(i32 FrozenState) {
		this->TokenIndex := FrozenState
	}
	define Token* GetCurrentToken() {
		if (this->TokenIndex > 0) {
			this->TokenIndex -= 1
		}
		
		return this->GetNextToken()
	}
	define SourceContext* GetCurrentTokenContext() {
		return this->GetCurrentToken()~>Context
	}
	define Token* PeekNextToken() {
		i32 Before := this->Freeze()
		
		Token* Result := this->GetNextToken()
		
		this->Unfreeze(Before)
		
		return Result
	}
	define i8 NextTokenMatches(i8 TokenType, i64 TokenValue) {
		if (this->PeekNextToken()->Is(TokenType, TokenValue)) {
			this->GetNextToken()
			
			return true
		}
		
		return false
	}
	define i8 NextTokenMatches(i8 TokenType) {
		if (this->PeekNextToken()->Is(TokenType)) {
			this->GetNextToken()
			
			return true
		}
		
		return false
	}
	define Token* TryConsume(i8 TokenType, i64 TokenValue, i8* Reason, i8** ErrorMessage) {
		Token* NextToken := this->GetNextToken()
		
		if (NextToken->Is(TOKEN_TYPE_EOF, 0)) {
			*ErrorMessage := "Unexpected end of file"
		}
		else if !(NextToken->Is(TokenType, TokenValue)) {
			*ErrorMessage := Reason
		}
		
		return NextToken
	}
	define Token* TryConsume(i8 TokenType, i8* Reason, i8** ErrorMessage) {
		return this->TryConsume(TokenType, 0, Reason, ErrorMessage)
	}
	define Token* Consume(i8 TokenType, i64 TokenValue, i8* Reason) {
		i8* ErrorMessage := null
		
		Token* Result := this->TryConsume(TokenType, TokenValue, Reason, &ErrorMessage)
		
		if (ErrorMessage) {
			Result->Error(ErrorMessage)
		}
		
		return Result
	}
	define Token* Consume(i8 TokenType, i8* Reason) {
		return this->Consume(TokenType, 0, Reason)
	}

	define void Free() {
		for (i32 Index := 0, Index < this->MaxTokenIndex, Index++) {
			this->Tokens[Index]->Free()
		}

		Free(this->Tokens)

		this~>Keywords->Free()

		Free(this)
	}
}
