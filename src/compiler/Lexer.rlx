struct Token {
	ErrorContext Context,
	
	union {
		void* Value,
		SafeWideString* StringValue
	},
	
	i8 Type
}

struct TokenizerState {
	SafeWideString* SourceFilePath,
	i16* Source,
	i32 SourceIndex,
	i32 SourceLength,
	
	Token** Tokens,
	i32 TokenIndex,
	i32 MaxTokenIndex,
	i32 CurrentLineNumber,
	i16 CurrentLineStart,
	i32 TokenCapacity
}

declare i8 LookupKeyword(SafeWideString*)

define TokenizerState* NewTokenizer(SafeWideString* SourceFilePath, i16* Source, i32 SourceLength) {
	TokenizerState* NewState := Alloc(#TokenizerState) As TokenizerState*
	
	NewState->SourceFilePath := SourceFilePath
	NewState->Source := Source
	NewState->SourceLength := SourceLength
	
	NewState->Tokens := Alloc(8 * 300) As Token**
	
	NewState->SourceIndex := 0
	NewState->TokenIndex := 0
	NewState->MaxTokenIndex := 0
	NewState->CurrentLineNumber := 1
	
	return NewState
}

define Token* PushToken(TokenizerState* tState, void* Value, i16* Source, i32 PositionInSource, i32 LengthInSource, i8 Type) {
	/* Ensure the token buffer has space for another token */
	
	if (tState->MaxTokenIndex >= tState->TokenCapacity) {
		tState->TokenCapacity += 300
		
		tState->Tokens := ReAlloc(tState->Tokens, 8 * (tState->TokenCapacity)) As Token**
	}
	
	i32 Index := tState->MaxTokenIndex
	
	Token* OutputToken := Alloc(#Token) As Token*
	
	/* Insert the token into the token list */
	(tState->Tokens)[Index] := OutputToken
	
	tState->MaxTokenIndex += 1
	
	/* Populate the token */
	OutputToken->Type := Type
	OutputToken->Value := Value
	
	OutputToken->Context.SourceFilePath := tState->SourceFilePath
	OutputToken->Context.LineNumber := tState->CurrentLineNumber
	OutputToken->Context.Source := Source
	OutputToken->Context.PositionInSource := PositionInSource
	OutputToken->Context.LengthInSource := LengthInSource
	
	return OutputToken
}
define Token* MakeToken(TokenizerState* tState, i32 PositionInSource, i8 Type, void* Value) {
	return PushToken(tState, Value, tState->Source, PositionInSource, (tState->SourceIndex) - PositionInSource, Type)
}

define void* MakeSafeStringToken(TokenizerState* tState, i32 StartingIndex) {
	/* Makes a SafeWideString from tState and returns it as a void* to fit into Token->Value */
	
	SafeWideString* NewSafeString := AllocateNewSafeString()

	NewSafeString->Length := tState->SourceIndex - StartingIndex
	NewSafeString->Buffer := tState->Source + (StartingIndex * 2)

	return NewSafeString As void*
}

i8 TOKEN_TYPE_EOF := 0
i8 TOKEN_TYPE_NONE := 100
i8 TOKEN_TYPE_OPERATOR := 1
i8 TOKEN_TYPE_IDENTIFER := 2
i8 TOKEN_TYPE_INTEGER := 3
i8 TOKEN_TYPE_STRING := 4
i8 TOKEN_TYPE_PUNCTUATION := 5
i8 TOKEN_TYPE_KEYWORD := 6
i8 TOKEN_TYPE_DEBUG_CHARACTER := 7


i8 OPERATOR_FIRST_ASSIGNMENT := 0
i8 PRECEDENCE_1 := 0
	i8 OPERATOR_COLON_EQUAL := 0
	i8 OPERATOR_PLUS_EQUAL := 1
	i8 OPERATOR_MINUS_EQUAL := 2
	i8 OPERATOR_STAR_EQUAL := 3
i8 OPERATOR_LAST_ASSIGNMENT := 3

i8 PRECEDENCE_2 := 4
i8 OPERATOR_FIRST_SHORT_CIRCUIT := 4
	i8 OPERATOR_LOGICAL_AND := 4
	i8 OPERATOR_LOGICAL_OR := 5
i8 OPERATOR_LAST_SHORT_CIRCUIT := 5

i8 PRECEDENCE_3 := 6
i8 OPERATOR_FIRST_COMPARISON := 6
	i8 OPERATOR_EQUAL := 6
	i8 OPERATOR_BANG_EQUAL := 7
	i8 OPERATOR_LESS := 8
	i8 OPERATOR_LESS_EQAUL := 9
	i8 OPERATOR_GREATER := 10
	i8 OPERATOR_GREATER_EQAUL := 11
i8 OPERATOR_LAST_COMPARISON := 11

/* Precedence level 4 is for prefix operators &/*. */

i8 PRECEDENCE_5 := 12
i8 OPERATOR_AS := 12

i8 PRECEDENCE_6 := 13
i8 OPERATOR_PLUS := 13
i8 OPERATOR_MINUS := 14

i8 PRECEDENCE_7 := 15
i8 OPERATOR_STAR := 15
i8 OPERATOR_SLASH := 16
i8 OPERATOR_PERCENT := 17
i8 OPERATOR_LESS_LESS := 18
i8 OPERATOR_GREATER_GREATER := 19

i8 PRECEDENCE_8 := 20
i8 OPERATOR_AND := 20
i8 OPERATOR_OR := 21
i8 OPERATOR_XOR := 22

/* Precedence level 9 is for prefix operators !-~ */

i8 PRECEDENCE_9 := 23
i8 OPERATOR_BANG := 23
i8 OPERATOR_TILDE := 24

i8 PRECEDENCE_10 := 25
i8 OPERATOR_OPEN_BRACKET := 25

i8 PRECEDENCE_11 := 26
i8 OPERATOR_DOT := 26
i8 OPERATOR_MINUS_GREATER := 27
i8 OPERATOR_TILDE_GREATER := 28


i8 OPERATOR_COLON := 29
i8 OPERATOR_POUND := 30


i8 PUNCTUATION_OPEN_PAREN := 0
i8 PUNCTUATION_CLOSE_PAREN := 1

i8 PUNCTUATION_OPEN_BRACE := 2
i8 PUNCTUATION_CLOSE_BRACE := 3

i8 PUNCTUATION_CLOSE_BRACKET := 4

i8 PUNCTUATION_COMMA := 5


i8 KEYWORD_DECLARE := 0
i8 KEYWORD_DEFINE := 1
i8 KEYWORD_DLLIMPORT := 2

i8 KEYWORD_IF := 3
i8 KEYWORD_ELSE := 4

i8 KEYWORD_FOR := 5
i8 KEYWORD_WHILE := 6
i8 KEYWORD_LOOP := 7

i8 KEYWORD_CONTINUE := 8
i8 KEYWORD_BREAK := 9

i8 KEYWORD_STRUCT := 10
i8 KEYWORD_UNION := 11
i8 KEYWORD_BITS := 12
i8 KEYWORD_UNALIGNED := 13

i8 KEYWORD_RETURN := 14

i8 KEYWORD_WINDOWS := 15
i8 KEYWORD_LINUX := 16


/* Both the Token and ASTNode struct have the same first 2 fields as ErrorContext, making them safe to cast down to
	ErrorContext for PrintErrorHeader calls.
 */

define void Error(Token* AtToken, i8* Message) {
	SwapOutputStream()
	
	PrettyError(AtToken As ErrorContext*, Message, Red | Bright)
	Exit(1)
}

define void TokenError(Token* AtToken, i8* Message) {
	ContextError(AtToken~>Context, Message)
}

define i16 PeekNextCharacter(TokenizerState* tState) {
	return Lower((tState->Source)[tState->SourceIndex])
}
define void Backtrack(TokenizerState* tState) {
	i16 ThisCharacter := PeekNextCharacter(tState)
	
	tState->SourceIndex -= 1
	
	i32 LastCharacter := PeekNextCharacter(tState)
	
	if (LastCharacter = 13 && ThisCharacter = 10) {
		tState->CurrentLineNumber -= 1
	}
}
define i16 GetNextCharacter(TokenizerState* tState) {
	i16 NextCharacter := PeekNextCharacter(tState)
	tState->SourceIndex += 1
	
	if (NextCharacter = 13 && PeekNextCharacter(tState) = 10) {
		tState->CurrentLineNumber += 1
	}
	
	return NextCharacter
}
define i16 GetNextCharacterRaw(TokenizerState* tState) {
	i16 Result := (tState->Source)[tState->SourceIndex]
	
	GetNextCharacter(tState)
	
	return Result
}
define i8 NextCharacterMatches(TokenizerState* tState, i8 CharacterToCheck) {
	if (PeekNextCharacter(tState) = CharacterToCheck) {
		GetNextCharacter(tState)
		return 1
	}
	
	return 0
}

define void TokenizerError(TokenizerState* tState, i8* Message) {
	Backtrack(tState)
	
	Error(tState->Tokens[tState->TokenIndex - 1], Message)
}

define i8 TokenizerAtEnd(TokenizerState* tState) {
	return (tState->SourceIndex) > (tState->SourceLength)
}

define Token* GetNextToken(TokenizerState* tState) {
	/* Gathers a single token, and sets/returns CurrentToken */
	
	i32 Index := tState->TokenIndex
	tState->TokenIndex += 1
	
	if (Index < tState->MaxTokenIndex) {
		/* If we already have a token in the token list for this index, return it instead */
		
		/* 
			AWrite("Found cached version of token[")
			IWrite(Index)
			AWrite("] @")
			IWriteLine(((tState->Tokens)[Index]) as i64)
		 */
		
		return (tState->Tokens)[Index]
	}
	
	while (!TokenizerAtEnd(tState)) {
		i32 StartingIndex := tState->SourceIndex
		i16 NextCharacter := GetNextCharacter(tState)

		if (PeekNextCharacter(tState) = '=') {
			/* If the next character is '=', check for the X= operators first */
			
			GetNextCharacter(tState)
			
			i8 NewType := TOKEN_TYPE_NONE
			
			if (NextCharacter = ':') {
				NewType := OPERATOR_COLON_EQUAL
			}
			else if (NextCharacter = '+') {
				NewType := OPERATOR_PLUS_EQUAL
			}
			else if (NextCharacter = '-') {
				NewType := OPERATOR_MINUS_EQUAL
			}
			else if (NextCharacter = '*') {
				NewType := OPERATOR_STAR_EQUAL
			}
			else if (NextCharacter = '<') {
				NewType := OPERATOR_LESS_EQAUL
			}
			else if (NextCharacter = '>') {
				NewType := OPERATOR_GREATER_EQAUL
			}
			else if (NextCharacter = '!') {
				NewType := OPERATOR_BANG_EQUAL
			}
			else {
				/* If we didn't match and X= operator, backtrack and continue like normal */
				Backtrack(tState)
			}
			
			if (NewType != TOKEN_TYPE_NONE) {
				/* But if we did match an X=, return the matched operator */
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, NewType)
			}
		}
		
		if (NextCharacter = ''') {
			/* If the next character is an open single quote, then consume a single character as an integer */
			
			i8 NextNextCharacter := GetNextCharacterRaw(tState)
			
			if (GetNextCharacter(tState) != ''') {
				/* And make sure there's a close single quote */
				MakeToken(tState, StartingIndex, TOKEN_TYPE_DEBUG_CHARACTER, NextCharacter)
				TokenizerError(tState, "Expected close single quote for character constant")
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_INTEGER, NextNextCharacter)
		}
		else if (NextCharacter = '=') {
			/* Manually compare for all of the operators */
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_EQUAL)
		}
		else if (NextCharacter = '+') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_PLUS)
		}
		else if (NextCharacter = '-') {
			if (NextCharacterMatches(tState, '>')) {
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_MINUS_GREATER)
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_MINUS)
		}
		else if (NextCharacter = '~') {
			if (NextCharacterMatches(tState, '>')) {
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_TILDE_GREATER)
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_TILDE)
		}
		else if (NextCharacter = '*') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_STAR)
		}
		else if (NextCharacter = '/') {
			if (NextCharacterMatches(tState, '*')) {
				loop {
					NextCharacter := GetNextCharacter(tState)
					
					if (NextCharacter = '*' && PeekNextCharacter(tState) = '/') {
						GetNextCharacter(tState)
						break
					}
					
					if (TokenizerAtEnd(tState)) {
						MakeToken(tState, StartingIndex, TOKEN_TYPE_DEBUG_CHARACTER, '/')
						TokenizerError(tState, "Expected closing comment character")
					}
				}
				
				continue
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_SLASH)
		}
		else if (NextCharacter = '%') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_PERCENT)
		}
		else if (NextCharacter = '.') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_DOT)
		}
		else if (NextCharacter = '<') {
			if (NextCharacterMatches(tState, '<')) {
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_LESS_LESS)
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_LESS)
		}
		else if (NextCharacter = '>') {
			if (NextCharacterMatches(tState, '>')) {
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_GREATER_GREATER)
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_GREATER)
		}
		else if (NextCharacter = '^') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_XOR)
		}
		else if (NextCharacter = '&') {
			if (NextCharacterMatches(tState, '&')) {
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_LOGICAL_AND)
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_AND)
		}
		else if (NextCharacter = '|') {
			if (NextCharacterMatches(tState, '|')) {
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_LOGICAL_OR)
			}
			
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_OR)
		}
		else if (NextCharacter = '!') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_BANG)
		}
		else if (NextCharacter = ':') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_COLON)
		}
		else if (NextCharacter = '(') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_PUNCTUATION, PUNCTUATION_OPEN_PAREN)
		}
		else if (NextCharacter = ')') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_PUNCTUATION, PUNCTUATION_CLOSE_PAREN)
		}
		else if (NextCharacter = '{') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_PUNCTUATION, PUNCTUATION_OPEN_BRACE)
		}
		else if (NextCharacter = '}') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_PUNCTUATION, PUNCTUATION_CLOSE_BRACE)
		}
		else if (NextCharacter = '[') {
			/* [ Is an operator in order for Array->A.B[Something] to parse correctly */
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_OPEN_BRACKET)
		}
		else if (NextCharacter = ']') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_PUNCTUATION, PUNCTUATION_CLOSE_BRACKET)
		}
		else if (NextCharacter = ',') {
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_PUNCTUATION, PUNCTUATION_COMMA)
		}
		else if (NextCharacter = '"') {
			NextCharacter := 0
			
			/* Consume all characters in the string */
			
			while ((NextCharacter != '"') && (!TokenizerAtEnd(tState))) {
				NextCharacter := GetNextCharacter(tState)
			}
			
			if (TokenizerAtEnd(tState)) {
				MakeToken(tState, StartingIndex, TOKEN_TYPE_DEBUG_CHARACTER, '"')
				TokenizerError(tState, "Expected close quote before EOF")
			}
			
			SafeWideString* FoundString := MakeSafeStringToken(tState, StartingIndex + 1) As SafeWideString*
			FoundString->Length -= 1
			
			/* And return the string as a TOKEN_TYPE_STRING */
			return MakeToken(tState, StartingIndex, TOKEN_TYPE_STRING, FoundString As void*)
		}
		else if (IsNumeric(NextCharacter)) {
			i8 NumberIsHex := false
			
			if (NextCharacterMatches(tState, 'x')) {
				/* If NextCharacter = 0 and Next-NextCharacter = 'x' */
				NumberIsHex := true
				
				NextCharacter := PeekNextCharacter(tState)
				
				/* Gather all hex characters */
				while (IsHex(NextCharacter) && (!TokenizerAtEnd(tState))) {
					NextCharacter := GetNextCharacter(tState)
				}
			}
			else {
				/* Number is not hex, gather all decimal characters */
				
				while (IsNumeric(NextCharacter) && (!TokenizerAtEnd(tState))) {
					NextCharacter := GetNextCharacter(tState)
				}
			}
			
			if !(TokenizerAtEnd(tState)) {
				Backtrack(tState)
			}
			
			/* Convert the number to string which we can then parse into a number */
			SafeWideString* AsString := (MakeSafeStringToken(tState, StartingIndex + (NumberIsHex * 2)) As SafeWideString*)
			i8 NumberWasConverted := 0
			
			/* Set up a result token */
			Token* ResultToken := MakeToken(tState, StartingIndex, TOKEN_TYPE_INTEGER, 0)
			
			/* Convert the hex/decimal number, and store the result in the token */
			if (NumberIsHex) {
				ResultToken->Value := SafeStringHexToI64(AsString, &NumberWasConverted)
			}
			else {
				ResultToken->Value := SafeStringToI64(AsString, &NumberWasConverted)
			}
			
			FreeSafeString(AsString)
			
			return ResultToken
		}
		else if (IsAlpha(NextCharacter) || NextCharacter = '_') {
			if (NextCharacter = 'a') {
				if (GetNextCharacter(tState) = 's' && IsWhiteSpace(PeekNextCharacter(tState))) {
					return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_AS)
				}
				
				Backtrack(tState)
			}
			
			while (IsAlphaNumeric(NextCharacter)) {
				if (TokenizerAtEnd(tState)) {
					break
				}
				
				NextCharacter := GetNextCharacter(tState)
			}
			
			if !(TokenizerAtEnd(tState)) {
				Backtrack(tState)
			}
			
			/* Gather all alphanumeric characters in a row */
			
			SafeWideString* TokenText := MakeSafeStringToken(tState, StartingIndex) As SafeWideString*
			
			i8 TokenAsKeyword := LookupKeyword(TokenText)
			
			if (TokenAsKeyword != TOKEN_TYPE_NONE) {
				/* If the characters make up a keyword, then free the string and make the keyword token */
				FreeSafeString(TokenText)
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_KEYWORD, TokenAsKeyword)
			}
			else {
				/* Otherwise, make an identifier token */
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_IDENTIFER, TokenText As void*)
			}
		}
		else if (NextCharacter = '#') {
			NextCharacter := PeekNextCharacter(tState)
			
			while (IsAlphaNumeric(NextCharacter) && (!TokenizerAtEnd(tState))) {
				NextCharacter := GetNextCharacter(tState)
			}

			if !(TokenizerAtEnd(tState)) {
				Backtrack(tState)
			}
			
			SafeWideString* DirectiveText := MakeSafeStringToken(tState, StartingIndex + 1) As SafeWideString*
			
			if (SafeStringEqualsAString(DirectiveText, "include")) {
				StartingIndex := tState->SourceIndex
				
				if !(IsWhiteSpace(GetNextCharacter(tState))) {
					AWriteLine("Fuck off")
					Exit(1)
				}
				
				StartingIndex += 1
				
				NextCharacter := PeekNextCharacter(tState)
				
				while (IsPath(NextCharacter)) {
					NextCharacter := GetNextCharacter(tState)
				}
				
				if !(TokenizerAtEnd(tState)) {
					Backtrack(tState)
				}
				
				SafeWideString* IncludePath := MakeSafeStringToken(tState, StartingIndex) As SafeWideString*
				
				AWrite("Including file: ")
				PrintSafeString(IncludePath)
				WriteNewLine()
				
				i32 EndIndex := IncludePath->Length
				i16 OldFollowingCharacter := (IncludePath->Buffer)[EndIndex]
				
				(IncludePath->Buffer)[EndIndex] := 0 /* Insert a null terminator into the source */
				
				i32 IncludeFileSize := 0
				i16* IncludeFileText := OpenAndRead(WToA(IncludePath->Buffer), &IncludeFileSize)
				
				(IncludePath->Buffer)[EndIndex] := OldFollowingCharacter /* Restore the old character */
				
				TokenizerState* IncludeTokenizer := NewTokenizer(IncludePath, IncludeFileText, IncludeFileSize)
				
				loop {
					Token* NextIncludeToken := GetNextToken(IncludeTokenizer)
					
					if (NextIncludeToken->Type = TOKEN_TYPE_EOF) {
						break
					}
					
					Token* IncludeToken := PushToken(tState, NextIncludeToken->Value, 0 As i16*, 0, 0, NextIncludeToken->Type)
					CopyContext(NextIncludeToken~>Context, IncludeToken~>Context)
				}
				
				AWriteLine("Done including file")
				
				tState->TokenIndex -= 1
				
				return GetNextToken(tState)
			}
			else {
				tState->SourceIndex := StartingIndex + 1
				
				return MakeToken(tState, StartingIndex, TOKEN_TYPE_OPERATOR, OPERATOR_POUND)
			}
		}
		else if (NextCharacter = 0 || IsWhiteSpace(NextCharacter)) {
			/* Ignore null characters and whitespace */
			
			
			continue
		}
		else {
			Token* ErrorToken := MakeToken(tState, StartingIndex, TOKEN_TYPE_DEBUG_CHARACTER, NextCharacter)
			Error(ErrorToken, "Unexpected character")
		}
	}
	
	return MakeToken(tState, tState->SourceLength, TOKEN_TYPE_EOF, 0)
}

/* 
	Token printing helpers
*/

define i8 LookupKeyword(SafeWideString* PotentialKeyword) {
	/* Converts PotentialKeyword into a KEYWORD_ constant */
	
	if (SafeStringEqualsAString(PotentialKeyword, "declare")) {
		return KEYWORD_DECLARE
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "define")) {
		return KEYWORD_DEFINE
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "dllimport")) {
		return KEYWORD_DLLIMPORT
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "if")) {
		return KEYWORD_IF
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "else")) {
		return KEYWORD_ELSE
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "for")) {
		return KEYWORD_FOR
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "while")) {
		return KEYWORD_WHILE
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "loop")) {
		return KEYWORD_LOOP
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "continue")) {
		return KEYWORD_CONTINUE
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "break")) {
		return KEYWORD_BREAK
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "struct")) {
		return KEYWORD_STRUCT
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "return")) {
		return KEYWORD_RETURN
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "union")) {
		return KEYWORD_UNION
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "bits")) {
		return KEYWORD_BITS
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "unaligned")) {
		return KEYWORD_UNALIGNED
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "windows")) {
		return KEYWORD_WINDOWS
	}
	else if (SafeStringEqualsAString(PotentialKeyword, "linux")) {
		return KEYWORD_LINUX
	}
	
	return TOKEN_TYPE_NONE
}

/*

define void PrintToken(Token* TokenToPrint) {
	if (TokenToPrint->Type = TOKEN_TYPE_IDENTIFER) {
		PrintSafeString((TokenToPrint->Value) As SafeWideString*)
	}
	else if (TokenToPrint->Type = TOKEN_TYPE_STRING) {
		WriteCharacter('"')
		PrintSafeString((TokenToPrint->Value) As SafeWideString*)
		WriteCharacter('"')
	}
	else if (TokenToPrint->Type = TOKEN_TYPE_OPERATOR) {
		PrintOperator(TokenToPrint->Value As i8)
	}
	else if (TokenToPrint->Type = TOKEN_TYPE_PUNCTUATION) {
		PrintPunctuation(TokenToPrint->Value As i8)
	}
	else if (TokenToPrint->Type = TOKEN_TYPE_KEYWORD) {
		PrintKeyword(TokenToPrint->Value As i8)
	}
	else if (TokenToPrint->Type = TOKEN_TYPE_EOF) {
		AWrite("<EOF>")
	}
	else if (TokenToPrint->Type = TOKEN_TYPE_DEBUG_CHARACTER) {
		WriteCharacter(TokenToPrint->Value As i8)
	}
	else {
		IWrite(TokenToPrint->Value)
	}
}

define void PrintOperator(i8 Operator) {
	i8* Operators := ":= += -= *= && || =  != <  <= >  >= As +  -  *  /  %  << >> &  |  ^  !  ~  [  .  -> ~> :  #  "
	
	i8* ThisOperator := Operators + (Operator * 3)
	
	if (ThisOperator[1] = ' ') {
		ThisOperator[1] := 0
	}
	else {
		ThisOperator[2] := 0
	}
	
	AWrite(ThisOperator)
}

define void PrintPunctuation(i8 Punctuation) {
	
	WriteCharacter("(){}],"[Punctuation])
	
	if (Punctuation = PUNCTUATION_OPEN_PAREN) {
		Character := '('
	}
	else if (Punctuation = PUNCTUATION_CLOSE_PAREN) {
		Character := ')'
	}
	else if (Punctuation = PUNCTUATION_OPEN_BRACE) {
		Character := '{'
	}
	else if (Punctuation = PUNCTUATION_CLOSE_BRACE) {
		Character := '}'
	}
	else if (Punctuation = PUNCTUATION_CLOSE_BRACKET) {
		Character := ']'
	}
	else if (Punctuation = PUNCTUATION_COMMA) {
		Character := ','
	}
	
	WriteCharacter(Character)
}

define void PrintKeyword(i8 Keyword) {
	if (Keyword = KEYWORD_DECLARE) {
		AWrite("declare")
	}
	else if (Keyword = KEYWORD_DEFINE) {
		AWrite("define")
	}
	else if (Keyword = KEYWORD_DLLIMPORT) {
		AWrite("DllImport")
	}
	else if (Keyword = KEYWORD_IF) {
		AWrite("if")
	}
	else if (Keyword = KEYWORD_ELSE) {
		AWrite("else")
	}
	else if (Keyword = KEYWORD_FOR) {
		AWrite("for")
	}
	else if (Keyword = KEYWORD_WHILE) {
		AWrite("while")
	}
	else if (Keyword = KEYWORD_LOOP) {
		AWrite("loop")
	}
	else if (Keyword = KEYWORD_CONTINUE) {
		AWrite("continue")
	}
	else if (Keyword = KEYWORD_BREAK) {
		AWrite("break")
	}
	else if (Keyword = KEYWORD_STRUCT) {
		AWrite("struct")
	}
	else if (Keyword = KEYWORD_RETURN) {
		AWrite("return")
	}
	else if (Keyword = KEYWORD_UNION) {
		AWrite("union")
	}
	else if (Keyword = KEYWORD_BITS) {
		AWrite("bits")
	}
	else if (Keyword = KEYWORD_UNALIGNED) {
		AWrite("unaligned")
	}
	else if (Keyword = KEYWORD_LINUX) {
		AWrite("linux")
	}
	else if (Keyword = KEYWORD_WINDOWS) {
		AWrite("windows")
	}
} */