#Require "./src/lib/Console.rlx"
#Require "./src/lib/File.rlx"
#Require "./src/lib/Debug.rlx"

define i32 Align(i32 N, i32 Size) {
	i32 Remainder := N % Size
	
	if (Remainder) {
		N += Size - Remainder
	}
	
	return N
}

define void PrintArray(i8* Format, void* Array, i8 Size, i32 Count) {
	Print("{%i, %i}[", Size, Count)
	
	void* Next := Array
	
	i8 Shift := Size * 8
	i64 Mask := (1 As i64 << Shift) - 1
	
	for (i32 Index := 0, Index < Count, Index += 1) {
		i64 Data := *(Next As i64*)
		
		Print(Format, Data & Mask)
		
		if (Index + 1 != Count) {
			Print(", ")
		}
		
		Next += Size
	}
	
	Print("]\n")
}
define void PrintArray(void* Array, i8 Size, i32 Count) {
	return PrintArray("%x", Array, Size, Count)
}

#Require "./src/compiler/PDB/MSF.rlx"
#Require "./src/compiler/PDB/CodeView.rlx"
#Require "./src/compiler/PDB/DBi.rlx"

declare TPIStreamBuilder* TPITest(MSFBuilder*)
declare void IPITest(MSFBuilder*)

define i32 Main() {
	MSFBuilder* B := Alloc(#MSFBuilder)
	
	B->Initialize()
	B->AllocateStreamDirectory()
	
	; Unfinished streams:
	B->SetNamedStreamData("/names", null, 0x1000)
	B->SetStreamData(MSF_MSF_STREAM_INDEX, null, 0x1000)				; MSF ??? stream
	B->SetStreamData(MSF_IPI_STREAM_INDEX, null, 0)				; IPI Stream
	
	IPITest(B)
	
	; Mostly finished streams:
	TPIStreamBuilder* T := TPITest(B)
	WriteDBI(B, T)
	
	T->PrintTypeRecords()
	T->SerializeTPI()
	Print("TPI Done\n")
	
	Print("SSA: ")
	PrintArray(B->StreamDirectory->GetStreamSizesArray(), 4, B->StreamDirectory->NumberOfStreams)
	
	; Totally finished streams (MSF format, PDB stream):
	B->Finalize()
	
	Print("SSA: ")
	PrintArray(B->StreamDirectory->GetStreamSizesArray(), 4, B->StreamDirectory->NumberOfStreams)
	
	B->WriteToFile("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\dummy.pdb"r)
	
	Print("MSF Done\n")
	
	B->SuperBlock->Print()
	
	;i64 F := FileOpen("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\AutoHotkey.pdb"r, FILE_READ)
	;
	;FileSeek(F, 0x96E000, SEEK_SET)
	;
	;void* Data := Alloc(0x1000)
	;FileRead(F, Data, 0x1000)
	;
	;PDBNamedStreamMapBuilder* B := PDBNamedStreamMapBuilder:Load(Data + #PDBStreamHeader)
	;
	;B->OffsetIndexMap->Print()
	;
	;i32 StreamNumber := 0
	;i8 R := B->Get("/src/files/debdug.natvis", &StreamNumber)
	;
	;Print("B->Get %i = %x\n", R, StreamNumber)
	;
	;return 0
}

define void IPITest(MSFBuilder* Builder) {
	TPIStreamBuilder* B := TPIStreamBuilder:New(Builder)
	
	B->SerializeIPI()
}

define TPIStreamBuilder* TPITest(MSFBuilder* Builder) {
	TPIStreamBuilder* B := TPIStreamBuilder:New(Builder)
	
	i32 PointerPointerIndex := B->AppendPointer(CV_KIND_I64, 5)
	i32 PointerPointerIndex2 := B->AppendPointer(CV_KIND_I8, 2)
	
	CVStructBuilder* Bu := CVStructBuilder:New("Struct1", 16)
	
	Bu->AddDataMember(PointerPointerIndex, 0, "Field1")
	Bu->AddDataMember(PointerPointerIndex2, 8, "Field2")
	
	i32 BuFields := B->AppendCVRecord(Bu->MakeFieldListRecord())
	i32 Struct1 := B->AppendCVRecord(Bu->MakeStructRecord(BuFields))
	
	;CVProcedureBuilder* Pu := CVProcedureBuilder:New()
	;
	;Pu->SetReturnType(Struct1)
	;Pu->AppendParameter(CV_KIND_I8)
	;Pu->AppendParameter(CV_KIND_I16)
	;
	;i32 PuParams := B->AppendCVRecord(Pu->MakeParameterListRecord())
	;B->AppendCVRecord(Pu->MakeProcedureRecord(PuParams))
	
	B->AppendProcedure(Struct1, CV_KIND_I8, CV_KIND_I16)
	
	B->AppendBitField(CV_KIND_I64, 3, 9)
	
	;B->PrintTypeRecords()
	
	;Print("TPI Done\n")
	
	;B->Serialize()
	
	return B
}