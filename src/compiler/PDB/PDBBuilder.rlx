#Require "./src/lib/Console.rlx"
#Require "./src/lib/File.rlx"
#Require "./src/lib/Debug.rlx"

define i32 Align(i32 N, i32 Size) {
	i32 Remainder := N % Size
	
	if (Remainder) {
		N += Size - Remainder
	}
	
	return N
}

define void PrintArray(i8* Format, void* Array, i8 Size, i32 Count) {
	Print("{%i, %i}[", Size, Count)
	
	void* Next := Array
	
	i8 Shift := Size * 8
	i64 Mask := (1 As i64 << Shift) - 1
	
	for (i32 Index := 0, Index < Count, Index += 1) {
		i64 Data := *(Next As i64*)
		
		Print(Format, Data & Mask)
		
		if (Index + 1 != Count) {
			Print(", ")
		}
		
		Next += Size
	}
	
	Print("]\n")
}
define void PrintArray(void* Array, i8 Size, i32 Count) {
	return PrintArray("%x", Array, Size, Count)
}

#Require "./src/compiler/PDB/MSF.rlx"
#Require "./src/compiler/PDB/CodeView.rlx"
#Require "./src/compiler/PDB/DBi.rlx"

struct PDBStreamHeader unaligned {
	i32 Version
	i32 CreationTime
	i32 WriteCount
	i64 UUIDHigh
	i64 UUIDLow
}

i32 PDB_VERSION_VC70 := 20000404
i32 PBD_STREAM_VC140 := 20140508

struct PDBStreamBuilder {
	i32 FeatureFlags
	PDBNamedStreamMapBuilder* NameMap
	
	static PDBStreamBuilder* New() {
		PDBStreamBuilder* this := Alloc(#PDBStreamBuilder)
		
		this->NameMap := PDBNamedStreamMapBuilder:New()
		
		return this
	}
	define i32 GetSize() {
		return #PDBStreamHeader + this->NameMap->GetSize() + 8
	}
	define void* SerializeInto(void* Buffer, i64 SourcePathHash, i64 Time) {
		PDBStreamHeader* Header := Buffer As PDBStreamHeader*
		
		Header->Version := PDB_VERSION_VC70
		Header->CreationTime := Time As i32
		Header->WriteCount := 1
		Header->UUIDLow := SourcePathHash ^ Time
		Header->UUIDHigh := Time ^ Header
		
		Buffer := this->NameMap->SerializeInto(Buffer + #PDBStreamHeader)
		
		(Buffer As i32*)[0] := PBD_STREAM_VC140
		
		return Buffer + 8
	}
}

declare TPIStreamBuilder* TPITest(MSFBuilder*)
declare void TPIFinalize(TPIStreamBuilder*)

define i32 Main() {
	MSFBuilder* B := Alloc(#MSFBuilder)
	
	B->Initialize()
	B->AllocateStreamDirectory()
	
	i8* D := Alloc(0x1500)
	i8* StreamBuffer := D
	
	PDBStreamBuilder* Bu := PDBStreamBuilder:New()
	
	;Bu->NameMap->Set("/LinkInfo", 5)
	;Bu->NameMap->Set("/names", 13)
	;Bu->NameMap->Set("/src/headerblock", 9)
	;Bu->NameMap->Set("/src/files/debug.natvis", 384)
	
	;i32 StreamNumber := 0
	;i8 R := Bu->NameMap->Get("/LinkInfo", &StreamNumber)
	;
	;Print("Bu->Get %i = %x\n", R, StreamNumber)
	;
	;Bu->NameMap->OffsetIndexMap->Print()
	
	Bu->NameMap->Set("/names", 5)
	
	i32 PDBStreamSize := Bu->GetSize()
	Bu->SerializeInto(StreamBuffer, 0x123, 0x456)
	
	void* Empty := Alloc(0x1000)
	
	B->AppendStream(Empty, 0)						; MSF ??? stream
	B->AppendStream(StreamBuffer, PDBStreamSize)	; PDB Stream
	
	TPIStreamBuilder* TB := TPITest(B)
	
	WriteDBI(B)
	;B->AppendStream(Empty, 0x1000)					; DBI Stream
	B->AppendStream(Empty, 0x1000)					; IPI Stream
	
	B->AppendStream(Empty, 0x1000)					; Names stream
	
	TPIFinalize(TB)
	
	i32 Extra := 0
	B->StreamDirectory->SetStreamSize(0, 0x1300, &Extra)
	Print("Expanded stream, %i new blocks needed\n", Extra)
	
	for (i32 I := 0, I < Extra, I += 1) {
		B->StreamDirectory->SetStreamBlock(0, I, B->AllocateBlock())
	}
	
	Print("SSA: ")
	PrintArray(B->StreamDirectory->GetStreamSizesArray(), 4, B->StreamDirectory->NumberOfStreams)
	
	B->StreamDirectory->SetStreamSize(0, 0, &Extra)
	
	Print("SSA: ")
	PrintArray(B->StreamDirectory->GetStreamSizesArray(), 4, B->StreamDirectory->NumberOfStreams)
	
	B->WriteToFile("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\dummy.pdb"r)
	
	Print("MSF Done\n")
	
	B->SuperBlock->Print()
	
	;i64 F := FileOpen("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\AutoHotkey.pdb"r, FILE_READ)
	;
	;FileSeek(F, 0x96E000, SEEK_SET)
	;
	;void* Data := Alloc(0x1000)
	;FileRead(F, Data, 0x1000)
	;
	;PDBNamedStreamMapBuilder* B := PDBNamedStreamMapBuilder:Load(Data + #PDBStreamHeader)
	;
	;B->OffsetIndexMap->Print()
	;
	;i32 StreamNumber := 0
	;i8 R := B->Get("/src/files/debdug.natvis", &StreamNumber)
	;
	;Print("B->Get %i = %x\n", R, StreamNumber)
	;
	;return 0
}

define TPIStreamBuilder* TPITest(MSFBuilder* Builder) {
	TPIStreamBuilder* B := TPIStreamBuilder:New(Builder)
	
	i32 PointerPointerIndex := B->AppendPointer(CV_KIND_I64, 5)
	i32 PointerPointerIndex2 := B->AppendPointer(CV_KIND_I8, 2)
	
	CVStructBuilder* Bu := CVStructBuilder:New("Struct1", 16)
	
	Bu->AddDataMember(PointerPointerIndex, 0, "Field1")
	Bu->AddDataMember(PointerPointerIndex2, 8, "Field2")
	
	i32 BuFields := B->AppendCVRecord(Bu->MakeFieldListRecord())
	i32 Struct1 := B->AppendCVRecord(Bu->MakeStructRecord(BuFields))
	
	CVProcedureBuilder* Pu := CVProcedureBuilder:New()
	
	Pu->SetReturnType(Struct1)
	Pu->AppendParameter(CV_KIND_I8)
	Pu->AppendParameter(CV_KIND_I16)
	
	i32 PuParams := B->AppendCVRecord(Pu->MakeParameterListRecord())
	B->AppendCVRecord(Pu->MakeProcedureRecord(PuParams))
	
	B->AppendBitField(CV_KIND_I64, 3, 9)
	
	;B->PrintTypeRecords()
	
	Print("TPI Done\n")
	
	B->Serialize()
	
	return B
}
define void TPIFinalize(TPIStreamBuilder* B) {
	B->SerializeRecordOffsetArray()
}