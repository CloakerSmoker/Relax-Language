#Require "./src/lib/Console.rlx"
#Require "./src/lib/File.rlx"
#Require "./src/lib/Debug.rlx"

define i32 Align(i32 N, i32 Size) {
	i32 Remainder := N % Size
	
	if (Remainder) {
		N += Size - Remainder
	}
	
	return N
}

define void PrintArray(i8* Format, void* Array, i8 Size, i32 Count) {
	Print("{%i, %i}[", Size, Count)
	
	void* Next := Array
	
	i8 Shift := Size * 8
	i64 Mask := (1 As i64 << Shift) - 1
	
	for (i32 Index := 0, Index < Count, Index += 1) {
		i64 Data := *(Next As i64*)
		
		Print(Format, Data & Mask)
		
		if (Index + 1 != Count) {
			Print(", ")
		}
		
		Next += Size
	}
	
	Print("]\n")
}
define void PrintArray(void* Array, i8 Size, i32 Count) {
	return PrintArray("%x", Array, Size, Count)
}

#Require "./src/compiler/PDB/MSF.rlx"
#Require "./src/compiler/PDB/CodeView.rlx"
#Require "./src/compiler/PDB/DBI.rlx"

struct PDBBuilder {
	MSFBuilder* MSF
	PDBStringTableBuilder* StringTable
	TPIStreamBuilder* TPI
	TPIStreamBuilder* IPI
	DBIStreamBuilder* DBI
	CVSymbolStreamBuilder* Symbols
	CVDebugLinesBuilder* LineNumbers
	
	static PDBBuilder* New() {
		PDBBuilder* this := Alloc(#PDBBuilder)
		
		this->MSF := MSFBuilder:New()
		this->MSF->AllocateStreamDirectory()
		
		this->StringTable := PDBStringTableBuilder:New()
		this->TPI := TPIStreamBuilder:New()
		this->IPI := TPIStreamBuilder:New()
		
		this->DBI := DBIStreamBuilder:New(this->TPI, this->StringTable)
		
		this->Symbols := this->DBI->ModuleSymbols
		this->LineNumbers := this->DBI->ModuleLines
		
		return this
	}
	
	define void DBITest() {
		this->DBI->SetModule("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\Main.rlx"r)
		this->DBI->AddSourceFile("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\Lexer.rlx"r)
		this->DBI->AddSourceFile("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\Parser.rlx"r)
		
		i32 CharPP := this->TPI->AppendPointer(CV_KIND_I8, 2)
		
		CVSymbolStreamBuilder* M := this->DBI->ModuleSymbols
		
		i32 S := M->AppendProcedure(CV_KIND_I32, "Main", 4, CV_KIND_I64, CharPP)
		
		M->ExtendProcedureSize(S, M->AppendBasePointerRelative(0, CV_KIND_I64, "ArgC", 4))
		M->ExtendProcedureSize(S, M->AppendBasePointerRelative(8, CharPP, "ArgV", 4))
		
		M->AppendEnd(S)
		
		
		CVDebugLinesBuilder* Q := this->DBI->ModuleLines
		
		Q->StartGroup("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\Lexer.rlx"r, 1, 0x10000, 200)
		Q->AddLine(0, 20)
		Q->AddLine(100, 40)
		Q->EndGroup()
		
		this->DBI->ModuleSymbols->PrintSymbols()
		this->DBI->ModuleLines->Print()
		
		Print("DBI Done\n")
	}
	
	define void TPITest() {
		TPIStreamBuilder* B := this->TPI
		
		i32 PointerPointerIndex := this->TPI->AppendPointer(CV_KIND_I64, 5)
		i32 PointerPointerIndex2 := this->TPI->AppendPointer(CV_KIND_I8, 2)
		
		CVStructBuilder* Bu := CVStructBuilder:New("Struct1", 16)
		
		Bu->AddDataMember(PointerPointerIndex, 0, "Field1")
		Bu->AddDataMember(PointerPointerIndex2, 8, "Field2")
		
		i32 BuFields := this->TPI->AppendCVRecord(Bu->MakeFieldListRecord())
		i32 Struct1 := this->TPI->AppendCVRecord(Bu->MakeStructRecord(BuFields))
		
		this->TPI->AppendProcedure(Struct1, CV_KIND_I8, CV_KIND_I16)
		
		this->TPI->AppendBitField(CV_KIND_I64, 3, 9)
		
		this->TPI->PrintTypeRecords()
		
		Print("TPI Done\n")
	}
	
	define void WriteToFile(i8* FilePath) {
		this->MSF->SetStreamData(MSF_MSF_STREAM_INDEX, null, 0x1000)
		
		this->DBI->WriteStreams(this->MSF)
		this->TPI->WriteStreams(this->MSF, MSF_TPI_STREAM_INDEX)
		this->IPI->WriteStreams(this->MSF, MSF_IPI_STREAM_INDEX)
		
		this->StringTable->WriteStream(this->MSF)
		
		this->MSF->Finalize()
		
		this->MSF->WriteToFile(FilePath)
	}
}

define i32 Main() {
	PDBBuilder* PDB := PDBBuilder:New()
	
	PDB->DBITest()
	PDB->TPITest()
	
	PDB->WriteToFile("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\dummy.pdb"r)
	
	Print("StreamSizeArray: ")
	PrintArray(PDB->MSF->StreamDirectory->GetStreamSizesArray(), 4, PDB->MSF->StreamDirectory->NumberOfStreams)
	
	Print("MSF Done\n")
	
	PDB->MSF->SuperBlock->Print()
	
	;i64 F := FileOpen("C:\Users\Connor\Desktop\fuck\Relax-Language\src\compiler\AutoHotkey.pdb"r, FILE_READ)
	;
	;FileSeek(F, 0x96E000, SEEK_SET)
	;
	;void* Data := Alloc(0x1000)
	;FileRead(F, Data, 0x1000)
	;
	;PDBNamedStreamMapBuilder* B := PDBNamedStreamMapBuilder:Load(Data + #PDBStreamHeader)
	;
	;B->OffsetIndexMap->Print()
	;
	;i32 StreamNumber := 0
	;i8 R := B->Get("/src/files/debdug.natvis", &StreamNumber)
	;
	;Print("B->Get %i = %x\n", R, StreamNumber)
	;
	;return 0
}