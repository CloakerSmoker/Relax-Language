define i32 PDBHashStringV1(i8* String, i32 Length) {
	i32* Longs := String As i32*
	i32 LongCount := Length / 4
	
	i32 Result := 0
	
	for (i32 LongIndex := 0, LongIndex < LongCount, LongIndex += 1) {
		Result ^= Longs[LongIndex]
	}
	
	;Print("HSV1(%s, %i) PreResult = %x\n", String, Length, Result)
	
	i8* Remainder := Longs + LongCount * 4
	i32 RemainderSize := Length % 4
	
	;Print("HSV1(%s, %i) RemainderSize = %x\n", String, Length, RemainderSize)
	
	if (RemainderSize >= 2) {
		i32 Value := *(Remainder As i16*)
		Result ^= Value
		
		Remainder += 2
		RemainderSize -= 2
	}
	
	if (RemainderSize = 1) {
		;Print("HSV1(%s, %i) LastCharacter = %x\n", String, Length, *(Remainder))
		
		Result ^= *(Remainder)
	}
	
	;Print("HSV1(%s, %i) UpperResult = %x\n", String, Length, Result)
	
	i32 ToLowerMask := 0x20202020
	Result |= ToLowerMask
	Result ^= (Result >> 11)
	
	return Result ^ (Result >> 16)
}
define i16 PDBHashLookupKeyV1(i8* Key, i32 KeyLength) {
	return PDBHashStringV1(Key, KeyLength) As i16
}

define i16 PDBCallHasher(void* this, i8* Key, i32 KeyLength, void* Implementation) asm {
	jmp, rcx
}
define i8* PDBCallStorageKeyToLookupKey(void* this, i32 Offset, void* Implementation) asm {
	jmp, rdx
}
define i32 PDBCallLookupKeyToStorageKey(void* this, i8* Key, i32 KeyLength, void* Implementation) asm {
	jmp, rcx
}

struct PDBHashmapTraits {
	void* Hasher,
	void* StorageKeyToLookupKey,
	void* LookupKeyToStorageKey,
	void* TrueThis,
	
	define i16 Hash(i8* Key, i32 KeyLength) {
		return PDBCallHasher(this->TrueThis, Key, KeyLength, this->Hasher)
	},
	define i8* StorageKeyToLookupKey(i32 Offset) {
		return PDBCallStorageKeyToLookupKey(this->TrueThis, Offset, this->StorageKeyToLookupKey)
	},
	define i32 LookupKeyToStorageKey(i8* Key, i32 KeyLength) {
		return PDBCallLookupKeyToStorageKey(this->TrueThis, Key, KeyLength, this->LookupKeyToStorageKey)
	}
}

define i32 Ceil(i32 Dividend, i32 Divisor) {
	return (Dividend / Divisor) + !!(Dividend % Divisor)
}

i32 Zero := 0

struct PDBSparceBitVector {
	i32 WordCount,
	i32{1} Words,
	
	define i32 Count() {
		i32 Result := 0
		
		for (i32 WordIndex := 0, WordIndex < this->WordCount, WordIndex += 1) {
			i32 ThisWord := this~>Words[WordIndex]
			
			for (i8 BitIndex := 0, BitIndex < 32, BitIndex += 1) {
				i32 Mask := 1 << BitIndex
				Result += ThisWord & Mask
			}
		}
		
		return Result
	},
	define void Print() {
		Print("Bit vector dump: ")
		
		for (i32 WordIndex := 0, WordIndex < this->WordCount, WordIndex += 1) {
			i32 ThisWord := this~>Words[WordIndex]
			
			for (i8 BitIndex := 0, BitIndex < 32, BitIndex += 1) {
				i32 Mask := 1 << BitIndex
				Print("%i", !!(ThisWord & Mask))
			}
		}
		
		Print("\n")
	},
	define i32* FindWord(i32 Index) {
		i32 WordIndex := Index / 32
		
		if (WordIndex >= this->WordCount) {
			Zero := 0
			return &Zero
		}
		
		return this~>Words + WordIndex * 4
	},
	define i32 FindBitMask(i32 Index) {
		return 1 << ((Index % 32) As i8)
	},
	define i32 Get(i32 Index) {
		Index += 1
		
		i32 Value := this->FindWord(Index)[0]
		i32 Mask := this->FindBitMask(Index)
		
		return !!(Value & Mask)
	},
	define void Set(i32 Index, i8 To) {
		Index += 1
		
		i32* TargetWord := this->FindWord(Index)
		i32 Mask := this->FindBitMask(Index)
		i32 NewValue := TargetWord[0]
		
		if (To) {
			NewValue |= Mask
		}
		else {
			NewValue &= ~Mask
		}
		
		TargetWord[0] := NewValue
		
	},
	define void* GetEnd() {
		return this~>Words + (this->WordCount * 4)
	},
	define void* SerializeInto(void* TargetBuffer) {
		i32* Buffer := TargetBuffer As i32*
		
		Buffer[0] := this->WordCount
		
		for (i32 WordIndex := 0, WordIndex < this->WordCount, WordIndex += 1) {
			Buffer[WordIndex + 1] := this~>Words[WordIndex]
		}
		
		return Buffer + 4 + this->WordCount * 4
	}
}

struct PDBHashmapBucket {
	i32 Key,
	i32 Value
	
	define PDBHashmapBucket* Next() {
		return this + #PDBHashmapBucket
	}
}

struct PDBHashmapHeader {
	i32 Size,
	i32 Capacity,
	
	define PDBSparceBitVector* GetPresentVector() {
		return (this~>Capacity + 4) As PDBSparceBitVector*
	},
	define PDBSparceBitVector* GetDeletedVector() {
		return this->GetPresentVector()->GetEnd()
	},
	define PDBHashmapBucket* GetBuckets() {
		return this->GetDeletedVector()->GetEnd()
	},
	define void* SerializeInto(void* Buffer) {
		Buffer[0] := (this As void*)[0]
		return Buffer + 8
	}
}

struct PDBHashmap {
	; NOTES:
	;  The serialized on-disk format *only* contains present k:v pairs, and not deleted/non-present pairs
	;   this took an incredible number of hours to figure out, and I'm honestly only writing this
	;    comment so I can come back and remember how much it fucking sucked.
	;  Nothing about LLVM's docs explains that only present buckets are stored on-disk
	;   and even though that is perfectly logical, it's impossible to read or write *any* PDB files
	;    without that single detail. I kept wondering why a key where `Hash(Key) % Capacity` was 3 
	;     yet LLVM expected to be in bucket 0 on-disk. I was totally convinced this was a bug.
	
	union {
		PDBHashmapHeader* Header,
		void* Buffer
	},
	
	i32 BufferSize,
	PDBSparceBitVector* PresentVector,
	PDBSparceBitVector* DeletedVector,
	PDBHashmapBucket* Buckets,
	
	PDBHashmapTraits* Traits,
	
	declare PDBHashmapBucket* FindBucket(i32)
	
	static PDBHashmap* Load(void* Buffer, PDBHashmapTraits* Traits) {
		PDBHashmap* this := Alloc(#PDBHashmap)
		
		this->Buffer := Buffer
		this->PresentVector := this->Header->GetPresentVector()
		this->DeletedVector := this->Header->GetDeletedVector()
		this->Buckets := Alloc(this->Header->Capacity * #PDBHashmapBucket)
		
		PDBHashmapBucket* RawBucketBuffer := this->Header->GetBuckets()
		
		for (i32 BucketIndex := 0, BucketIndex < this->Header->Capacity, BucketIndex += 1) {
			if (this->PresentVector->Get(BucketIndex)) {
				;Print("On-file bucket is in-memory bucket %i\n", BucketIndex)
				MoveMemory(this->FindBucket(BucketIndex), RawBucketBuffer, #PDBHashmapBucket)
				RawBucketBuffer := RawBucketBuffer->Next()
			}
		}
		
		;Print("PV = %x\n", this->PresentVector - this->Buffer)
		;Print("DV = %x\n", this->DeletedVector - this->Buffer)
		;Print("BU = %x\n", this->Buckets - this->Buffer)
		
		this->Traits := Traits
		
		return this
	}
	
	define void Initialize(i32 Buckets, PDBHashmapTraits* Traits) {
		i32 BitVectorWordCount := Ceil(Buckets, 32)
		
		;Print("Init %i buckets, %i bucket words\n", Buckets, BitVectorWordCount)
		
		this->BufferSize := #PDBHashmapHeader + 8 + (BitVectorWordCount * 8) + (Buckets * 8)
		this->Buffer := Alloc(this->BufferSize)
		this->Header->Capacity := Buckets
		
		this->PresentVector := this->Header->GetPresentVector()
		this->PresentVector->WordCount := BitVectorWordCount
		
		; DeletedVector seems totally unused
		this->DeletedVector := this->Header->GetDeletedVector()
		this->DeletedVector->WordCount := 0
		
		this->Buckets := this->Header->GetBuckets()
		
		this->Traits := Traits
		
		;Print("PV = %x\n", this->PresentVector - this->Buffer)
		;Print("DV = %x\n", this->DeletedVector - this->Buffer)
		;Print("BU = %x\n", this->Buckets - this->Buffer)
		;Print("Size = %x, Start = %x\n", this->BufferSize, this->Buffer)
	},
	define void Initialize(PDBHashmapTraits* Traits) {
		return this->Initialize(6, Traits)
	},
	define PDBHashmapBucket* FindBucket(i32 Index) {
		return this->Buckets + (Index * #PDBHashmapBucket)
	},
	define i32 GetBucketIndex(PDBHashmapBucket* Bucket) {
		i32 Difference := Bucket - this->Buckets
		
		return Difference / #PDBHashmapBucket
	},
	define PDBHashmapBucket* FindFirst(i8* Key, i32 KeyLength) {
		i32 Hash := this->Traits->Hash(Key, KeyLength)
		i32 BaseIndex := (Hash % this->Header->Capacity) - 1
		
		Print("FindFirst(%s, %i), Hash = %x, Bi = %i\n", Key, KeyLength, Hash, BaseIndex)
		
		i32 Index := BaseIndex
		
		i32 FirstEmpty := 0
		
		loop {
			if (this->PresentVector->Get(Index)) {
				PDBHashmapBucket* FoundBucket := this->FindBucket(Index)
				i8* FoundLookupKey := this->Traits->StorageKeyToLookupKey(FoundBucket->Key)
				
				
				i32 LookupKeyHash := this->Traits->Hash(FoundLookupKey, StringLength(FoundLookupKey))
				Print("FFLK [%i] = %s, L = %x\n", Index, FoundLookupKey, StringLength(FoundLookupKey))
				
				if (LookupKeyHash = Hash) {
					Print("FB\n")
					
					return FoundBucket
				}
			}
			else {
				if !(FirstEmpty) {
					FirstEmpty := Index
				}
				
				if !(this->DeletedVector->Get(Index)) {
					break
				}
			}
			
			Index := (Index + 1) % this->Header->Capacity
			
			if (Index = BaseIndex) {
				break
			}
		}
		
		;Print("Found '%s' at %i\n", Key, Index)
		
		return this->FindBucket(FirstEmpty)
	},
	define i8 Set(i8* Key, i32 KeyLength, i32 Value, i32 InternalKey) {
		PDBHashmapBucket* Entry := this->FindFirst(Key, KeyLength)
		
		i32 Index := this->GetBucketIndex(Entry)
		
		;Print("Set %s @ %i To %i\n", Key, Index, Value)
		
		if (this->PresentVector->Get(Index)) {
			Entry->Value := Value
			return false
		}
		
		if !(InternalKey) {
			InternalKey := this->Traits->LookupKeyToStorageKey(Key, KeyLength)
		}
		
		Entry->Key := InternalKey
		Entry->Value := Value
		
		this->Header->Size += 1
		this->PresentVector->Set(Index, true)
		
		return true
	},
	define i8 Set(i8* Key, i32 KeyLength, i32 Value) {
		return this->Set(Key, KeyLength, Value, 0)
	},
	define i8 Set(i8* Key, i32 Value) {
		return this->Set(Key, StringLength(Key), Value, 0)
	},
	define i32 Get(i8* Key, i32 KeyLength) {
		PDBHashmapBucket* Entry := this->FindFirst(Key, KeyLength)
		i32 Index := this->GetBucketIndex(Entry)
		
		if (this->PresentVector->Get(Index)) {
			return Entry->Value
		}
		
		return 0
	},
	define void* SerializeInto(void* Buffer) {
		Buffer := this->Header->SerializeInto(Buffer)
		Buffer := this->PresentVector->SerializeInto(Buffer)
		Buffer := this->DeletedVector->SerializeInto(Buffer)
		
		void* RawBucketBuffer := this->Buckets As void*
		i32 PresentIndex := 0
		
		for (i32 BucketIndex := 0, BucketIndex < this->Header->Capacity, BucketIndex += 1) {
			if (this->PresentVector->Get(BucketIndex)) {
				Buffer[PresentIndex] := RawBucketBuffer[BucketIndex]
				PresentIndex += 1
			}
		}
		
		return Buffer + PresentIndex * 8
	}
	define i32 GetSize() {
		return this->BufferSize
	}
	
	define void Print() {
		for (i32 I := 0, I < this->Header->Capacity, I += 1) {
			PDBHashmapBucket* B := this->FindBucket(I)
			
			Print("	Buckets[%i] = {%x: %x}\n", I, B->Key, B->Value)
			Print("		Present? %i, Deleted? %i\n", this->PresentVector->Get(I), this->DeletedVector->Get(I))
		}
		
		this->PresentVector->Print()
		this->DeletedVector->Print()
	}
}

struct PDBNamedStreamMapHeader {
	i32 StringBufferSize,
	i8{1} StringBuffer
}

declare i16 PDBNamedStreamMapHash(PDBNamedStreamMapBuilder*, i8*, i32)
declare i8* PDBNamedStreamMapStorageKeyToLookupKey(PDBNamedStreamMapBuilder*, i32)
declare i32 PDBNamedStreamMapLookupKeyToStorageKey(PDBNamedStreamMapBuilder*, i8*, i32)

struct PDBNamedStreamMapBuilder {
	union {
		PDBNamedStreamMapHeader* Header,
		void* Buffer
	},
	
	PDBHashmapTraits* Traits,
	PDBHashmap* OffsetIndexMap,
	
	static PDBNamedStreamMapBuilder* Load(void* Buffer) {
		PDBNamedStreamMapBuilder* this := Alloc(#PDBNamedStreamMapBuilder)
		
		this->Buffer := Buffer
		
		this->Traits := Alloc(#PDBHashmapTraits)
		this->Traits->TrueThis := this
		this->Traits->Hasher := &PDBNamedStreamMapHash
		this->Traits->StorageKeyToLookupKey := &PDBNamedStreamMapStorageKeyToLookupKey
		this->Traits->LookupKeyToStorageKey := &PDBNamedStreamMapLookupKeyToStorageKey
		
		this->OffsetIndexMap := PDBHashmap:Load(Buffer + this->Header->StringBufferSize + 4, this->Traits)
		
		return this
	}
	
	define void Initialize() {
		this->Buffer := Alloc(#PDBNamedStreamMapHeader)
		this->Header->StringBufferSize := 0
		
		this->Traits := Alloc(#PDBHashmapTraits)
		this->Traits->TrueThis := this
		this->Traits->Hasher := &PDBNamedStreamMapHash
		this->Traits->StorageKeyToLookupKey := &PDBNamedStreamMapStorageKeyToLookupKey
		this->Traits->LookupKeyToStorageKey := &PDBNamedStreamMapLookupKeyToStorageKey
		
		this->OffsetIndexMap := Alloc(#PDBHashmap)
		this->OffsetIndexMap->Initialize(this->Traits)
	},
	
	static PDBNamedStreamMapBuilder* New() {
		PDBNamedStreamMapBuilder* this := Alloc(#PDBNamedStreamMapBuilder)
		
		this->Initialize()
		
		return this
	}
	
	define i8 Get(i8* String, i32 StringLength, i32* StreamNumber) {
		PDBHashmapBucket* Entry := this->OffsetIndexMap->FindFirst(String, StringLength)
		i32 Index := this->OffsetIndexMap->GetBucketIndex(Entry)
		
		Print("Got %i, p = %i\n", Index, this->OffsetIndexMap->PresentVector->Get(Index))
		
		if !(this->OffsetIndexMap->PresentVector->Get(Index)) {
			Print("NOT PRESENT\n")
			
			return false
		}
		
		StreamNumber[0] := Entry->Value
		return true
	},
	define i8 Get(i8* String, i32* StreamNumber) {
		return this->Get(String, StringLength(String), StreamNumber)
	},
	define void Set(i8* String, i32 StringLength, i32 StreamNumber) {
		this->OffsetIndexMap->Set(String, StringLength, StreamNumber)
	},
	define void Set(i8* String, i32 StreamNumber) {
		this->OffsetIndexMap->Set(String, StreamNumber)
	},
	define i8* GetString(i32 Offset) {
		return this->Header~>StringBuffer + Offset
	},
	define i32 AppendString(i8* String, i32 StringLength) {
		i32 OldSize := this->Header->StringBufferSize
		i32 NewSize := OldSize + StringLength + 1
		
		this->Buffer := ReAlloc(this->Buffer, NewSize + 4)
		this->Header->StringBufferSize := NewSize
		
		i8* OldBufferEnd := this->Header~>StringBuffer + OldSize
		MoveMemory(OldBufferEnd, String, StringLength)
		
		return OldSize
	},
	define void* SerializeInto(void* RawBuffer) {
		i32* Buffer := RawBuffer As i32*
		
		i32 StringBufferSize := this->Header->StringBufferSize
		
		Buffer[0] := StringBufferSize
		
		i8* StringBuffer := (Buffer + 4) As i8*
		
		for (i32 Index := 0, Index < StringBufferSize, Index += 1) {
			StringBuffer[Index] := this->Header~>StringBuffer[Index]
		}
		
		RawBuffer := (StringBuffer + StringBufferSize) As void*
		
		return this->OffsetIndexMap->SerializeInto(RawBuffer)
	}
	
	define i32 GetSize() {
		return 4 + this->Header->StringBufferSize + this->OffsetIndexMap->GetSize()
	}
}

define i32 AbsoluteValue(i32 Value) {
	if (Value < 0) {
		return -Value
	}
	
	return Value
}

define i32 PDBNamedStreamMapHash(PDBNamedStreamMapBuilder* this, i8* Key, i32 KeyLength) {
	return AbsoluteValue(PDBHashLookupKeyV1(Key, KeyLength) As i32)
}
define i8* PDBNamedStreamMapStorageKeyToLookupKey(PDBNamedStreamMapBuilder* this, i32 Offset) {
	return this->GetString(Offset)
}
define i32 PDBNamedStreamMapLookupKeyToStorageKey(PDBNamedStreamMapBuilder* this, i8* Key, i32 KeyLength) {
	return this->AppendString(Key, KeyLength)
}

struct PDBStreamHeader unaligned {
	i32 Version
	i32 CreationTime
	i32 WriteCount
	i64 UUIDHigh
	i64 UUIDLow
}

i32 PDB_VERSION_VC70 := 20000404
i32 PBD_STREAM_VC140 := 20140508

struct PDBStreamBuilder {
	i32 FeatureFlags
	PDBNamedStreamMapBuilder* NameMap
	
	static PDBStreamBuilder* New() {
		PDBStreamBuilder* this := Alloc(#PDBStreamBuilder)
		
		this->NameMap := PDBNamedStreamMapBuilder:New()
		
		return this
	}
	define i32 GetSize() {
		return #PDBStreamHeader + this->NameMap->GetSize() + 8
	}
	define void* SerializeInto(void* Buffer, i64 SourcePathHash, i64 Time) {
		PDBStreamHeader* Header := Buffer As PDBStreamHeader*
		
		Header->Version := PDB_VERSION_VC70
		Header->CreationTime := Time As i32
		Header->WriteCount := 1
		Header->UUIDLow := SourcePathHash ^ Time
		Header->UUIDHigh := Time ^ Header
		
		Buffer := this->NameMap->SerializeInto(Buffer + #PDBStreamHeader)
		
		(Buffer As i32*)[0] := PBD_STREAM_VC140
		
		return Buffer + 8
	}
}

struct MSFSuperBlock {
	i8{0x20} Magic,
	i32 BlockSize,			; Should be 4096
	i32 FreeBlockMapBlock,	; Block index (only allowed to be 1 or 2)
	i32 NumberOfBlocks,		; Total block count, (NumberOfBlocks * BlockSize) = FileSize
	i32 NumberOfDirectoryBytes,	; Size of stream directory
	i32 Unknown,
	i32 BlockMapIndex	; Index of a block listing blocks which contain the stream directory
	; Number of blocks inside of BlockMapIndex block = Ceil(NumberOfDirectoryBytes / BlockSize)
	
	
	define void Print() {
		Print("MSFSuperBlock {\n")
		Print("	BlockSize = %x\n", this->BlockSize)
		Print("	FreeBlockMapBlock = %x\n", this->FreeBlockMapBlock)
		Print("	NumberOfBlocks = %x\n", this->NumberOfBlocks)
		Print("	NumberOfDirectoryBytes = %x\n", this->NumberOfDirectoryBytes)
		Print("	Unknown = %x\n", this->Unknown)
		Print("	BlockMapIndex = %x\n", this->BlockMapIndex)
		Print("}\n")
	}
}

i32 MSF_MSF_STREAM_INDEX := 0
i32 MSF_PDB_STREAM_INDEX := 1
i32 MSF_TPI_STREAM_INDEX := 2
i32 MSF_DBI_STREAM_INDEX := 3
i32 MSF_IPI_STREAM_INDEX := 4
i32 MSF_NMS_STREAM_INDEX := 5 ; "/names" stream index
i32 MSF_STREAM_LAST_RESERVED := 4

struct MSFStreamDirectory {
	; This struct does... a lot, for good reason though. This handles the stream number: block numbers mapping
	;  which ends up very complex. Originally, it could only append streams in order. For example, adding
    ;   another stream while building the TPI stream (index 2) would put that new stream in as stream 3
	;    which was a big problem, since loads of streams end up being out of order.
	; So, the struct was rewritten to support 0-size reserved steam indices, and resizing streams after they
	;  were initially added to the directory, which should hopefully be good enough for the rest of the format.
	; If not, I am already dreading rewriting it again.
	
	i32 NumberOfStreams
	i32{0} StreamSizesArray
	
	define i32* GetStreamSizesArray() {
		return this~>StreamSizesArray
	}
	define i32* GetStreamBlocksArray() {
		return (this->GetStreamSizesArray() + this->NumberOfStreams * 4) As i32*
	}
	
	define i32 GetStreamBlockCountFromSize(i32 Size) {
		i32 BlockCount := Size / 0x1000
		
		if (Size % 0x1000) {
			BlockCount += 1
		}
		
		return BlockCount
	}
	define i32 GetStreamBlockCount(i32 StreamIndex) {
		return this->GetStreamBlockCountFromSize(this->GetStreamSizesArray()[StreamIndex])
	}
	
	define i32 GetBlocksArraySize() {
		i32* StreamSizeArray := this->GetStreamSizesArray()
		i32 TotalBlocks := 0
		
		for (i32 StreamIndex := 0, StreamIndex < this->NumberOfStreams, StreamIndex += 1) {
			TotalBlocks += this->GetStreamBlockCountFromSize(StreamSizeArray[StreamIndex])
		}
		
		return TotalBlocks * 4
	}
	define i32 GetSize() {
		return 4 + (this->NumberOfStreams * 4) + this->GetBlocksArraySize()
	}
	define void* GetEnd() {
		return this + this->GetSize()
	}
	
	define i32* GetStreamBlocks(i32 TargetStreamIndex) {
		i32* Start := this->GetStreamBlocksArray()
		
		for (i32 StreamIndex := 0, StreamIndex < TargetStreamIndex, StreamIndex += 1) {
			Start += this->GetStreamBlockCount(StreamIndex) * 4
		}
		
		return Start
	}
	define i32 GetStreamBlock(i32 TargetStreamIndex, i32 BlockIndex) {
		return this->GetStreamBlocks(TargetStreamIndex)[BlockIndex]
	}
	define void SetStreamBlock(i32 TargetStreamIndex, i32 BlockIndex, i32 BlockValue) {
		; Helper for setting a single data block for a given stream
		this->GetStreamBlocks(TargetStreamIndex)[BlockIndex] := BlockValue
	}
	
	define i32* SetStreamSize(i32 StreamIndex, i32 NewSize, i32* OutBlocksNeeded) {
		if (StreamIndex < this->NumberOfStreams) {
			; If this stream index already exists, we are resizing it.
			
			i32* SizesArray := this->GetStreamSizesArray()
			i32 OldSize := SizesArray[StreamIndex]
			
			; Which means we need to figure out how many blocks need to be allocated/freed for this stream
			i32 NewSizeBlockCount := this->GetStreamBlockCountFromSize(NewSize)
			i32 OldSizeBlockCount := this->GetStreamBlockCountFromSize(OldSize)
			i32 BlockCountDifference := NewSizeBlockCount - OldSizeBlockCount
			
			if !(BlockCountDifference) {
				; If there is no difference in current vs required block count, then we can just update
				;  the size of the stream and return
				SizesArray[StreamIndex] := NewSize
				return null
			}
			
			; Otherwise, we need to either shift the entire block index array right/left to either
			;  A) Make more space for any additional blocks
			;  B) Free the space previously taken by the extra blocks this stream had
			
			; We only shift the block indices following this stream's indices, since the size of the target
			;  stream doesn't impact the location of the blocks for any streams before it, only those after.
			i32* NextStreamBlocks := this->GetStreamBlocks(StreamIndex + 1)
			i32 DifferenceAsOffset := BlockCountDifference * 4
			
			; Move all stream blocks up until the end of the stream directory either forward or backward
			;  to either fill the empty space created by this stream losing some blocks, or to make space
			;   for the extra blocks that this stream is gaining.
			MoveMemory(NextStreamBlocks + DifferenceAsOffset, NextStreamBlocks, (this->GetEnd() - NextStreamBlocks) As i32)
			
			; Update this stream's size, and how many blocks the stream has been relieved of or allocated
			SizesArray[StreamIndex] := NewSize
			OutBlocksNeeded[0] := BlockCountDifference
			
			; Finally, we return a pointer to where `OutBlocksNeeded` block numbers should be written after
			;  they are allocated for this stream
			return this->GetStreamBlocks(StreamIndex) + OldSizeBlockCount * 4
		}
		else {
			; If this stream does not already exist, we are creating it (and any before it)
			
			; First thing's first, we need to shift over the block index array to make space for the
			;  block sizes which need to be written for the target+proceeding streams
			i32* BlocksArray := this->GetStreamBlocksArray()
			MoveMemory(BlocksArray + (StreamIndex + 1 - this->NumberOfStreams) * 4, BlocksArray, this->GetBlocksArraySize())
			
			; The stream size array is now expanded, so now we'll write a 0 for the size of any proceeding streams
			i32* StreamSizesArray := this->GetStreamSizesArray()
			
			for (i32 Index := this->NumberOfStreams, Index < StreamIndex, Index += 1) {
				StreamSizesArray[Index] := 0
			}
			
			; Now that all proceeding streams are initialized, we can write the target stream's size into
			;  the stream size array
			StreamSizesArray[StreamIndex] := NewSize
			
			; Update how many streams are in the directory, and how many blocks the new stream will need
			this->NumberOfStreams := StreamIndex + 1
			OutBlocksNeeded[0] := this->GetStreamBlockCountFromSize(NewSize)
			
			; And finally return a pointer to where blocks allocated for this stream should be written.
			;  Since any proceeding streams are given 0 size, they take up 0 bytes in the block index array
			;   so we don't have to worry about them here, the code path for resizing will handle that.
			return this->GetStreamBlocks(StreamIndex)
		}
	}
	
	define i32 AppendStream(i32 Size, i32* OutBlockCount, i32* OutStreamNumber) {
		i32 StreamIndex := this->NumberOfStreams
		
		i32 BlockNumberCount := 0
		i32* BlockNumbers := this->SetStreamSize(StreamIndex, Size, &BlockNumberCount)
		
		OutBlockCount[0] := BlockNumberCount
		OutStreamNumber[0] := StreamIndex
		
		return (BlockNumbers As i64 - this As i64) As i32
	}
}

i64 MSF_MAGIC := 0x53441a0a0d

struct MSFBuilder {
	union {
		void* Buffer
		MSFSuperBlock* SuperBlock
	}
	
	i32 StreamDirectoryBlockIndex
	
	union {
		void* StreamDirectoryBlock
		MSFStreamDirectory* StreamDirectory
	}
	
	i32 NextStreamIndex
	
	PDBStreamBuilder* PDBStreamBuilder
	
	declare void AllocateBlock()
	
	define void Initialize() {
		this->Buffer := Alloc(0x3000)
		this->SuperBlock->NumberOfBlocks := 3
		
		i8* MagicBuffer := this->SuperBlock~>Magic
		
		MoveMemory(MagicBuffer, "Microsoft C/C++ MSF 7.00", 24)
		
		(MagicBuffer + 24 As i64*)[0] := MSF_MAGIC
		
		i8* BlockMapBuffer := this->Buffer + 0x1000
		
		for (i32 BlockMapIndex := 0, BlockMapIndex < 0x2000, BlockMapIndex += 1) {
			BlockMapBuffer[BlockMapIndex] := 0xFF
		}
		
		this->SuperBlock->BlockSize := 0x1000
		this->SuperBlock->FreeBlockMapBlock := 1
		
		; Allocate the first 3 blocks in the file (for the superblock, and free block maps)
		for (i32 Index := 0, Index < 3, Index += 1) {
			this->AllocateBlock()
		}
		
		this->NextStreamIndex := MSF_STREAM_LAST_RESERVED
		this->PDBStreamBuilder := PDBStreamBuilder:New()
	}
	
	define i32 GetSize() {
		return this->SuperBlock->NumberOfBlocks * 0x1000
	}
	define void* GetBlockBuffer(i32 BlockIndex) {
		return this->Buffer + (BlockIndex * 0x1000)
	}
	define void EnsureSize(i32 ForBlockIndex) {
		ForBlockIndex += 1
		
		if (this->SuperBlock->NumberOfBlocks < ForBlockIndex) {
			this->SuperBlock->NumberOfBlocks := ForBlockIndex
			
			this->Buffer := ReAlloc(this->Buffer, ForBlockIndex * 0x1000)
			this->StreamDirectoryBlock := this->GetBlockBuffer(this->StreamDirectoryBlockIndex)
		}
	}
	
	define i32 AllocateBlock() {
		i8* BitMap := this->Buffer + 0x1000 * this->SuperBlock->FreeBlockMapBlock
		
		for (i32 Index := 0, Index < 0x1000, Index += 1) {
			i32 ByteIndex := Index / 8
			i32 BitIndex := Index % 8
			i32 BitMask := 1 << (BitIndex As i8)
			
			i8 TargetByte := BitMap[ByteIndex]
			
			if (TargetByte & BitMask) {
				BitMap[ByteIndex] := TargetByte ^ BitMask
				
				this->EnsureSize(Index)
				return Index
			}
		}
	}
	
	; Note: Many things (mainly callers of `CreateUninitializedStream`) expect any blocks allocated
	;  for a stream to be a contiguous group of blocks, but if freeing blocks was allowed, then
	;   it would be possible for a stream to allocate an out of order list of blocks, making it impossible
	;    to write to the blocks as a single buffer. Which is why `FreeBlock` is commented out.
	
	;define void FreeBlock(i32 BlockIndex) {
	;	i8* BitMap := this->Buffer + 0x1000
	;	
	;	i32 ByteIndex := BlockIndex / 8
	;	i8 BitIndex := BlockIndex % 8
	;	i32 BitMask := 1 << BitIndex
	;	
	;	BitMap[ByteIndex] |= BitMask
	;}
	
	define void AllocateStreamDirectory() {
		i32 StreamDirectoryIndexBlockNumber := this->AllocateBlock()
		i32 StreamDirectoryBlockNumber := this->AllocateBlock()
		
		this->SuperBlock->BlockMapIndex := StreamDirectoryIndexBlockNumber
		
		i32* StreamDirectoryIndex := this->GetBlockBuffer(StreamDirectoryIndexBlockNumber)
		
		StreamDirectoryIndex[0] := StreamDirectoryBlockNumber
		
		this->StreamDirectoryBlockIndex := StreamDirectoryBlockNumber
		this->StreamDirectoryBlock := this->GetBlockBuffer(StreamDirectoryBlockNumber)
	}
	
	define void SetStreamData(i32 StreamIndex, void* StreamData, i32 StreamSize) {
		; For any stream which needs to be in the stream directory, and have blocks allocated for it
		;  (ex: The TPI stream)
		; Optionally commits the serialized stream data to the allocated blocks (if the data is passed)
		; Allows for uninitialized streams through the `StreamData != null` checks
		
		i32 BlocksNeeded := 0
		i32 BlockBufferOffset := this->StreamDirectory->SetStreamSize(StreamIndex, StreamSize, &BlocksNeeded)
		
		i32 Remainder := StreamSize % 0x1000
		
		if (Remainder) {
			BlocksNeeded -= 1
		}
		
		for (i32 BlockIndex := 0, BlockIndex < BlocksNeeded, BlockIndex += 1) {
			i32 NextBlock := this->AllocateBlock()
			
			this->StreamDirectory->SetStreamBlock(StreamIndex, BlockIndex, NextBlock)
			
			if (StreamData != null) {
				MoveMemory(this->GetBlockBuffer(NextBlock), StreamData, 0x1000)
				StreamData += 0x1000
			}
		}
		
		if (Remainder) {
			NextBlock := this->AllocateBlock()
			
			this->StreamDirectory->SetStreamBlock(StreamIndex, BlockIndex, NextBlock)
			
			if (StreamData != null) {
				MoveMemory(this->GetBlockBuffer(NextBlock), StreamData, Remainder)
			}
		}
	}
	define i32 AppendStream(void* StreamData, i32 StreamSize) {
		; For streams without a static index, and with serialized data (ex: TPI hash stream)
		
		this->NextStreamIndex += 1
		i32 StreamIndex := this->NextStreamIndex
		
		this->SetStreamData(StreamIndex, StreamData, StreamSize)
		
		return StreamIndex
	}
	define i32 SetNamedStreamData(i8* StreamName, void* StreamData, i32 StreamSize) {
		; For named streams without a static index, and with serialized data
		
		i32 StreamNumber := this->AppendStream(StreamData, StreamSize)
		
		this->PDBStreamBuilder->NameMap->Set(StreamName, StreamNumber)
		
		return StreamNumber
	}
	define void* GetStreamBuffer(i32 StreamIndex) {
		i32 FirstBlock := this->StreamDirectory->GetStreamBlock(StreamIndex, 0)
		return this->GetBlockBuffer(FirstBlock)
	}
	define void* CreateUninitializedStream(i32 StreamIndex, i32 StreamSize) {
		; For streams with a static index, but without serialized data. Returns a buffer for the stream's
		;  builder to serialize itself into.
		
		this->SetStreamData(StreamIndex, null, StreamSize)
		
		return this->GetStreamBuffer(StreamIndex)
	}
	
	define i32 PointerToOffset(void* PointerIntoBuffer) {
		return (PointerIntoBuffer - this->Buffer) As i32
	}
	define void* OffsetToPointer(i32 Offset) {
		return this->Buffer + Offset
	}
	
	define void Finalize() {
		void* PDBStreamBuffer := this->CreateUninitializedStream(MSF_PDB_STREAM_INDEX, this->PDBStreamBuilder->GetSize())
		this->PDBStreamBuilder->SerializeInto(PDBStreamBuffer, 0, 0)
		
		this->SuperBlock->NumberOfDirectoryBytes := this->StreamDirectory->GetSize()
	}
	
	define void WriteToFile(i8* FilePath) {
		FileDelete(FilePath)
		
		i64 File := FileOpen(FilePath, FILE_WRITE | FILE_CREATE_NEW)
		
		FileWrite(File, this->Buffer, this->GetSize())
		
		FileClose(File)
	}
}
