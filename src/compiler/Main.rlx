#Require "$/Memory.rlx"
#Require "$/File.rlx"

#Require "$/String.rlx"
#Require "$/Console.rlx"
#Require "$/SafeString.rlx"
#Require "$/HashMap.rlx"
#Require "$/Debug.rlx"

declare i16* OpenAndRead(i8*, i32*)

#Require "./src/compiler/Lexer.rlx"
#Require "./src/compiler/ErrorReporting.rlx"
#Require "./src/compiler/Parser.rlx"
#Require "./src/compiler/PEBuilder.rlx"
#Require "./src/compiler/ELFBuilder.rlx"
#Require "./src/compiler/Compiler.rlx"

BuildConfig* CurrentConfig := null

define void CompilerUnhandledExceptionHandler(i64 Code) {
	UnhandledExceptionHandler(Code)
	
	Print("Lexer State: \n")
	
	LexerState* Lexer := CurrentConfig->Lexer
	LexerState* Child := Lexer
	
	for (i32 Depth := 0, Child != null, Depth += 1) {
		for (i32 Tabs := 0, Tabs < Depth, Tabs += 1) {
			Print("	")
		}
		
		Print("'")
		Child->SourceFilePath->Print()
		Print("' on line %i\n", Child->CurrentLineNumber)
		
		Child := Child->Child
	}
	
}

i8* ProgramName := "[compiler]"

define void Help() {	
	Print("Usage: %s [INPUT_FILE] [OUTPUT_FILE]\n", ProgramName)
	Print("       %s [OPTIONS] -i [INPUT_FILE] -o [OUTPUT_FILE]\n", ProgramName)
	Print("Compiles the given program, and writes an executable in the provided output format.\n")
	Print("If no output format is given, it is assumed based on the current OS.\n")
	Print(" (On Windows, PE/exe files are the default. On Linux, ELF files are the default)\n\n")

	Print(" Input/output file paths (one of each is required)\n")
	Print("   -i \t\t\t set [INPUT_FILE] to the following path\n")
	Print("   -o \t\t\t set [OUTPUT_FILE] to the following path\n")

	Print(" Output file format options (only one can be specified):\n")
	Print("   --elf \t\t write the compiled code into an ELF (Linux) executable\n")
	Print("   --pe \t\t write the compiled code into a PE/exe (Windows) executable\n")
	Print("   --bin \t\t write the compiled code into a raw bin file, with no format\n") 
	Print("         \t\t  which can be loaded into any RWX memory and executed\n")

	Print(" Line ending options (only one can be specified):\n")
	Print("   --cr \t\t replace \"\\n\" inside of strings with CR (Unix line endings)\n")
	Print("   --crlf \t\t replace \"\\n\" inside of strings with CRLF (Windows line endings)\n")

	Print(" Debug info options (any/all can be specified):\n")
	Print("   --debug \t\t emit very basic debug info which can be used to provide function names in stack traces\n")
	Print("   --dwarf \t\t emit DWARF debugging info for use with GDB or any other DWARF compatible debugger\n")
	Print("           \t\t  (only valid when the output file format is ELF)\n")

	Print(" Info dump options (any/all can be specified):\n")
	Print("   --functions \t\t print a dump of function names/addressed after compilation\n")
	Print("   --globals \t\t print a dump of global variable sizes/addresses after compilation\n")
	Print("   --lines \t\t print a dump of line numbers/addresses after compilation\n")

	Print(" Other:\n")
	Print("   -h \t\t\t print this help message\n")
	Print("   --help\n")
	Print("   --no-colors \t\t disables writing ANSI escapes to prettify output\n")

	windows {
		i8 SuccessStatus := 1
	}
	linux {
		i8 SuccessStatus := 0
	}
	
	Print("\nThe compiler will exit with code %i when the program is successfully compiled, printing any warnings/errors to stderr.\n", SuccessStatus)
	Print("Note: For legacy reasons, the compiler considers 1 as a \"success\" exit code on Windows, and 0 as a \"success\" code on Linux.\n")
	Print("The first line of this message contains the correct \"success\" code for this compiler binary (\"%s\").\n", ProgramName)
	
	Print("\nOccasionally, the compiler will exit with a failing status code, but without printing an error to stdout.\n")
	Print("Or, instead of printing a \"pretty\" error, it will print a raw stack dump, along with some extra debugging info.\n\n")
	Print("This is a compiler bug, and it should be reported. Thankfully, this kind of bug is getting rarer and rarer.\n")

	Exit(SuccessStatus)
}

define i32 Main(i64 ArgC, i8** ArgV) {	
	GetArgs(&ArgC, &ArgV) /* NOP on Linux */
	
	ProgramName := ArgV[0]
	
	i8* ProgramDirectory := GetAbsolutePath(Concatenate(ArgV[0], "/../../"))
	
	BuildConfig* Config := Alloc(#BuildConfig)
	
	Config->LibraryDirectory := Concatenate(ProgramDirectory, "src/lib")
	Config->IncludedFiles := HashMap:New()
	
	Config->DumpInfo := 0
	Config->LineEnding := LINE_ENDING_DEFAULT
	Config->PESubsystem := IMAGE_SUBSYSTEM_WINDOWS_CUI
	
	windows {
		Config->OutputFormat := OUTPUT_PE
	}
	linux {
		Config->OutputFormat := OUTPUT_ELF
	}
	
	i8* InputFilePath := null
	i8* OutputFilePath := null
	i8 DumpFunctionBytes := false
	
	for (i32 Index := 0, Index < ArgC, Index += 1) {
		i8* NextOption := ArgV[Index]
		
		if      (StringEquals(NextOption, "--elf")) { Config->OutputFormat := OUTPUT_ELF }
		else if (StringEquals(NextOption, "--pe" )) { Config->OutputFormat := OUTPUT_PE  }
		else if (StringEquals(NextOption, "--bin")) { Config->OutputFormat := OUTPUT_BIN }
		
		else if (StringEquals(NextOption, "--pe-reloc")) { Config->DebugMode |= DEBUG_EMIT_RELOC }
		else if (StringEquals(NextOption, "--pe-subsystem")) { 
			Index += 1
			
			Config->PESubsystem := AToI(ArgV[Index]) As i16
			
			Print("Using PE subsystem %i\n", Config->PESubsystem)
		}
		
		else if (StringEquals(NextOption, "--functions")) { Config->DumpInfo |= DUMP_FUNCTIONS }
		else if (StringEquals(NextOption, "--globals"  )) { Config->DumpInfo |= DUMP_GLOBALS   }
		else if (StringEquals(NextOption, "--present-globals"  )) { Config->DumpInfo |= DUMP_PRESENT_GLOBALS   }
		else if (StringEquals(NextOption, "--optimized-globals"  )) { Config->DumpInfo |= DUMP_OPTIMIZED_GLOBALS   }

		else if (StringEquals(NextOption, "--lines"    )) { Config->DumpInfo |= DUMP_LINES     }
		
		else if (StringEquals(NextOption, "--debug")) { Config->DebugMode |= DEBUG_EMIT_FUNCTION_NAMES }
		else if (StringEquals(NextOption, "--dwarf")) { Config->DebugMode |= DEBUG_EMIT_DWARF          }
		
		else if (StringEquals(NextOption, "--symbols")) { Config->DebugMode |= DEBUG_EMIT_SYMBOLS }
		else if (StringEquals(NextOption, "--global-symbols")) { Config->DebugMode |= DEBUG_EMIT_GLOBAL_SYMBOLS }
		else if (StringEquals(NextOption, "--function-symbols")) { Config->DebugMode |= DEBUG_EMIT_FUNCTION_SYMBOLS }
		else if (StringEquals(NextOption, "--dynamic")) { Config->DebugMode |= DEBUG_EMIT_DYNAMIC }
			
		else if (StringEquals(NextOption, "--cr"  )) { Config->LineEnding := LINE_ENDING_CR   }
		else if (StringEquals(NextOption, "--crlf")) { Config->LineEnding := LINE_ENDING_CRLF }

		else if (StringEquals(NextOption, "--silent")) {
			Config->DumpInfo |= DUMP_SILENT
		}
		else if (StringEquals(NextOption, "--makedep")) {
			Config->DumpInfo |= DUMP_SILENT | DUMP_MAKEDEP
		}


		else if (StringEquals(NextOption, "--windows")) {
			Config->PlatformName := "windows"
			Config->OutputFormat := OUTPUT_PE
			Config->LineEnding   := LINE_ENDING_CRLF
			Config->PESubsystem  := IMAGE_SUBSYSTEM_WINDOWS_CUI
		}
		else if (StringEquals(NextOption, "--efi")) {
			Config->PlatformName := "efi"
			Config->OutputFormat := OUTPUT_PE
			Config->LineEnding   := LINE_ENDING_CRLF
			Config->PESubsystem  := IMAGE_SUBSYSTEM_EFI_APPLICATION
		}
		else if (StringEquals(NextOption, "--linux")) {
			Config->PlatformName := "linux"
			Config->OutputFormat := OUTPUT_ELF
			Config->ELFABI       := ELF_ABI_LINUX
			Config->LineEnding   := LINE_ENDING_CR
		}
		else if (StringEquals(NextOption, "--freebsd")) {
			Config->PlatformName := "freebsd"
			Config->OutputFormat := OUTPUT_ELF
			Config->ELFABI       := ELF_ABI_FREEBSD
			Config->LineEnding   := LINE_ENDING_CR
		}
		else if (StringEquals(NextOption, "--standalone-elf")) {
			Config->OutputFormat := OUTPUT_ELF
			Config->ELFABI       := ELF_ABI_SYSTEMV
			Config->LineEnding   := LINE_ENDING_CR
		}
		else if (StringEquals(NextOption, "--platform")) {
			Config->PlatformName := ArgV[++Index]
		}
		else if (StringEquals(NextOption, "--platform-dir")) {
			Config->PlatformDirectory := ArgV[++Index]
		}

		
		else if (StringEquals(NextOption, "--no-colors")) {
			NO_COLORS := true
		}
		
		else if (StringEquals(NextOption, "-i") && !InputFilePath) {
			Index += 1
			InputFilePath := ArgV[Index]
		}
		else if (StringEquals(NextOption, "-o") && !OutputFilePath) {
			Index += 1
			OutputFilePath := ArgV[Index]
		}
		else if (StringEquals(NextOption, "-h") || StringEquals(NextOption, "--help")) {
			Help()
		}
	}

	if !(InputFilePath && OutputFilePath) {
		if (ArgC = 3) {
			InputFilePath := ArgV[1]
			OutputFilePath := ArgV[2]
		}
		else {
			SwapOutputStream()
			Print("No input+output file, aborting")
			Exit(1)
		}
	}

	if (Config->PlatformName && Config->PlatformDirectory = null) {
		i32 PlatformDirectoryNameLength := StringLength(Config->LibraryDirectory) + StringLength(Config->PlatformName) + 2

		Config->PlatformDirectory := Alloc(PlatformDirectoryNameLength)

		FormatString(Config->PlatformDirectory, PlatformDirectoryNameLength, "%s/%s", Config->LibraryDirectory, Config->PlatformName)
	}

	FileDelete(OutputFilePath)

	if !(Config->DumpInfo & DUMP_SILENT) {
		Print("Input File: '%s'\n", InputFilePath)
		Print("Output File: '%s'\n", OutputFilePath)

		if (Config->OutputFormat != OUTPUT_ELF && Config->DebugMode & DEBUG_EMIT_DWARF) {
			Print("^60Warning: `--dwarf` flag is only implemented for ELF files.^F0\n")
		}
	}
	
	if (Config->LineEnding = LINE_ENDING_DEFAULT) {
		if (Config->OutputFormat = OUTPUT_PE) {
			Config->LineEnding := LINE_ENDING_CRLF 
		}
		else {
			Config->LineEnding := LINE_ENDING_CR
		}
	}
	
	CurrentConfig := Config
	UnhandledExceptionHandler := &CompilerUnhandledExceptionHandler
	
	Config->SourceFile := InputFilePath
	Config->TargetABI := ABI_SYSTEMV
	Config->ImageBase := DEFAULT_IMAGE_BASE
	
	Config->IncludedFiles->Set(InputFilePath, GetAbsolutePath(InputFilePath))
	
	i32 SourceLength := 0
	i8* Source := OpenAndRead(InputFilePath, &SourceLength)
	
	LexerState* Lexer := LexerState:New(Config, Source, SourceLength, AToS(InputFilePath))
	Config->Lexer := Lexer
	
	ParserState* Parser := ParserState:New(Config, Lexer)
	Parser->ParseProgram()

	if (Config->DumpInfo & DUMP_MAKEDEP) {
		FileDelete(OutputFilePath)
		i64 MakeDep := FileOpen(OutputFilePath, FILE_CREATE_NEW | FILE_WRITE)

		void* Elements := Config->IncludedFiles->Elements
	
		for (i32 ElementIndex := 0, ElementIndex < (Config->IncludedFiles->BufferMaxCount), ElementIndex += 1) {
			if (Elements[ElementIndex]) {
				HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
				
				while (FoundElement) {
					i8* NextFile := FoundElement->Value
					
					FileWrite(MakeDep, NextFile, StringLength(NextFile))
					FileWrite(MakeDep, " ", 1)
					
					/* Update the current element to be the next element in the linked list */
					FoundElement := FoundElement->NextElement
				}
			}
		}

		FileTruncate(MakeDep, FileTell(MakeDep) - 1)

		FileClose(MakeDep)
	}
	else {
		CompilerStart(Config, Parser, OutputFilePath)
	}
	
	;Print("%x\n", Heap->End - Heap->Base)
	
	; Todo: Make the exit code consistent
	
	windows {
		return 1
	}
	linux {
		return 0
	}
}
