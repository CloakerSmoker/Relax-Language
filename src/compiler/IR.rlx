#Require "./src/lib/Memory.rlx"
#Require "./src/lib/File.rlx"

#Require "./src/lib/String.rlx"
#Require "./src/lib/Console.rlx"
#Require "./src/lib/SafeString.rlx"
#Require "./src/lib/HashMap.rlx"
#Require "./src/lib/Debug.rlx"

#Require "./src/compiler/Utility.rlx"
#Require "./src/compiler/Lexer.rlx"
#Require "./src/compiler/Parser.rlx"



;declare i8 Frob(i8*)
;
;define void Main(i64 ArgC, i8** ArgV) {
;	if (ArgC < 2) {
;		Exit(0)
;	}
;	
;	i8* Path := ArgV[1]
;	
;	Frob(Path)
;}
;
;
;define void Main(i64 ArgC, i8** ArgV) {
;	load.8, t1, ArgC
;	laod_integer.8, t2, 2
;	binary.8, t3, t1, <, t2
;	
;	conditional.1, t3, {
;		load_integer.1, t4, 0
;		call, t5, exit, [t4]
;	}, {
;		load_index.8, t6, ArgV, 1
;		set.8, Path, t6
;		
;		load.8, t7, Path
;		call.1, t8, Frob, [t7]
;	}
;}

; Var		 => IR_LOAD
; Var[Index] => IR_LOAD_INDEX (or IR_LOAD_OFFSET if possible)
; Var->Field => IR_LOAD_OFFSET
; 1			 => IR_LOAD_INTEGER
; "abc"		 => IR_LOAD_CONSTANT_ADDRESS
; Var := X	 => IR_STORE
; Var[Index] => IR_STORE_INDEX
; Var->Field => IR_STORE_OFFSET
; 1 + 2		 => IR_BINARY
; !1		 => IR_UNARY
; Fun()		 => IR_CALL
; return	 => IR_RETURN

#Require "./src/compiler/IR/Nodes.rlx"

bits LoopLables As i64 {
	[0:31] ContinueLabel,
	[32:63] BreakLabel
}

struct IRBackendTraits {
	void* State
	void* MapRegister
	void* UnMapRegister
	
	void* EndFunction
	
	void* SetLabel
	void* EmitNode
	
	static IRBackendTraits* New(void* State, void* MapRegister, void* UnMapRegister, void* EmitNode, void* SetLabel, void* EndFunction) {
		IRBackendTraits* this := Alloc(#IRBackendTraits)
		
		this->State         := State
		this->MapRegister   := MapRegister
		this->UnMapRegister := UnMapRegister
		this->EmitNode      := EmitNode
		this->SetLabel      := SetLabel
		this->EndFunction   := EndFunction
		
		return this
	}
	
	define void MapRegister(i64 Register) {
		asm (rdi := this->State, rsi := Register, rax := this->MapRegister) {
			call, rax
		}
	}
	define void UnMapRegister(i64 Register) {
		asm (rdi := this->State, rsi := Register, rax := this->UnMapRegister) {
			call, rax
		}
	}
	define void EmitNode(IRNode* Node) {
		asm (rdi := this->State, rsi := Node, rax := this->EmitNode) {
			call, rax
		}
	}
	define void SetLabel(i32 LabelNumber) {
		asm (rdi := this->State, rsi := LabelNumber, rax := this->SetLabel) {
			call, rax
		}
	}
	define void EndFunction() {
		asm (rdi := this->State, rax := this->EndFunction) {
			call, rax
		}
	}
}

struct IRLiveRegister {
	i64 Key
	
	union {
		i8 ReferenceCount
		i64 Padding
	}
}

struct IRCompilerState {
	IRLiveRegister[100] LiveRegisters
	
	i64 NextVirtualRegister
	i8* RegisterReferenceCounts
	
	i32 NodeCapacity
	IRNode* Nodes
	
	union {
		i32 NextNodeIndex
		i32 NodeCount
	}
	
	i32 BlockCount
	i32 BlockCapacity
	i32* BlockOffsets
	i32* BlockSizes
	i8* BlocksVisited
	
	i32 CurrentBlock
	
	HashMap LocalsToIRVariables
	
	IRBackendTraits* Backend
	
	static IRCompilerState* New(i32 InitialLabelCount, IRBackendTraits* Backend) {
		IRCompilerState* this := Alloc(#IRCompilerState)
		
		this->NextVirtualRegister := 1
		
		this->NodeCapacity := 0x500
		this->Nodes := Alloc(this->NodeCapacity * #IRNode)
		
		this->BlockCapacity := 0x200
		this->BlockOffsets := Alloc(this->BlockCapacity * #i32)
		this->BlockSizes := Alloc(this->BlockCapacity * #i32)
		this->BlocksVisited := Alloc(this->BlockCapacity * #i8)
		this->BlockCount := InitialLabelCount
		
		this->CurrentBlock := -1
		
		this->RegisterReferenceCounts := Alloc(0x1000)
		
		this~>LocalsToIRVariables->Initialize()
		
		this->Backend := Backend
		
		return this
	}
	
	define IRLiveRegister* FindOrAddLiveRegister(i64 Register) {
		i64 FirstIndex := Register % 100
		i64 BestFreeIndex := 100
		
		;IRPrint("FindOrAddLiveRegister(%t), %i\n", Register, FirstIndex)
		
		for (i64 Index := FirstIndex, Index < 100, Index++) {
			IRLiveRegister* Next := this~>LiveRegisters[Index]
			
			if (Next->Key = Register) {
				return Next
			}
			else if (Next->Key = 0 && Index < BestFreeIndex) {
				BestFreeIndex := Index
			}
		}
		
		if (BestFreeIndex = 100) {
			BestFreeIndex := -1
		}
		
		for (Index := FirstIndex, Index >= 0, Index--) {
			IRLiveRegister* Last := this~>LiveRegisters[Index]
			
			if (Last->Key = Register) {
				return Last
			}
			else if (Last->Key = 0 && Index > BestFreeIndex) {
				BestFreeIndex := Index
			}
		}
		
		if (BestFreeIndex < 0 || BestFreeIndex >= 100) {
			IRPrint("FindOrAddLiveRegister(%t) failed\n", Register)
			Throw(123)
		}
		
		IRLiveRegister* Result := this~>LiveRegisters[BestFreeIndex]
		
		Result->Key := Register
		
		return Result
	}
	
	declare void EmitAllocate(i64, i32)
	declare void EmitFree(i64)
	
	define void AddLiveRegisterReference(i64 Register) {
		;Print("AddRef: ")
		
		auto LiveRegister := this->FindOrAddLiveRegister(Register)
		
		LiveRegister->ReferenceCount += 1
	}
	define void DestroyLiveRegisterReference(i64 Register) {
		;Print("Destroy: ")
		
		auto LiveRegister := this->FindOrAddLiveRegister(Register)
		
		if (LiveRegister->ReferenceCount = 0) {
			IRPrint("DestroyRegisterReference(%t) for value that wasn't alive\n", Register)
			Throw(123)
		}
		
		LiveRegister->ReferenceCount -= 1
		
		if (LiveRegister->ReferenceCount = 0) {
			TemporaryRegister MaybeVariable := Register As TemporaryRegister
			
			if (MaybeVariable.IsVariable) {
				IRVariable* Variable := MaybeVariable.PointerValue As IRVariable*
				
				if (Variable->ReferenceCount != Variable->MaxReferenceCount) {
					;IRPrint("Final free for %t ignored, %i out of %i references seen\n", Register, Variable->ReferenceCount, Variable->MaxReferenceCount)
					
					return
				}
			}
			
			LiveRegister->Key := 0
			
			this->EmitFree(Register)
		}
	}
	
	define IRVariable* FindOrAddVariable(VariableInfo* ActualVariable) {
		if (ActualVariable->IsGlobal) {
		
		}
		else {
			HashMapElement* FoundLocalElement := this~>LocalsToIRVariables->Get(ActualVariable->Name)
			
			if (FoundLocalElement) {
				this->AddLiveRegisterReference((FoundLocalElement->Value As IRVariable*)->ToRegister())
				
				return FoundLocalElement->Value
			}
			else {
				i8 ActualVariableSize := GetTypeSize(ActualVariable->Type) As i8
				
				IRVariable* NewVariable := IRVariable:New(ActualVariable->Name->Buffer, ActualVariable->StackOffset, ActualVariableSize, false, ActualVariable->GetCount As i8)
				
				this~>LocalsToIRVariables->Set(ActualVariable->Name, NewVariable)
				
				this->EmitAllocate(NewVariable->ToRegister(), ActualVariableSize)
				this->AddLiveRegisterReference(NewVariable->ToRegister())
				
				return NewVariable
			}
		}
		
		return null
	}
	
	declare IRNode* AppendNode(i8)
	
	define void EndBlock() {
		if (this->CurrentBlock >= 0) {
			i32 StartIndex := this->BlockOffsets[this->CurrentBlock]
			i32 CurrentIndex := this->NextNodeIndex
			i32 Length := CurrentIndex - StartIndex
			
			this->BlockSizes[this->CurrentBlock] := Length
		}
	}
	
	define i32 StartBlock(i32 Number) {
		this->EndBlock()
		
		this->CurrentBlock := Number
		
		this->BlockOffsets[Number] := this->NextNodeIndex
		
		return Number
	}
	
	define i32 SetLabel() {
		return this->StartBlock(this->BlockCount++)
	}
	define i32 SetLabel(i32 LabelNumber) {
		return this->StartBlock(LabelNumber)
	}
	define i32 ReserveLabel() {
		return this->BlockCount++
	}
	
	define void Extend(i32 ExtraNodeCount) {
		if (this->NextNodeIndex + ExtraNodeCount >= this->NodeCapacity) {
			this->NodeCapacity += 0x500
			this->Nodes := ReAlloc(this->Nodes, this->NodeCapacity * #IRNode)
		}
	}
	
	define IRNode* AppendNode(i8 Kind) {
		this->Extend(#IRNode)
		
		IRNode* Result := this->Nodes[this->NextNodeIndex++]
		
		Result->Kind := Kind
		
		return Result
	}
	define i32 GetNodeIndex(IRNode* Node) {
		i64 Offset := (Node - this->Nodes) As i64
		
		return (Offset / #IRNode) As i32
	}
	
	define i64 AllocateRegister(i32 Size) {
		i64 Result := this->NextVirtualRegister++
		
		this->EmitAllocate(Result, Size)
		this->AddLiveRegisterReference(Result)
		
		return Result
	}
	define i64 AllocateRegister() {
		return this->AllocateRegister(8)
	}
	
	define i64 UseRegister(i64 RawRegister) {
		this->DestroyLiveRegisterReference(RawRegister)
		
		TemporaryRegister Register := RawRegister As TemporaryRegister
		
		;Print("UR %x\n", RawRegister)
		
		if (Register.IsVariable) {
			IRVariable* Variable := Register.PointerValue As IRVariable*
			
			;Print("V %x\n", Variable)
			Variable->ReferenceCount += 1
			
		}
		else {
			this->RegisterReferenceCounts[RawRegister] += 1		
		}
		
		return RawRegister
	}
	define i8 GetRegisterReferenceCount(i64 RawRegister) {
		TemporaryRegister Register := RawRegister As TemporaryRegister
		
		if (Register.IsVariable) {
			IRVariable* Variable := Register.PointerValue As IRVariable*
			
			return Variable->ReferenceCount
		}
		else {
			return this->RegisterReferenceCounts[RawRegister]
		}
	}
	define void DestroyRegisterReference(i64 RawRegister) {
		TemporaryRegister Register := RawRegister As TemporaryRegister
		
		if (Register.IsVariable) {
			IRVariable* Variable := Register.PointerValue As IRVariable*
			
			Variable->ReferenceCount -= 1
		}
		else {
			this->RegisterReferenceCounts[RawRegister] -= 1
		}
	}
	
	#Include "./src/compiler/IR/EmitNodes.rlx"
	
	#Include "./src/compiler/IR/CompileAST.rlx"
	
	define IRNode* GetBlockNode(i32 Index, i32 Node) {
		return this->Nodes[this->BlockOffsets[Index] + Node]
	}
	
	#Include "./src/compiler/IR/Optimizations.rlx"
	
	define void Generate(i32 Index) {
		if (this->BlocksVisited[Index]) {
			return
		}
		
		this->BlocksVisited[Index] := true
		
		this->Backend->SetLabel(Index)
		
		i32 Start := this->BlockOffsets[Index]
		i32 Size := this->BlockSizes[Index]
		
		IRNode* FirstNode := this->Nodes[Start]
		
		if (Size > 0) {
			IRNode* LastNode := this->Nodes[Start + Size - 1]
			
			if (LastNode->Kind = IR_JUMP) {
				if (LastNode->JumpToBlock = Index + 1) {
					LastNode->IsNotPresent := true
				}
			}
		}
		
		for (i32 NodeIndex := 0, NodeIndex < Size, NodeIndex++) {
			IRNode* NextNode := this->Nodes[Start + NodeIndex] 
			
			if (NextNode->IsNotPresent) {
				continue
			}
			
			;Print("Generate {") NextNode->Print() Print("}\n")
			
			;if (NextNode->IsInCategory(IR_HAS_DESTINATION)) {
			;	this->Backend->MapRegister(NextNode->Destination)
			;}
			;
			;i8 HasOneOperand  := NextNode->IsInCategory(IR_HAS_ONE_OPERAND)
			;i8 HasTwoOperands := NextNode->IsInCategory(IR_HAS_TWO_OPERANDS)
			;
			;if (HasOneOperand) {
			;	this->DestroyRegisterReference(NextNode->Operand)
			;	
			;	if (HasTwoOperands) {
			;		this->DestroyRegisterReference(NextNode~>Operands[1])
			;	}
			;}
			
			this->Backend->EmitNode(NextNode)
			
			;if (HasOneOperand) {
			;	if (this->GetRegisterReferenceCount(NextNode->Operand) = 0) {
			;		this->Backend->UnMapRegister(NextNode->Operand)
			;	}
			;	
			;	if (HasTwoOperands) {
			;		if (this->GetRegisterReferenceCount(NextNode~>Operands[1]) = 0) {
			;			this->Backend->UnMapRegister(NextNode~>Operands[1])
			;		}
			;	}
			;}
		}
		
		if (Size > 0) {
			if (LastNode->Kind = IR_JUMP) {
				this->Generate(LastNode->JumpToBlock)
			}
			else if (LastNode->Kind = IR_CONDITIONAL) {
				this->Generate(LastNode->TrueBlock)
				this->Generate(LastNode->FalseBlock)
			}
		}
		
		if (FirstNode->Is(IR_FUNCTION)) {
			this->Backend->EndFunction()
		}
	}
	define void Generate() {
		for (i32 BlockIndex := 0, BlockIndex < this->BlockCount, BlockIndex++) {
			if (this->BlockSizes[BlockIndex] != 0 && this->GetBlockNode(BlockIndex, 0)->Kind = IR_FUNCTION) {
				this->Generate(BlockIndex)
			}
		}
	}
	
	define void PrintBlocks() {
		for (i32 BlockIndex := 0, BlockIndex < this->BlockCount, BlockIndex++) {
			i32 NextBlockStart := this->BlockOffsets[BlockIndex]
			i32 NextBlockSize := this->BlockSizes[BlockIndex]
			
			Print("l%i (%i, %i) {\n", BlockIndex, NextBlockStart, NextBlockSize)
			
			for (i32 NodeIndex := 0, NodeIndex < NextBlockSize, NodeIndex++) {
				IRNode* NextNode := this->Nodes[NextBlockStart + NodeIndex]
				
				Print("\t")
				NextNode->Print()
				Print("\n")
			}
			
			Print("}\n")
		}
	}
	define void PrintIndent(i32 Depth, i8* String) {
		for (i32 Index := 0, Index < Depth, Index++) {
			Print("%s", String)
		}
	}
	define void PrintControlFlowGraph(i32 Index) {
		if (this->BlocksVisited[Index]) {
			return
		}
		
		this->BlocksVisited[Index] := true
		
		i32 Start := this->BlockOffsets[Index]
		i32 Size := this->BlockSizes[Index]
		
		if (Size = 0) {
			return
		}
		
		Print("\tL%i [shape=box label=\"L%i:\\l", Index, Index)
		
		for (i32 NodeIndex := 0, NodeIndex < Size, NodeIndex++) {
			IRNode* NextNode := this->Nodes[Start + NodeIndex] 
			
			if (NextNode->IsNotPresent) {
				continue
			}
			
			Print("\t")
			NextNode->Print()
			Print("\\l")
		}
		
		Print("\"];\n")
		
		if (Size > 0) {
			NextNode := this->Nodes[Start + Size - 1]
			
			if (NextNode->Kind = IR_JUMP) {
				Print("\tL%i -> L%i;\n", Index, NextNode->JumpToBlock)
				
				this->PrintControlFlowGraph(NextNode->JumpToBlock)
			}
			else if (NextNode->Kind = IR_CONDITIONAL) {
				Print("\tL%i -> L%i [label=\"true\"];\n", Index, NextNode->TrueBlock)
				Print("\tL%i -> L%i [label=\"false\"];\n", Index, NextNode->FalseBlock)
				
				this->PrintControlFlowGraph(NextNode->TrueBlock)
				this->PrintControlFlowGraph(NextNode->FalseBlock)
			}
		}
	}
	define void PrintControlFlowGraph() {
		Print("digraph CFG {\n")
		
		for (i32 BlockIndex := 0, BlockIndex < this->BlockCount, BlockIndex++) {
			this->PrintControlFlowGraph(BlockIndex)
			
			for (i32 NodeIndex := 0, NodeIndex < this->BlockSizes[BlockIndex], NodeIndex++) {
				IRNode* NextNode := this->GetBlockNode(BlockIndex, NodeIndex)
				
				if (NextNode->Kind = IR_CALL) {
					Print("\tL%i -> L%i [color=blue,arrowtail=inv,dir=back];\n", BlockIndex, NextNode->CallToBlock)
				}
			}
		}
		
		Print("}\n")
	}
}

#Require "./src/lib/Debug.rlx"
#Require "./src/compiler/IR/X64Generator.rlx"
#Require "./src/compiler/IR/X64.rlx"

#Require "./src/compiler/PEBuilder.rlx"

#Require "./src/compiler/Parser/OptimizeAST.rlx"

define void Main(i64 ArgC, i8** ArgV) {
	GetArgs(&ArgC, &ArgV)
	
	if (ArgC != 2) {
		Print("No input file\n")
		Exit(1)
	}
	
	BuildConfig* Config := Alloc(#BuildConfig)
	
	Config->DumpInfo := 0
	Config->LineEnding := LINE_ENDING_DEFAULT
	
	windows {
		Config->OutputFormat := OUTPUT_PE
	}
	linux {
		Config->OutputFormat := OUTPUT_ELF
	}
	
	i8* InputFilePath := ArgV[1]
	
	i32 SourceLength := 0
	i8* Source := OpenAndRead(InputFilePath, &SourceLength)
	
	LexerState* Lexer := LexerState:New(Config, Source, SourceLength, AToS(InputFilePath))
	Config->Lexer := Lexer
	
	ParserState* Parser := ParserState:New(Config, Lexer)
	Parser->ParseProgram()
	
	CountReferences(Parser)
	
	IRToX64* x64Gen := IRToX64:New(Parser->LabelCount)
	IRCompilerState* IR := IRCompilerState:New(Parser->LabelCount, x64Gen->GetTraits())
	x64Gen->IR := IR
	
	IR->SetLabel()
	
	if (Parser->MainFunction = null) {
		Print("No main function\n")
		Exit(1)
	}
	
	IR->CompileFunctionHashMap(Parser~>Functions)
	
	;i32 Left := IR->EmitInteger(20, 4)
	;i32 Right := IR->EmitInteger(192, 4)
	;
	;i32 JumpToTrue := IR->ReserveLabel()
	;i32 JumpToFalse := IR->ReserveLabel()
	;
	;IR->EmitConditional(Left, 4, JumpToTrue, JumpToFalse)
	;
	;IR->EmitInteger(1, 1)
	;IR->EmitInteger(2, 1)
	;
	;IR->SetLabel(JumpToFalse)
	;Left := IR->EmitUnary('!', Left, 4)
	;
	;IR->SetLabel(JumpToTrue)
	;IR->EmitBinary(Left, '+', Right, 4)
	
	IR->EndBlock()
	
	;Print("Blocks:\n")
	;IR->PrintBlocks()
	
	; Remove instructions inside of blocks
	IR->EliminateSomething()
	IR->EliminateDeadStores()
	IR->EliminateDeadCode()
	IR->EliminateExtraMoves()
	
	IR->CompactBlocks()
	
	; Remove entire blocks
	IR->EliminateJumpChains()
	
	;IR->PrintBlocks()
	IR->PrintControlFlowGraph()
	;
	;IR->Generate()
	;x64Gen->LinkLabels()
	;x64Gen->PrintCode()
	;
	;PEBuilder* PE := BuildBuilder()
	;
	;PE->ImportFixupBase := x64Gen->Generator->CodeBuffer
	;PE->PE->ImageBase := 0x4000_0000
	;
	;AddImport(PE, AToS("User32.dll"), AToS("MessageBoxA"), 300)
	;
	;AddData(PE, Parser~>Globals->NextOffset)
	;AddCode(PE, x64Gen->Generator->CodeBuffer, x64Gen->Generator->CodeBufferIndex, 0)
	;
	;FinalizeBuilder(PE)
	;
	;FileDelete("out_ir.exe")
	;
	;i64 OutputFileHandle := FileOpen("out_ir.exe", FILE_READ | FILE_WRITE | FILE_CREATE_NEW)
	;FileWrite(OutputFileHandle, PE->Buffer, PE->BufferSize)
	;FileClose(OutputFileHandle)
	
	;Print("digraph CFG {\n")
	;IR->PrintControlFlowGraph()
	;Print("}\n")
	
	
}

;C := A + B
;
;load_variable.4, t1, a
;load_variable.4, t2, b
;binary.4, t3, t1, +, t2
;store_variable.4, c, t3
;
;C := A[B]
;
;load_variable.8, t1, a
;load_variable.4, t2, b
;load_index.2, t3, t1, t2
;store_variable.2, c, t3
;
;C := &A[B]
;
;load_variable.8, t1, a
;load_variable.4, t2, b
;load_index_address.2, t3, t1, t2
;store_variable.8, c, t3
;
;C := &A[B]->D
;
;load_variable.8, t1, a
;load_variable.4, t2, b
;load_index.8, t3, t1, t2
;load_integer.8, t4, 20
;load_offset_address.8, t5, t3, t4
;store_variable.8, c, t5
