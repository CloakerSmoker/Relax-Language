#Require "./src/lib/Memory.rlx"
#Require "./src/lib/File.rlx"

#Require "./src/lib/String.rlx"
#Require "./src/lib/Console.rlx"
#Require "./src/lib/SafeString.rlx"
#Require "./src/lib/HashMap.rlx"
#Require "./src/lib/Debug.rlx"

#Require "./src/compiler/Utility.rlx"
#Require "./src/compiler/Lexer.rlx"
#Require "./src/compiler/Parser.rlx"



;declare i8 Frob(i8*)
;
;define void Main(i64 ArgC, i8** ArgV) {
;	if (ArgC < 2) {
;		Exit(0)
;	}
;	
;	i8* Path := ArgV[1]
;	
;	Frob(Path)
;}
;
;
;define void Main(i64 ArgC, i8** ArgV) {
;	load.8, t1, ArgC
;	laod_integer.8, t2, 2
;	binary.8, t3, t1, <, t2
;	
;	conditional.1, t3, {
;		load_integer.1, t4, 0
;		call, t5, exit, [t4]
;	}, {
;		load_index.8, t6, ArgV, 1
;		set.8, Path, t6
;		
;		load.8, t7, Path
;		call.1, t8, Frob, [t7]
;	}
;}

; Var		 => IR_LOAD
; Var[Index] => IR_LOAD_INDEX (or IR_LOAD_OFFSET if possible)
; Var->Field => IR_LOAD_OFFSET
; 1			 => IR_LOAD_INTEGER
; "abc"		 => IR_LOAD_CONSTANT_ADDRESS
; Var := X	 => IR_STORE
; Var[Index] => IR_STORE_INDEX
; Var->Field => IR_STORE_OFFSET
; 1 + 2		 => IR_BINARY
; !1		 => IR_UNARY
; Fun()		 => IR_CALL
; return	 => IR_RETURN

bits TemporaryRegister As i64 {
	[0:61] PointerValue
	[62:63] IsVariable
}

struct IRVariable {
	i8* Name
	i32 Offset
	i8 Size
	i8 IsGlobal
	i8 ReferenceCount
	
	static IRVariable* New(i8* Name, i32 Offset, i8 Size, i8 IsGlobal) {
		IRVariable* this := Alloc(#IRVariable)
		
		this->Name := Name
		this->Offset := Offset
		this->Size := Size
		this->IsGlobal := IsGlobal
		
		return this
	}
	define i64 ToRegister() {
		TemporaryRegister Result
		
		Result.PointerValue := this As i64
		Result.IsVariable := true
		
		return Result As i64
	}
}

struct IRLoadIndex {
	; Loads the IndexRegister-th element out of the array of IndexScale sized elements pointed to by SourceRegister 
	;  into DestinationRegister
	
	i32 SourceRegister
	i32 IndexRegister
	i32 DestinationRegister
	i8 IndexScale
}
struct IRLoadOffset {
	; Loads Size bytes from *(SourceRegister + OffsetRegister) into DestinationRegister
	
	i32 SourceRegister
	i32 OffsetRegister
	i32 DestinationRegister
	i8 Size
}
struct IRLoadInteger {
	; Loads a (Size * 8) bit integer into DestinationRegister
	
	i64 SourceValue
	i64 DestinationRegister
	i8 Size
}

struct IRLoadVariableAddress {
	; Loads the address of local variable Source into DestinationRegister
	
	IRVariable Source
	i32 DestinationRegister
}
struct IRLoadIndexAddress {
	; Loads the address of the IndexRegister-th element of the array of IndexScale elements pointed to by SourceRegister
	;  into DestinationRegister
	
	i32 SourceRegister
	i32 IndexRegister
	i32 DestinationRegister
	i8 IndexScale
}
struct IRLoadOffsetAddress {
	; Loads (SourceRegister + OffsetRegister) into DestinationRegister
	
	i32 SourceRegister
	i32 OffsetRegister
	i32 DestinationRegister
}
struct IRLoadLabelAddress {
	; Loads the address of the label identified by LabelNumber into DestinationRegister
	
	i32 LabelNumber
	i32 DestinationRegister
	
	i32 Offset
}

struct IRStoreIndirect {
	; Stores the value of SourceRegister into *DestinationRegister as a Size byte value
	
	i32 DestinationRegister
	i32 SourceRegister
	i8 Size
}
struct IRStoreIndex {
	; Stores the value of SourceRegister into the IndexRegister-th element of the array of IndexScale elements pointed to 
	;  by DestinationRegister
	
	i32 DestinationRegister
	i32 IndexRegister
	i32 SourceRegister
	i8 IndexScale
}
struct IRStoreOffset {
	; Stores the value of SourceRegister into the memory at (DestinationRegister + OffsetRegister), as a Size byte value
	
	i32 DestinationRegister
	i32 OffsetRegister
	i32 SourceRegister
	i8 Size
}

struct IRMove {
	i64 Destination
	i64 Source
	i8 Size
}

struct IRBinary {
	; Does binary operation (LeftRegister Operator RightRegister) and stores the result into DestinationRegister
	
	i64 DestinationRegister
	i64 LeftRegister
	i32 Operator
	i64 RightRegister
	i8 Size
}
struct IRUnary {
	; Does the unary operation (Operator OperandRegister) and stores the result into DestinationRegister
	
	i64 DestinationRegister
	i32 Operator
	i64 OperandRegister
	i8 Size
}

struct IRCall {
	IRFunction* TargetFunction
	i32 ParameterCount
	i32 Result
	i32* Parameters
	i8 Size
}
struct IRReturn {
	i64 ReturnValueRegister
	i8 ReturnValueSize
}
struct IRConditional {
	i64 Condition
	i32 TrueBlock
	i32 FalseBlock
	
	i8 ConditionSize
}

struct IRBlock {
	IRNode* Body
	
	union {
		i32 NodeCount
		i32 LabelNumber
	}
}

struct IRFunction {
	;FunctionDefine* ASTNode
	IRBlock* Body
}

i8 IR_LOAD_INDEX                    := 3
i8 IR_LOAD_OFFSET                   := 4
i8 IR_LOAD_INTEGER                  := 5

i8 IR_LOAD_VARIABLE_ADDRESS         := 6
i8 IR_LOAD_INDEX_ADDRESS            := 8
i8 IR_LOAD_OFFSET_ADDRESS           := 9
i8 IR_LOAD_LABEL_ADDRESS            := 10

i8 IR_STORE_INDIRECT                := 13
i8 IR_STORE_INDEX                   := 14
i8 IR_STORE_OFFSET                  := 15

i8 IR_MOVE                          := 1
i8 IR_BINARY                        := 16
i8 IR_UNARY                         := 17
i8 IR_RETURN                        := 18
i8 IR_CALL                          := 19
i8 IR_JUMP                          := 20
i8 IR_CONDITIONAL                   := 21

define void IRPrint(i8* Format, ... Args) {
	i32 Length := StringLength(Format)
	i32 ArgIndex := 1
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		i8 Next := Format[Index]
		
		if (Next = '%') {
			Index += 1
			Next := Format[Index]
			void NextArg := Args[ArgIndex]
			
			if (Next = 'i') {
				Print(NextArg As i64)
			}
			else if (Next = 'x') {
				PrintHex(NextArg As i64)
			}
			else if (Next = 'c') {
				PrintCharacter(NextArg As i8)
			}
			else if (Next = 's') {
				PrintString(NextArg As i8*)
			}
			else if (Next = 'l') {
				PrintLiteral(NextArg As i64)
			}
			else if (Next = 'b') {
				PrintBinary(NextArg As i64)
			}
			else if (Next = 't') {
				TemporaryRegister Register := NextArg As TemporaryRegister
				
				if (Register.IsVariable) {
					IRVariable* Variable := Register.PointerValue As IRVariable*
					
					Print("v(%s)", Variable->Name)
				}
				else {
					Print("T%i", NextArg As i64)
				}
			}
			
			ArgIndex += 1
		}
		else if (Next = '^') {
			Index += 2
			i8 Fore := GetCharacterValue(Format[Index - 1])
			i8 Back := GetCharacterValue(Format[Index])
			
			SetColor(Fore, Back)
		}
		else {
			PrintCharacter(Next)
		}
	}
}

struct IRNode {
	union {
		IRLoadIndex LoadIndexNode
		IRLoadOffset LoadOffsetNode
		IRLoadInteger LoadIntegerNode
		
		IRLoadVariableAddress LoadVariableAddressNode
		IRLoadIndexAddress LoadIndexAddressNode
		IRLoadOffsetAddress LoadOffsetAddressNode
		IRLoadLabelAddress LoadLabelAddressNode
		
		IRStoreIndirect StoreIndirectNode
		IRStoreIndex StoreIndexNode
		IRStoreOffset StoreOffsetNode
		
		IRMove MoveNode
		
		IRBinary BinaryNode
		IRUnary UnaryNode
		
		IRConditional ConditionalNode
		IRReturn ReturnNode
		
		i32 CallToBlock
		i32 JumpToBlock
	}
	
	i8 Type
	i8 IsNotPresent
	
	define void Print() {
		if (this->Type = IR_MOVE) {
			IRPrint("move.%i, %t, %t", this~>MoveNode->Size, this~>MoveNode->Destination, this~>MoveNode->Source)
		}
		else if (this->Type = IR_LOAD_INTEGER) {
			IRPrint("load_integer.%i, %t, %i", this~>LoadIntegerNode->Size, this~>LoadIntegerNode->DestinationRegister, this~>LoadIntegerNode->SourceValue)
		}
		else if (this->Type = IR_UNARY) {
			IRPrint("unary.%i, %t, %c, %t", this~>UnaryNode->Size, this~>UnaryNode->DestinationRegister, this~>UnaryNode->Operator, this~>UnaryNode->OperandRegister)
		}
		else if (this->Type = IR_BINARY) {
			IRPrint("binary.%i, %t, %t, %c, %t", this~>BinaryNode->Size, this~>BinaryNode->DestinationRegister, this~>BinaryNode->LeftRegister, this~>BinaryNode->Operator, this~>BinaryNode->RightRegister)
		}
		else if (this->Type = IR_JUMP) {
			IRPrint("jump, L%i", this->JumpToBlock)
		}
		else if (this->Type = IR_CONDITIONAL) {
			IRConditional* Conditional := this~>ConditionalNode
			
			IRPrint("cond.%i, %t, L%i, L%i", Conditional->ConditionSize, Conditional->Condition, Conditional->TrueBlock, Conditional->FalseBlock)
		}
		else if (this->Type = IR_RETURN) {
			IRPrint("return.%i, %t", this~>ReturnNode->ReturnValueSize, this~>ReturnNode->ReturnValueRegister)
		}
	}
}

define i8 OperatorToCharacter(i64 Operator) {
	return "           = < >  +-*/%&|^  !~"[Operator]
}

bits LoopLables As i64 {
	[0:31] ContinueLabel,
	[32:63] BreakLabel
}

struct IRCompilerState {
	i64 NextVirtualRegister
	IRNode** RegisterAssignments
	i8* RegisterReferenceCounts
	
	i32 NodeCapacity
	IRNode* Nodes
	
	union {
		i32 NextNodeIndex
		i32 NodeCount
	}
	
	i32 BlockCount
	i32 BlockCapacity
	i32* BlockOffsets
	i32* BlockSizes
	i8* BlocksVisited
	
	i32 CurrentBlock
	
	HashMap GlobalsToIRVariables
	HashMap LocalsToIRVariables
	
	static IRCompilerState* New() {
		IRCompilerState* this := Alloc(#IRCompilerState)
		
		this->NodeCapacity := 0x500
		this->Nodes := Alloc(this->NodeCapacity * #IRNode)
		
		this->BlockCapacity := 0x200
		this->BlockOffsets := Alloc(this->BlockCapacity * #i32)
		this->BlockSizes := Alloc(this->BlockCapacity * #i32)
		this->BlocksVisited := Alloc(this->BlockCapacity * #i8)
		
		this->CurrentBlock := -1
		
		this->RegisterAssignments := Alloc(0x1000)
		this->RegisterReferenceCounts := Alloc(0x1000)
		
		this~>LocalsToIRVariables->Initialize()
		
		return this
	}
	
	define IRVariable* FindOrAddVariable(VariableInfo* ActualVariable) {
		if (ActualVariable->IsGlobal) {
		
		}
		else {
			HashMapElement* FoundLocalElement := this~>LocalsToIRVariables->Get(ActualVariable->Name)
			
			if (FoundLocalElement) {
				return FoundLocalElement->Value
			}
			else {
				i8* Name := CloneMemory(ActualVariable->Name->PackToString(), ActualVariable->Name->Length)
				ActualVariable->Name->UnpackFromString()
				
				IRVariable* NewVariable := IRVariable:New(Name, ActualVariable->StackOffset, GetTypeSize(ActualVariable->Type) As i8, false)
				
				this~>LocalsToIRVariables->Set(ActualVariable->Name, NewVariable)
				
				return NewVariable
			}
		}
		
		return null
	}
	
	declare IRNode* AppendNode(i8)
	
	define void EndBlock() {
		if (this->CurrentBlock >= 0) {
			i32 StartIndex := this->BlockOffsets[this->CurrentBlock]
			i32 CurrentIndex := this->NextNodeIndex
			i32 Length := CurrentIndex - StartIndex
			
			this->BlockSizes[this->CurrentBlock] := Length
		}
	}
	
	define i32 StartBlock(i32 Number) {
		this->EndBlock()
		
		this->CurrentBlock := Number
		
		this->BlockOffsets[Number] := this->NextNodeIndex
		
		return Number
	}
	
	define i32 SetLabel() {
		return this->StartBlock(this->BlockCount++)
	}
	define i32 SetLabel(i32 LabelNumber) {
		return this->StartBlock(LabelNumber)
	}
	define i32 ReserveLabel() {
		return this->BlockCount++
	}
	
	define void Extend(i32 ExtraNodeCount) {
		if (this->NextNodeIndex + ExtraNodeCount >= this->NodeCapacity) {
			this->NodeCapacity += 0x500
			this->Nodes := ReAlloc(this->Nodes, this->NodeCapacity * #IRNode)
		}
	}
	
	define IRNode* AppendNode(i8 Type) {
		this->Extend(#IRNode)
		
		IRNode* Result := this->Nodes[this->NextNodeIndex++]
		
		Result->Type := Type
		
		return Result
	}
	
	define void SetRegisterAssignment(i64 Register, IRNode* Node) {
		this->RegisterAssignments[Register] := Node
	}
	define IRNode* GetRegisterAssignment(i64 Register) {
		return this->RegisterAssignments[Register]
	}
	define i64 AllocateRegister(IRNode* ForNode) {
		i64 Result := this->NextVirtualRegister
		
		this->SetRegisterAssignment(Result, ForNode)
		this->NextVirtualRegister += 1
		
		return Result
	}
	define i64 UseRegister(i64 RawRegister) {
		TemporaryRegister Register := RawRegister As TemporaryRegister
		
		;Print("UR %x\n", RawRegister)
		
		if (Register.IsVariable) {
			IRVariable* Variable := Register.PointerValue As IRVariable*
			
			;Print("V %x\n", Variable)
			Variable->ReferenceCount += 1
			
		}
		else {
			this->RegisterReferenceCounts[RawRegister] += 1		
		}
		
		return RawRegister
	}
	
	define i64 EmitInteger(i64 Value, i8 Size) {
		IRNode* RawNode := this->AppendNode(IR_LOAD_INTEGER)
		
		IRLoadInteger* Node := RawNode~>LoadIntegerNode
		
		Node->DestinationRegister := this->AllocateRegister(RawNode)
		Node->SourceValue := Value
		Node->Size := Size
		
		return Node->DestinationRegister
	}
	define i64 EmitUnary(i32 Operator, i64 Operand, i8 Size) {
		IRNode* RawNode := this->AppendNode(IR_UNARY)
		
		IRUnary* Node := RawNode~>UnaryNode
		
		Node->DestinationRegister := this->AllocateRegister(RawNode)
		Node->Operator := Operator
		Node->OperandRegister := this->UseRegister(Operand)
		Node->Size := Size
		
		return Node->DestinationRegister
	}
	define i64 EmitBinary(i64 Left, i32 Operator, i64 Right, i8 Size) {
		IRNode* RawNode := this->AppendNode(IR_BINARY)
		
		IRBinary* Node := RawNode~>BinaryNode
		
		Node->DestinationRegister := this->AllocateRegister(RawNode)
		Node->LeftRegister := this->UseRegister(Left)
		Node->Operator := Operator
		Node->RightRegister := this->UseRegister(Right)
		Node->Size := Size
		
		return Node->DestinationRegister
	}
	define void EmitJump(i32 TargetLabel) {
		IRNode* RawNode := this->AppendNode(IR_JUMP)
		
		RawNode->JumpToBlock := TargetLabel
		
		this->SetLabel()
	}
	define void EmitConditional(i64 Condition, i8 ConditionSize, i32 TrueBlock, i32 FalseBlock) {
		IRNode* RawNode := this->AppendNode(IR_CONDITIONAL)
		
		IRConditional* Node := RawNode~>ConditionalNode
		
		Node->Condition := this->UseRegister(Condition)
		Node->ConditionSize := ConditionSize
		Node->TrueBlock := TrueBlock
		Node->FalseBlock := FalseBlock
		
		this->SetLabel()
	}
	define void EmitReturn(i64 ValueRegister, i8 ValueSize) {
		IRNode* RawNode := this->AppendNode(IR_RETURN)
		
		IRReturn* Node := RawNode~>ReturnNode
		
		Node->ReturnValueRegister := this->UseRegister(ValueRegister)
		Node->ReturnValueSize := ValueSize
		
		this->SetLabel()
	}
	define void EmitMove(i64 Destination, i64 Source, i8 Size) {
		IRNode* RawNode := this->AppendNode(IR_MOVE)
		
		IRMove* Node := RawNode~>MoveNode
		
		Node->Destination := Destination
		Node->Source := this->UseRegister(Source)
		Node->Size := Size
	}
	
	define i64 CompileExpression(ASTNode* Target) {
		i8 ResultSize := GetTypeSize(Target->ValueType) As i8
		
		if (Target->NodeType = NODE_TYPE_INTEGER) {
			return this->EmitInteger(Target->IntegerValue, ResultSize)
		}
		else if (Target->NodeType = NODE_TYPE_VARIABLE) {
			return this->FindOrAddVariable(Target->VariableValue)->ToRegister()
		}
		else if (Target->NodeType = NODE_TYPE_UNARY) {
			UnaryExpression* Unary := Target->UnaryNode
			
			i64 Operand := this->CompileExpression(Unary->Operand)
			
			return this->EmitUnary(OperatorToCharacter(Unary->Operator->IntegerValue), Operand, ResultSize)
		}
		else if (Target->NodeType = NODE_TYPE_BINARY) {
			BinaryExpression* Binary := Target->BinaryNode
			
			if (Binary->Operator->IntegerValue = OPERATOR_COLON_EQUAL) {
				ASTNode* LeftNode := Binary->Left
				i64 NewValueRegister := this->CompileExpression(Binary->Right)
				
				if (LeftNode->NodeType = NODE_TYPE_VARIABLE) {
					i64 VariableRegister := this->FindOrAddVariable(LeftNode->VariableValue)->ToRegister()
					
					this->EmitMove(VariableRegister, NewValueRegister, ResultSize)
				}
			}
			else {
				i64 Left := this->CompileExpression(Binary->Left)
				i64 Right := this->CompileExpression(Binary->Right)
				
				return this->EmitBinary(Left, OperatorToCharacter(Binary->Operator->IntegerValue), Right, ResultSize)
			}
		}
		
		return 0
	}
	
	declare void CompileBlock(Block*)
	
	define void CompileIf(IfGroup* Target) {
		i32 BranchCount := Target->BranchCount
		i32 HasElse := (Target->ElseBranch) != 0
		
		i32 EndLabel := this->ReserveLabel()
		i32 NextBranch := 0
		
		for (i32 BranchIndex := 0, BranchIndex < BranchCount, BranchIndex += 1) {
			if (BranchIndex != 0) {
				this->SetLabel(NextBranch)
			}
			
			NextBranch := this->ReserveLabel()
			
			ASTNode* Condition := Target->Conditions[BranchIndex]
			
			if (Condition->NodeType = NODE_TYPE_NONE) {
				continue
			}
			
			i64 ConditionRegister := this->CompileExpression(Condition)
			i32 BodyLabel := this->ReserveLabel()
			
			this->EmitConditional(ConditionRegister, GetTypeSize(Condition->ValueType) As i8, BodyLabel, NextBranch)
			
			this->SetLabel(BodyLabel)
			
			this->CompileBlock(Target->Bodies[BranchIndex])
			
			this->EmitJump(EndLabel)
		}
		
		this->SetLabel(NextBranch)
		this->EmitJump(EndLabel)
		
		if (Target->ElseBranch) {
			this->CompileBlock(Target->ElseBranch)
			this->EmitJump(EndLabel)
		}
		
		this->SetLabel(EndLabel)
		;this->EmitJump(this->BlockCount)
	}
	
	i32 CurrentLoopContinueLabel
	i32 CurrentLoopBreakLabel
	
	define i64 EnterLoop(i32 ContinueLabel, i32 BreakLabel) {
		LoopLables Result := this->CurrentLoopContinueLabel As LoopLables
		Result.BreakLabel := this->CurrentLoopBreakLabel
		
		this->CurrentLoopContinueLabel := ContinueLabel
		this->CurrentLoopBreakLabel := BreakLabel
		
		return Result As i64
	}
	define void ExitLoop(i64 PackedLoopState) {
		LoopLables LoopState := PackedLoopState As LoopLables
		
		this->CurrentLoopContinueLabel := LoopState.ContinueLabel
		this->CurrentLoopBreakLabel := LoopState.BreakLabel
	}
	
	define void CompileLoop(Block* LoopBody) {
		i32 StartLabel := this->ReserveLabel()
		i32 EndLabel := this->ReserveLabel()
		
		this->EmitJump(StartLabel)
		i64 LoopState := this->EnterLoop(StartLabel, EndLabel)
		
		this->SetLabel(StartLabel)
		
		this->CompileBlock(LoopBody)
		
		this->EmitJump(StartLabel)
		this->SetLabel(EndLabel)
		
		this->ExitLoop(LoopState)
	}
	define void CompileWhile(WhileLoop* WhileToCompile) {
		i32 StartLabel := this->ReserveLabel()
		i32 EndLabel := this->ReserveLabel()
		i32 BodyLabel := this->ReserveLabel()
		
		this->EmitJump(StartLabel)
		i64 LoopState := this->EnterLoop(StartLabel, EndLabel)
		
		this->SetLabel(StartLabel)
		
		ASTNode* Condition := WhileToCompile->Condition
		
		i64 ConditionRegister := this->CompileExpression(Condition)
		this->EmitConditional(ConditionRegister, GetTypeSize(Condition->ValueType) As i8, BodyLabel, EndLabel)
		
		this->SetLabel(BodyLabel)
		this->CompileBlock(WhileToCompile->Body)
		
		this->EmitJump(StartLabel)
		this->SetLabel(EndLabel)
		
		this->ExitLoop(LoopState)
	}
	
	define void CompileStatement(ASTNode* Target) {
		
		if (Target->NodeType = NODE_TYPE_EXPRESSION) {
			this->CompileExpression(Target->ExpressionStatement)
		}
		else if (Target->NodeType = NODE_TYPE_RETURN) {
			i64 ReturnValueRegister := this->CompileExpression(Target->ReturnExpression)
			this->EmitReturn(ReturnValueRegister, GetTypeSize(Target->ReturnExpression->ValueType) As i8)
		}
		else if (Target->NodeType = NODE_TYPE_IF) {
			this->CompileIf(Target->IfNode)
		}
		else if (Target->NodeType = NODE_TYPE_LOOP) {
			this->CompileLoop(Target->LoopBody)
		}
		else if (Target->NodeType = NODE_TYPE_WHILE) {
			this->CompileWhile(Target->WhileNode)
		}
		else if (Target->NodeType = NODE_TYPE_CONTINUEBREAK) {
			if (Target->IsContinue) {
				this->EmitJump(this->CurrentLoopContinueLabel)
			}
			else {
				this->EmitJump(this->CurrentLoopBreakLabel)
			}
		}
	}
	
	define void CompileBlock(Block* Target) {
		for (i32 Index := 0, Index < Target->StatementCount, Index++) {
			this->CompileStatement(Target->Statements[Index])
		}
	}
	
	define IRNode* GetBlockNode(i32 Block, i32 Node) {
		return this->Nodes[this->BlockOffsets[Block] + Node]
	}
	
	define void EliminateJumpChainsInBlock(i32 Index) {
		i32 Start := this->BlockOffsets[Index]
		i32 Size := this->BlockSizes[Index]
		
		if (Size != 0) {
			IRNode* Terminator := this->Nodes[Start + Size - 1]
			
			if (Terminator->Type = IR_JUMP) {
				IRNode* JumpToFirstNode := this->GetBlockNode(Terminator->JumpToBlock, 0)
				
				while (JumpToFirstNode->Type = IR_JUMP) {
					Terminator->JumpToBlock := JumpToFirstNode->JumpToBlock
					JumpToFirstNode := this->GetBlockNode(Terminator->JumpToBlock, 0)
				}
			}
			else if (Terminator->Type = IR_CONDITIONAL) {
				i32 TrueBlock := Terminator~>ConditionalNode->TrueBlock
				i32 FalseBlock := Terminator~>ConditionalNode->FalseBlock
				
				IRNode* TrueFirstNode := this->GetBlockNode(TrueBlock, 0)
				
				while (TrueFirstNode->Type = IR_JUMP) {
					Terminator~>ConditionalNode->TrueBlock := TrueBlock := TrueFirstNode->JumpToBlock
					TrueFirstNode := this->GetBlockNode(TrueBlock, 0)
				}
				
				IRNode* FalseFirstNode := this->GetBlockNode(FalseBlock, 0)
				
				while (FalseFirstNode->Type = IR_JUMP) {
					Terminator~>ConditionalNode->FalseBlock := FalseBlock := FalseFirstNode->JumpToBlock
					FalseFirstNode := this->GetBlockNode(FalseBlock, 0)
				}
			}
		}
	}
	define void EliminateJumpChains() {
		for (i32 Index := 0, Index < this->BlockCount, Index++) {
			this->EliminateJumpChainsInBlock(Index)
		}
	}
	define void EliminateDeadCode()  {
		for (i32 Index := this->NodeCount - 1, Index >= 0, Index--) {
			IRNode* NextNode := this->Nodes[Index]
			
			if (NextNode->Type = IR_LOAD_INTEGER) {
				i64 LoadIntegerDestination := NextNode~>LoadIntegerNode->DestinationRegister
				
				if (this->RegisterReferenceCounts[LoadIntegerDestination] = 0) {
					NextNode->IsNotPresent := true
				}
			}
			else if (NextNode->Type = IR_UNARY) {
				i64 UnaryDestination := NextNode~>UnaryNode->DestinationRegister
				i64 UnaryOperand := NextNode~>UnaryNode->OperandRegister
				
				if (this->RegisterReferenceCounts[UnaryDestination] = 0) {
					this->RegisterReferenceCounts[UnaryOperand] -= 1
					
					NextNode->IsNotPresent := true
				}
			}
			else if (NextNode->Type = IR_BINARY) {
				i64 BinaryDestination := NextNode~>BinaryNode->DestinationRegister
				i64 BinaryLeft := NextNode~>BinaryNode->LeftRegister
				i64 BinaryRight := NextNode~>BinaryNode->RightRegister
				
				if (this->RegisterReferenceCounts[BinaryDestination] = 0) {
					this->RegisterReferenceCounts[BinaryLeft] -= 1
					this->RegisterReferenceCounts[BinaryRight] -= 1
					
					NextNode->IsNotPresent := true
				}	
			}
		}
	}
	define IRNode* FindLastStore(i32 InBlock, i32 FromOffset, IRVariable* ForVariable) {
		;i32 Start := this->BlockOffsets[InBlock]
		;i32 Size := this->BlockSizes[InBlock]
		;
		;for (i32 Index := FromOffset - 1, Index >= 0, Index--) {
		;	IRNode* NextNode := this->Nodes[Start + Index]
		;	
		;}
		;
		return null
	}
	define void EliminateDeadStores() {
		;for (i32 BlockIndex := 0, BlockIndex < this->BlockCount, BlockIndex++) {
		;	i32 Start := this->BlockOffsets[BlockIndex]
		;	i32 Size := this->BlockSizes[BlockIndex]
		;	
		;	for (i32 Index := 0, Index < Size, Index++) {
		;		IRNode* NextNode := this->Nodes[Start + Index]
		;		
		;	}
		;}
		
	}
	
	define void PrintBlocks() {
		for (i32 BlockIndex := 0, BlockIndex < this->BlockCount, BlockIndex++) {
			i32 NextBlockStart := this->BlockOffsets[BlockIndex]
			i32 NextBlockSize := this->BlockSizes[BlockIndex]
			
			Print("l%i (%i, %i) {\n", BlockIndex, NextBlockStart, NextBlockSize)
			
			for (i32 NodeIndex := 0, NodeIndex < NextBlockSize, NodeIndex++) {
				IRNode* NextNode := this->Nodes[NextBlockStart + NodeIndex]
				
				Print(" %x %i\t", NextBlockStart + NodeIndex, NextNode->IsNotPresent)
				NextNode->Print()
				Print("\n")
			}
			
			Print("}\n")
		}
	}
	define void PrintIndent(i32 Depth, i8* String) {
		for (i32 Index := 0, Index < Depth, Index++) {
			Print("%s", String)
		}
	}
	define void PrintControlFlowGraph(i32 Index) {
		if (this->BlocksVisited[Index]) {
			return
		}
		
		this->BlocksVisited[Index] := true
		
		i32 Start := this->BlockOffsets[Index]
		i32 Size := this->BlockSizes[Index]
		
		Print("\tL%i [shape=box label=\"L%i:\\l", Index, Index)
		
		for (i32 NodeIndex := 0, NodeIndex < Size, NodeIndex++) {
			IRNode* NextNode := this->Nodes[Start + NodeIndex] 
			
			if (NextNode->IsNotPresent) {
				continue
			}
			
			Print("\t")
			NextNode->Print()
			Print("\\l")
		}
		
		Print("\"];\n")
		
		if (Size > 0) {
			NextNode := this->Nodes[Start + Size - 1]
			
			if (NextNode->Type = IR_JUMP) {
				i32 TargetBlock := NextNode->JumpToBlock
				
				Print("\tL%i -> L%i;\n", Index, TargetBlock)
				
				this->PrintControlFlowGraph(TargetBlock)
			}
			else if (NextNode->Type = IR_CONDITIONAL) {
				i32 TrueBlock := NextNode~>ConditionalNode->TrueBlock
				i32 FalseBlock := NextNode~>ConditionalNode->FalseBlock
				
				Print("\tL%i -> L%i [label=\"true\"];\n", Index, TrueBlock)
				Print("\tL%i -> L%i [label=\"false\"];\n", Index, FalseBlock)
				
				this->PrintControlFlowGraph(TrueBlock)
				this->PrintControlFlowGraph(FalseBlock)
			}
		}
	}
	define void PrintControlFlowGraph() {
		this->PrintControlFlowGraph(0)
	}
}

#Require "./src/lib/Debug.rlx"

define void Main(i64 ArgC, i8** ArgV) {
	GetArgs(&ArgC, &ArgV)
	
	if (ArgC != 2) {
		Print("No input file\n")
		Exit(1)
	}
	
	BuildConfig* Config := Alloc(#BuildConfig)
	
	Config->DumpInfo := 0
	Config->LineEnding := LINE_ENDING_DEFAULT
	
	windows {
		Config->OutputFormat := OUTPUT_PE
	}
	linux {
		Config->OutputFormat := OUTPUT_ELF
	}
	
	i8* InputFilePath := ArgV[1]
	
	i32 SourceLength := 0
	i16* Source := OpenAndRead(InputFilePath, &SourceLength)
	
	LexerState* Lexer := LexerState:New(Config, Source, SourceLength, AToS(InputFilePath))
	Config->Lexer := Lexer
	
	ParserState* Parser := ParserState:New(Config, Lexer)
	Parser->ParseProgram()
	
	IRCompilerState* IR := IRCompilerState:New()
	
	IR->SetLabel()
	
	if (Parser->MainFunction = null) {
		Print("No main function\n")
		Exit(1)
	}
	
	IR->CompileBlock(Parser->MainFunction->Body)
	
	;i32 Left := IR->EmitInteger(20, 4)
	;i32 Right := IR->EmitInteger(192, 4)
	;
	;i32 JumpToTrue := IR->ReserveLabel()
	;i32 JumpToFalse := IR->ReserveLabel()
	;
	;IR->EmitConditional(Left, 4, JumpToTrue, JumpToFalse)
	;
	;IR->EmitInteger(1, 1)
	;IR->EmitInteger(2, 1)
	;
	;IR->SetLabel(JumpToFalse)
	;Left := IR->EmitUnary('!', Left, 4)
	;
	;IR->SetLabel(JumpToTrue)
	;IR->EmitBinary(Left, '+', Right, 4)
	
	IR->EndBlock()
	
	;Print("Blocks:\n")
	;IR->PrintBlocks()
	
	;IR->EliminateDeadStores()
	;IR->EliminateDeadCode()
	IR->EliminateJumpChains()
	
	Print("digraph CFG {\n")
	IR->PrintControlFlowGraph()
	Print("}\n")
}

;C := A + B
;
;load_variable.4, t1, a
;load_variable.4, t2, b
;binary.4, t3, t1, +, t2
;store_variable.4, c, t3
;
;C := A[B]
;
;load_variable.8, t1, a
;load_variable.4, t2, b
;load_index.2, t3, t1, t2
;store_variable.2, c, t3
;
;C := &A[B]
;
;load_variable.8, t1, a
;load_variable.4, t2, b
;load_index_address.2, t3, t1, t2
;store_variable.8, c, t3
;
;C := &A[B]->D
;
;load_variable.8, t1, a
;load_variable.4, t2, b
;load_index.8, t3, t1, t2
;load_integer.8, t4, 20
;load_offset_address.8, t5, t3, t4
;store_variable.8, c, t5
