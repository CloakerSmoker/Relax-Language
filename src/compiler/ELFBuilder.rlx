i32 ELF_MAGIC               := 0x464C457F ; 0x7f 'ELF' magic
i8  ELF_BITNESS_64          := 2          ; 1 = 32 bit, 2 = 64 bit
i8  ELF_ENDIAN_LITTLE       := 1          ; 1 = Little endian

i8  ELF_ABI_SYSTEMV         := 0          ; 0 = SystemV
i8  ELF_ABI_VERSION_SYSTEMV := 0

i8 ELF_ABI_LINUX := 3
i8 ELF_ABI_VERSION_LINUX := 0

i8 ELF_ABI_FREEBSD := 9
i8 ELF_ABI_VERSION_FREEBSD := 0

i16 ELF_FILETYPE_EXECUTABLE := 0x02
i16 ELF_MACHINE_AMD64       := 0x3E
i32 ELF_VERSION             := 1

i64 ELF_ALIGN_NONE := 0 ; Used for both segments and sections

i32 ELF_SEGMENT_FLAGS_EXECUTE := 1
i32 ELF_SEGMENT_FLAGS_WRITE   := 2
i32 ELF_SEGMENT_FLAGS_READ    := 4

i32 ELF_SEGMENT_TYPE_LOAD := 0x01
i32 ELF_SEGMENT_TYPE_PHDR := 0x06

struct ELFProgramHeader {
	i32 SegmentType
	i32 Flags
	i64 FileOffset
	i64 VirtualAddress
	i64 PhysicalAddress
	i64 FileSize
	i64 MemorySize
	i64 Alignment
}

i32 ELF_SECTION_TYPE_DATA         := 0x01
i32 ELF_SECTION_TYPE_STRING_TABLE := 0x03
i32 ELF_SECTION_TYPE_NODATA       := 0x08

i64 ELF_SECTION_FLAGS_WRITE    := 0x01
i64 ELF_SECTION_FLAGS_ALLOCATE := 0x02
i64 ELF_SECTION_FLAGS_EXECUTE  := 0x04
i64 ELF_SECTION_FLAGS_STRINGS  := 0x20


; Custom flag, used to mark that a section only exists for the purpose of mapping a name to some
;  data which isn't loaded (like debug info)
i64 ELF_SECTION_FLAGS_HAS_DATA := 0x2222

struct ELFSectionHeader {
	i32 NameOffset
	i32 Type
	i64 Flags
	i64 VirtualAddress
	i64 FileOffset
	i64 FileSize
	i32 AssociatedSectionIndex
	i32 ExtraInfo
	i64 Alignment
	i64 EntrySize
}

i32 ELF_NOTE_TYPE_FREEBSD_ABI_TAG := 1
i32 ELF_NOTE_DATA_FREEBSD_ABI_TAG_13_1 :=  1301000

struct ELFNoteSection {
	i32 NameLength
	i32 DescriptionLength
	i32 Type
	i8[0] Name
	
	define void* Body() {
		return this~>Name +this->NameLength 
	}
}

struct ELFHeader unaligned {
	i32 Magic
	i8 Bitness
	i8 Endianness
	i8 UseCurrentVersion
	i8 ABI
	
	union {
		; This byte is followed by 7 unused ones, so we pad out to the correct offset with this union

		i8 ABIVersion
		i64 Unused
	}
	
	i16 FileType
	i16 MachineType
	
	i32 ELFVersion
	i64 EntryPoint

	i64 ProgramHeadersOffset
	i64 SectionHeadersOffset

	i32 Flags
	i16 HeaderSize

	i16 ProgramHeaderSize
	i16 ProgramHeaderEntryCount
	i16 SectionHeaderSize
	i16 SectionHeaderEntryCount

	i16 SectionNameSectionIndex

	define void Populate(i8 ABI, i8 ABIVersion) {
		; Default values for a statically linked little endian 64 bit x86-64 executable using the specified ABI
		
		this->Magic             := ELF_MAGIC
		this->Bitness           := ELF_BITNESS_64
		this->Endianness        := ELF_ENDIAN_LITTLE
		this->UseCurrentVersion := true
		this->ABI               := ABI
		this->ABIVersion        := ABIVersion
		this->FileType          := ELF_FILETYPE_EXECUTABLE
		this->MachineType       := ELF_MACHINE_AMD64
		this->ELFVersion        := ELF_VERSION
		
		this->HeaderSize                    := #ELFHeader As i16
		this->ProgramHeaderSize             := #ELFProgramHeader As i16
		this->SectionHeaderSize             := #ELFSectionHeader As i16

		this->SectionNameSectionIndex := 1
	}
}

; For efficient mapping executable and shared object files must have segments whose file offsets and virtual addresses 
;  are congruent modulo the page size.
; From: https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf

struct ELFBuilder {
	union {
		void* Buffer
		ELFHeader* Header
	}
	
	i32 BufferSize
	
	ELFProgramHeader* PHDR                ; Segment for segment headers
	ELFProgramHeader* LoadPHDR            ; Segment which loads the segment containing the segment headers
	ELFSectionHeader* StringSection       ; Section which holds section names (Fuck this format)
	
	ELFProgramHeader* CodeProgramHeader   ; Segment for code
	ELFSectionHeader* CodeSectionHeader   ; Section for code
	
	ELFProgramHeader* DataProgramHeader   ; Segment for data
	ELFSectionHeader* DataSectionHeader   ; Segment for code
	
	i8* StringBuffer
	i8* CodeBuffer
	
	ELFProgramHeader** ProgramHeaders
	ELFSectionHeader** SectionHeaders
	
	i32 DataSize

	define ELFProgramHeader* AppendProgramHeader() {
		ELFHeader* Header := this->Header
		
		i32 NextIndex := Header->ProgramHeaderEntryCount
		Header->ProgramHeaderEntryCount += 1
		this->ProgramHeaders := ReAlloc(this->ProgramHeaders, Header->ProgramHeaderEntryCount * #ELFProgramHeader*)
		
		ELFProgramHeader* Result := Alloc(#ELFProgramHeader)
		
		this->ProgramHeaders[NextIndex] := Result
		
		return Result
	}
	define ELFSectionHeader* AppendSectionHeader() {
		ELFHeader* Header := this->Header
		
		i32 NextIndex := Header->SectionHeaderEntryCount
		Header->SectionHeaderEntryCount += 1
		this->SectionHeaders := ReAlloc(this->SectionHeaders, Header->SectionHeaderEntryCount * #ELFSectionHeader*)
		
		ELFSectionHeader* Result := Alloc(#ELFSectionHeader)
		
		this->SectionHeaders[NextIndex] := Result
		
		return Result
	}

	define i32 AppendString(i8* String) {
		i32 StringOffset := this->StringSection->FileSize As i32
		i32 StringLength := StringLength(String)
		
		i32 NewSize := StringOffset + StringLength + 1
		
		this->StringBuffer := ReAlloc(this->StringBuffer, NewSize)
		this->StringSection->FileSize := NewSize
		
		for (i32 Index := 0, Index < StringLength, Index += 1) {
			this->StringBuffer[StringOffset + Index] := String[Index]
		}
		
		return StringOffset
	}
	define ELFSectionHeader* AppendNamedSection(i8* Name) {
		ELFSectionHeader* NewSection := this->AppendSectionHeader()
		
		NewSection->NameOffset := this->AppendString(Name)
		
		return NewSection
	}

	define void AddCodeSection(i8* CodeBytes, i32 CodeLength) {
		ELFProgramHeader* LoadCode := this->AppendProgramHeader()
		
		LoadCode->SegmentType := ELF_SEGMENT_TYPE_LOAD
		LoadCode->Flags       := ELF_SEGMENT_FLAGS_READ | ELF_SEGMENT_FLAGS_EXECUTE
		LoadCode->Alignment   := ELF_ALIGN_NONE
		LoadCode->FileSize    := CodeLength
		LoadCode->MemorySize  := CodeLength
		
		ELFSectionHeader* TextSection := this->AppendNamedSection(".text")
		
		TextSection->Type  := ELF_SECTION_TYPE_DATA
		TextSection->Flags := ELF_SECTION_FLAGS_ALLOCATE | ELF_SECTION_FLAGS_EXECUTE
		TextSection->Alignment    := ELF_ALIGN_NONE
		TextSection->FileSize     := CodeLength
		
		this->CodeBuffer        := CodeBytes
		this->CodeProgramHeader := LoadCode
		this->CodeSectionHeader := TextSection
	}

	define void AddEmptyDataSection(i32 ReserveBytes) {
		ELFProgramHeader* LoadData := this->AppendProgramHeader()
		
		LoadData->SegmentType := ELF_SEGMENT_TYPE_LOAD
		LoadData->Flags       := ELF_SEGMENT_FLAGS_READ | ELF_SEGMENT_FLAGS_WRITE
		LoadData->Alignment   := ELF_ALIGN_NONE
		LoadData->FileSize    := 0
		LoadData->MemorySize  := ReserveBytes
		
		ELFSectionHeader* DataSection := this->AppendNamedSection(".bss")
		
		DataSection->Type         := ELF_SECTION_TYPE_NODATA
		DataSection->Flags        := ELF_SECTION_FLAGS_ALLOCATE | ELF_SECTION_FLAGS_WRITE
		DataSection->Alignment    := ELF_ALIGN_NONE
		DataSection->FileSize     := ReserveBytes
		
		this->DataProgramHeader := LoadData
		this->DataSectionHeader := DataSection
	}
	define void AddDataSection(i8* Name, void* Data, i32 Size) {
		ELFSectionHeader* DataSection := this->AppendNamedSection(Name)
		
		DataSection->Type           := ELF_SECTION_TYPE_DATA
		DataSection->Flags          := ELF_SECTION_FLAGS_HAS_DATA
		DataSection->Alignment      := ELF_ALIGN_NONE
		DataSection->VirtualAddress := Data As i64
		DataSection->FileSize       := Size
	}

	static ELFBuilder* New(i8 ABI, i8 ABIVersion) {
		ELFBuilder* this := Alloc(#ELFBuilder)

		this->BufferSize := #ELFHeader
		this->Buffer := Alloc(this->BufferSize)
		
		this->ProgramHeaders := Alloc(8)
		this->SectionHeaders := Alloc(8)
		
		this->Header->Populate(ABI, ABIVersion)
		
		ELFProgramHeader* PHDR := this->AppendProgramHeader()
		this->PHDR := PHDR
		
		PHDR->SegmentType    := ELF_SEGMENT_TYPE_PHDR
		PHDR->Flags          := ELF_SEGMENT_FLAGS_READ
		PHDR->Alignment      := ELF_ALIGN_NONE
		PHDR->FileOffset     := #ELFHeader
		PHDR->VirtualAddress := #ELFHeader
		
		ELFProgramHeader* LoadPHDR := this->AppendProgramHeader()
		this->LoadPHDR := LoadPHDR
		
		LoadPHDR->SegmentType    := ELF_SEGMENT_TYPE_LOAD
		LoadPHDR->Flags          := ELF_SEGMENT_FLAGS_READ | ELF_SEGMENT_FLAGS_WRITE
		LoadPHDR->Alignment      := ELF_ALIGN_NONE
		LoadPHDR->FileOffset     := 0x00
		LoadPHDR->VirtualAddress := 0x00
		
		ELFSectionHeader* NullSection := this->AppendSectionHeader()
		
		ELFSectionHeader* StringSection := this->AppendSectionHeader()
		this->StringSection := StringSection
		
		StringSection->Type := ELF_SECTION_TYPE_STRING_TABLE
		StringSection->Alignment := 0x01
		
		this->StringBuffer := Alloc(8)
		StringSection->FileSize := 1
		
		StringSection->NameOffset := this->AppendString(".strtab")
		
		return this
	}

	define void Finalize(i32 MainOffset, i64 ImageBase) {
		; Note: the data section is excluded from the size, since a program header with a FileSize of 0 and non-zero 
		;  MemorySize will have MemorySize zero bytes loaded into memory
		
		i32 ProgramHeaderCount := this->Header->ProgramHeaderEntryCount
		i32 SectionHeaderCount := this->Header->SectionHeaderEntryCount
		
		i32 ProgramHeadersSize := ProgramHeaderCount * #ELFProgramHeader
		i32 SectionHeadersSize := SectionHeaderCount * #ELFSectionHeader
		i32 CodeSize := this->CodeProgramHeader->FileSize As i32
		i32 StringSectionSize := this->StringSection->FileSize As i32
		i32 DataSize := 0
		
		for (i32 Index := 0, Index < SectionHeaderCount, Index += 1) {
			ELFSectionHeader* NextSectionHeader := this->SectionHeaders[Index]
			
			if (NextSectionHeader->Flags = ELF_SECTION_FLAGS_HAS_DATA) {
				DataSize += NextSectionHeader->FileSize As i32
			}
		}
		
		i32 PHDRSize := ProgramHeadersSize + SectionHeadersSize
		i32 FinalSize := #ELFHeader + PHDRSize + StringSectionSize + CodeSize + DataSize
		
		; Update the PHDR segment to contain the headers we are writing
		this->PHDR->FileSize := PHDRSize
		this->PHDR->MemorySize := PHDRSize
		
		; Update the segment which contains the program headers
		this->LoadPHDR->FileSize := PHDRSize
		this->LoadPHDR->MemorySize := PHDRSize
		
		this->BufferSize := FinalSize
		this->Buffer := ReAlloc(this->Buffer, FinalSize)
		
		void* Buffer := this->Buffer
		i8* ByteBuffer := Buffer As i8*
		
		; Calculate the offset of each segment inside the file
		i32 ProgramHeadersOffset := #ELFHeader
		i32 SectionHeadersOffset := ProgramHeadersOffset + ProgramHeadersSize
		i32 StringsOffset := SectionHeadersOffset + SectionHeadersSize
		i32 CodeOffset := StringsOffset + StringSectionSize
		i32 DataOffset := CodeOffset + CodeSize
		
		; Update the ELF header to contain the program/section header offsets, and entry-point
		this->Header->ProgramHeadersOffset := ProgramHeadersOffset
		this->Header->SectionHeadersOffset := SectionHeadersOffset
		
		; Update the offsets of each segment/section
		this->PHDR->FileOffset := ProgramHeadersOffset
		this->PHDR->VirtualAddress := ProgramHeadersOffset
		this->LoadPHDR->FileOffset := ProgramHeadersOffset
		this->LoadPHDR->VirtualAddress := ProgramHeadersOffset
		this->StringSection->FileOffset := StringsOffset
		
		; Copy the bytes of all the program/section headers into the ELF buffer after the ELF header
		;  (Which will line up with the offsets written into the header above)
		
		i64 GlobalBytes := this->DataProgramHeader->MemorySize
		i64 GlobalPages := GlobalBytes / 0x1000
		
		if (GlobalBytes % 0x1000) {
			GlobalPages += 1
		}
		
		if (this->DataProgramHeader) {
			; Update the data segment/section. Todo: If 1kb of globals are used, push the code segment back
			this->DataProgramHeader->VirtualAddress := ImageBase + 0x1000
			this->DataSectionHeader->VirtualAddress := ImageBase + 0x1000
		}
		
		; Update the segments to be relative to the image base
		this->PHDR->VirtualAddress += ImageBase
		this->LoadPHDR->VirtualAddress += ImageBase
		this->StringSection->VirtualAddress += ImageBase
		
		; Update the code segment+section with the code file offset, and entry-point
		; Note: the code segment is loaded with the `CodeOffset` offset since AMD64 ELF requires the file offset
		;  and virtual address to be equal modulo 1024
		i64 CodeBase := ImageBase + 0x1000 + (GlobalPages * 0x1000) + CodeOffset
		
		i64 EntryPoint := CodeBase + MainOffset
		
		this->Header->EntryPoint := EntryPoint
		this->CodeProgramHeader->FileOffset := CodeOffset
		this->CodeProgramHeader->VirtualAddress := CodeBase
		this->CodeSectionHeader->FileOffset := CodeOffset
		this->CodeSectionHeader->VirtualAddress := CodeBase
		
		ELFProgramHeader* ProgramHeadersBuffer := (ByteBuffer + ProgramHeadersOffset) As ELFProgramHeader*
		ELFSectionHeader* SectionHeadersBuffer := (ByteBuffer + SectionHeadersOffset) As ELFSectionHeader*
		
		for (Index := 0, Index < ProgramHeaderCount, Index += 1) {
			ELFProgramHeader* NextProgramHeader := this->ProgramHeaders[Index]
			
			MoveMemory(ProgramHeadersBuffer[Index], NextProgramHeader, #ELFProgramHeader)
		}
		
		i32 NextDataSectionOffset := DataOffset
		
		for (Index := 0, Index < SectionHeaderCount, Index += 1) {
			NextSectionHeader := this->SectionHeaders[Index]
			
			i64 OldVirtualAddress := NextSectionHeader->VirtualAddress
			i64 OldFlags := NextSectionHeader->Flags
			
			if (NextSectionHeader->Flags = ELF_SECTION_FLAGS_HAS_DATA) {
				NextSectionHeader->FileOffset := NextDataSectionOffset
				NextDataSectionOffset += NextSectionHeader->FileSize As i32
				
				NextSectionHeader->VirtualAddress := 0
				NextSectionHeader->Flags := 0
			}
			
			MoveMemory(SectionHeadersBuffer[Index], NextSectionHeader, #ELFSectionHeader)
			
			NextSectionHeader->VirtualAddress := OldVirtualAddress
			NextSectionHeader->Flags := OldFlags
		}
		
		MoveMemory(&ByteBuffer[StringsOffset], this->StringBuffer, StringSectionSize)
		MoveMemory(&ByteBuffer[CodeOffset], this->CodeBuffer, CodeSize)
		
		NextDataSectionOffset := DataOffset
		
		for (Index := 0, Index < SectionHeaderCount, Index += 1) {
			NextSectionHeader := this->SectionHeaders[Index]
			
			if (NextSectionHeader->Flags = ELF_SECTION_FLAGS_HAS_DATA) {
				MoveMemory(&ByteBuffer[NextDataSectionOffset], NextSectionHeader->VirtualAddress As void*, NextSectionHeader->FileSize As i32)
				
				NextDataSectionOffset += NextSectionHeader->FileSize As i32
			}
		}
	}
}
