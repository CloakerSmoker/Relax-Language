struct ELFHeader unaligned {
	i32 Magic,
	i8 Bitness,
	i8 Endianness,
	i8 UseCurrentVersion,
	i8 TargetABI,
	
	union {
		/* This byte is followed by 7 unused ones, so this union takes up the used byte plus 7, keeping the offsets intact */
		i8 ABIVersion,
		i64 Unused
	},
	
	i16 FileType,
	i16 MachineType,
	
	i32 ELFVersion,
	i64 EntryPoint,
	i64 ProgramHeadersOffset,
	i64 SectionHeadersOffset,
	i32 Flags,
	i16 HeaderSize,
	i16 ProgramHeadersSize,
	i16 ProgramHeaderEntryCount,
	i16 SectionHeadersSize,
	i16 SectionHeaderEntryCount,
	i16 SectionNameHeaderIndex
}

i32 SEGMENT_EXECUTE := 1
i32 SEGMENT_WRITE := 2
i32 SEGMENT_READ := 4

i32 SEGMENT_TYPE_LOAD := 0x01

struct ELFProgramHeader {
	i32 SegmentType,
	i32 Flags,
	i64 FileOffset,
	i64 VirtualAddress,
	i64 PhysicalAddress,
	i64 FileSize,
	i64 MemorySize,
	i64 Alignment
}

i32 ELF_SECTION_EXECUTE := 1
i32 ELF_SECTION_WRITE := 2
i32 ELF_SECTION_READ := 4

i32 ELF_SECTION_DATA := 0x01
i32 ELF_SECTION_STRING_TABLE := 0x03
i32 ELF_SECTION_NODATA := 0x08

i64 SECTION_FLAGS_WRITE := 0x01
i64 SECTION_FLAGS_ALLOC := 0x02
i64 SECTION_FLAGS_EXEC := 0x04
i64 SECTION_FLAGS_STRINGS := 0x20

struct ELFSectionHeader {
	i32 NameOffset,
	i32 SectionType,
	i64 SectionFlags,
	i64 VirtualAddress,
	i64 FileOffset,
	i64 FileSize,
	i32 AssociatedSectionIndex,
	i32 ExtraInfo,
	i64 Alignment,
	i64 EntrySize
}

struct ELFProgramSectionHeaders {
	ELFProgramHeader* ProgramHeader,
	ELFSectionHeader* SectionHeader
}

struct ELFBuilder {
	void* Buffer,
	i32 BufferSize,
	
	ELFProgramHeader* PHDR, /* Segment which contains the segment headers */
	ELFProgramHeader* LoadPHDR, /* Segment which loads the segment containing the segment headers */
	ELFSectionHeader* StringSection, /* Section which holds section names (Fuck this format) */
	
	ELFProgramHeader* CodeProgramHeader,
	ELFSectionHeader* CodeSectionHeader,
	
	ELFProgramHeader* DataProgramHeader,
	ELFSectionHeader* DataSectionHeader,
	
	i8* StringBuffer,
	i8* CodeBuffer,
	
	ELFProgramHeader** ProgramHeaders,
	ELFSectionHeader** SectionHeaders,
	
	ELFHeader* ELF,
	
	i32 DataSize
}

i8 ABI_SYSTEMV := 0x00
i16 FILETYPE_EXEC := 0x02
i16 FILETYPE_DYN := 0x03
i16 ELF_MACHINE_AMD64 := 0x3E

define void WriteELFHeader(void* IntoBuffer) {
	ELFHeader* NewHeader := IntoBuffer As ELFHeader*
	
	NewHeader->Magic := 0x464C457F /* 0x7f ELF magic */
	NewHeader->Bitness := 2 /* 1 = 32 bit, 2 = 64 bit */
	NewHeader->Endianness := 1 /* 1 = little endian */
	NewHeader->UseCurrentVersion := 1 /* Not well documented, 0 = invalid */
	NewHeader->TargetABI := ABI_SYSTEMV
	NewHeader->ABIVersion := 0 /* Unused? */
	NewHeader->FileType := FILETYPE_EXEC /* An executable file */
	NewHeader->MachineType := ELF_MACHINE_AMD64
	NewHeader->ELFVersion := 1 /* Use original version of ELF */
	NewHeader->HeaderSize := 64 /* 64 bytes of headers */
	NewHeader->ProgramHeadersSize := #ELFProgramHeader
	NewHeader->SectionHeadersSize := #ELFSectionHeader
	NewHeader->SectionNameHeaderIndex := 1
}

define ELFProgramHeader* AppendProgramHeader(ELFBuilder* ToBuilder) {
	ELFHeader* Header := ToBuilder->ELF
	
	i32 NextIndex := Header->ProgramHeaderEntryCount
	Header->ProgramHeaderEntryCount += 1
	ToBuilder->ProgramHeaders := ReAlloc(ToBuilder->ProgramHeaders, (NextIndex + 1) * 8)
	
	ELFProgramHeader* Result := Alloc(#ELFProgramHeader)
	
	ToBuilder->ProgramHeaders[NextIndex] := Result
	
	return Result
}
define ELFSectionHeader* AppendSectionHeader(ELFBuilder* ToBuilder) {
	ELFHeader* Header := ToBuilder->ELF
	
	i32 NextIndex := Header->SectionHeaderEntryCount
	Header->SectionHeaderEntryCount += 1
	ToBuilder->SectionHeaders := ReAlloc(ToBuilder->SectionHeaders, (NextIndex + 1) * 8)
	
	ELFSectionHeader* Result := Alloc(#ELFSectionHeader)
	
	ToBuilder->SectionHeaders[NextIndex] := Result
	
	return Result
}
define void AppendString(ELFBuilder* ToBuilder, i8* Text) {
	i64 StartingIndex := ToBuilder->StringSection->FileSize
	i32 TextLength := ALen(Text)
	i32 NewSize := StartingIndex + TextLength + 1
	
	ToBuilder->StringBuffer := ReAlloc(ToBuilder->StringBuffer, NewSize)
	ToBuilder->StringSection->FileSize := NewSize
	
	for (i32 Index := 0, Index < TextLength, Index += 1) {
		ToBuilder->StringBuffer[StartingIndex + Index] := Text[Index]
	}
	
	return StartingIndex
}
define ELFSectionHeader* AppendSection(ELFBuilder* ToBuilder, i8* WithName) {
	ELFSectionHeader* NewSection := AppendSectionHeader(ToBuilder)
	
	NewSection->NameOffset := AppendString(ToBuilder, WithName)
	
	return NewSection
}

define void AddCodeSection(ELFBuilder* ToBuilder, i8* CodeBytes, i32 CodeLength) {
	ELFProgramHeader* LoadCode := AppendProgramHeader(ToBuilder)
	
	LoadCode->SegmentType := SEGMENT_TYPE_LOAD
	LoadCode->Flags := SEGMENT_READ | SEGMENT_EXECUTE
	LoadCode->Alignment := 0x01
	LoadCode->FileSize := CodeLength
	LoadCode->MemorySize := CodeLength
	
	ELFSectionHeader* TextSection := AppendSection(ToBuilder, ".text")
	
	TextSection->SectionType := ELF_SECTION_DATA
	TextSection->SectionFlags := SECTION_FLAGS_ALLOC | SECTION_FLAGS_EXEC
	TextSection->Alignment := 0x01
	TextSection->FileSize := CodeLength
	
	ToBuilder->CodeBuffer := CodeBytes
	ToBuilder->CodeProgramHeader := LoadCode
	ToBuilder->CodeSectionHeader := TextSection
}
define void AddDataSection(ELFBuilder* ToBuilder, i32 ReserveBytes) {
	ELFProgramHeader* LoadData := AppendProgramHeader(ToBuilder)
	
	LoadData->SegmentType := SEGMENT_TYPE_LOAD
	LoadData->Flags := SEGMENT_READ | SEGMENT_WRITE
	LoadData->Alignment := 0x01
	LoadData->FileSize := ReserveBytes
	LoadData->MemorySize := ReserveBytes
	
	ELFSectionHeader* DataSection := AppendSection(ToBuilder, ".bss")
	
	DataSection->SectionType := ELF_SECTION_NODATA
	DataSection->SectionFlags := SECTION_FLAGS_ALLOC | SECTION_FLAGS_WRITE
	DataSection->Alignment := 0x01
	DataSection->FileSize := ReserveBytes
	
	ToBuilder->DataProgramHeader := LoadData
	ToBuilder->DataSectionHeader := DataSection
}

define void* AllocateELFBuffer() {
	return Alloc(#ELFHeader)
}
define void ReAllocELFBuffer(ELFBuilder* ForBuilder, i32 NewSize) {
	ForBuilder->Buffer := ReAlloc(ForBuilder->Buffer, NewSize)
	ForBuilder->BufferSize := NewSize
	
	ForBuilder->ELF := ForBuilder->Buffer
}

define ELFBuilder* BuildELFBuilder() {
	ELFBuilder* NewBuilder := Alloc(#ELFBuilder)
	NewBuilder->Buffer := AllocateELFBuffer()
	NewBuilder->BufferSize := #ELFHeader
	
	NewBuilder->ProgramHeaders := Alloc(8)
	NewBuilder->SectionHeaders := Alloc(8)
	
	WriteELFHeader(NewBuilder->Buffer)
	
	NewBuilder->ELF := NewBuilder->Buffer
	
	ELFProgramHeader* PHDR := AppendProgramHeader(NewBuilder)
	NewBuilder->PHDR := PHDR
	
	PHDR->SegmentType := 0x00000006 /* PT_PHDR */
	PHDR->Flags := SEGMENT_READ
	PHDR->Alignment := 0x01
	PHDR->FileOffset := 0x40
	PHDR->VirtualAddress := 0x40
	
	ELFProgramHeader* LoadPHDR := AppendProgramHeader(NewBuilder)
	NewBuilder->LoadPHDR := LoadPHDR
	
	LoadPHDR->SegmentType := SEGMENT_TYPE_LOAD
	LoadPHDR->Flags := SEGMENT_READ | SEGMENT_WRITE
	LoadPHDR->Alignment := 0x01
	LoadPHDR->FileOffset := 0x00
	LoadPHDR->VirtualAddress := 0x00
	
	ELFSectionHeader* NullSection := AppendSectionHeader(NewBuilder)
	
	ELFSectionHeader* StringSection := AppendSectionHeader(NewBuilder)
	NewBuilder->StringSection := StringSection
	
	StringSection->SectionType := ELF_SECTION_STRING_TABLE
	StringSection->Alignment := 0x01
	
	NewBuilder->StringBuffer := Alloc(8)
	StringSection->FileSize := 1
	
	StringSection->NameOffset := AppendString(NewBuilder, ".strtab")
	
	return NewBuilder
}

define void FinalizeELFBuilder(ELFBuilder* TargetBuilder, i32 MainOffset) {
	i32 ProgramHeadersSize := TargetBuilder->ELF->ProgramHeaderEntryCount * #ELFProgramHeader
	i32 SectionHeadersSize := TargetBuilder->ELF->SectionHeaderEntryCount * #ELFSectionHeader
	i32 CodeSize := TargetBuilder->CodeProgramHeader->FileSize
	i32 StringSectionSize := TargetBuilder->StringSection->FileSize
	i32 DataSize := 0
	
	if (TargetBuilder->DataProgramHeader) {
		DataSize := TargetBuilder->DataProgramHeader->MemorySize
	}
	
	i32 PHDRSize := ProgramHeadersSize + SectionHeadersSize
	i32 FinalSize := #ELFHeader + PHDRSize + StringSectionSize + CodeSize + DataSize
	
	/* Update the PHDR segment to contain the headers we are writing */
	TargetBuilder->PHDR->FileSize := PHDRSize
	TargetBuilder->PHDR->MemorySize := PHDRSize
	
	/* These fields are reused to hold the ProgramHeaders/SectionHeaders buffer sizes, but need to be set to their true values */
	TargetBuilder->ELF->ProgramHeadersSize := #ELFProgramHeader
	TargetBuilder->ELF->SectionHeadersSize := #ELFSectionHeader
	
	/* Update the segment which contains the program headers */
	TargetBuilder->LoadPHDR->FileSize := PHDRSize
	TargetBuilder->LoadPHDR->MemorySize := PHDRSize
	
	ReAllocELFBuffer(TargetBuilder, FinalSize)
	
	void* Buffer := TargetBuilder->Buffer
	i8* ByteBuffer := Buffer As i8*
	
	/* Calculate the offset of each segment inside the file */
	i32 DataOffset := 64
	i32 ProgramHeadersOffset := DataOffset + DataSize
	i32 SectionHeadersOffset := ProgramHeadersOffset + ProgramHeadersSize
	i32 StringsOffset := SectionHeadersOffset + SectionHeadersSize
	i32 CodeOffset := StringsOffset + StringSectionSize
	
	/* Update the ELF header to contain the program/section header offsets, and entrypoint */
	TargetBuilder->ELF->ProgramHeadersOffset := ProgramHeadersOffset
	TargetBuilder->ELF->SectionHeadersOffset := SectionHeadersOffset
	
	TargetBuilder->PHDR->FileOffset := ProgramHeadersOffset
	TargetBuilder->PHDR->VirtualAddress := ProgramHeadersOffset
	TargetBuilder->LoadPHDR->FileOffset := ProgramHeadersOffset
	TargetBuilder->LoadPHDR->VirtualAddress := ProgramHeadersOffset
	TargetBuilder->StringSection->FileOffset := StringsOffset
	
	/* Copy the bytes of all the program/section headers into the ELF buffer after the ELF header
		(Which will line up with the offsets written into the header above)
	*/
	i32 ProgramHeaderCount := TargetBuilder->ELF->ProgramHeaderEntryCount
	i32 SectionHeaderCount := TargetBuilder->ELF->SectionHeaderEntryCount
	i8* StringBufferBytes := TargetBuilder->StringBuffer
	i8* CodeBufferBytes := TargetBuilder->CodeBuffer
	
	if (TargetBuilder->DataProgramHeader) {
		/* Update the data segment/section. Todo: If 1kb of globals are used, push the code segment down another page */
		TargetBuilder->DataProgramHeader->FileOffset := DataOffset
		TargetBuilder->DataProgramHeader->VirtualAddress := DEFAULT_IMAGE_BASE + DataOffset + 0x1000
		TargetBuilder->DataSectionHeader->VirtualAddress := DEFAULT_IMAGE_BASE + DataOffset + 0x1000
	}
	
	/* Update the segments to use the imagebase, otherwise they'd be mapped into address 0 */
	TargetBuilder->PHDR->VirtualAddress += DEFAULT_IMAGE_BASE
	TargetBuilder->LoadPHDR->VirtualAddress += DEFAULT_IMAGE_BASE
	TargetBuilder->StringSection->VirtualAddress += DEFAULT_IMAGE_BASE
	
	/* Update the code segment + section with the code file offset, and entrypoint */
	i64 CodeBase := DEFAULT_IMAGE_BASE + 0x2000 + CodeOffset
	i64 EntryPoint := CodeBase + MainOffset
	
	TargetBuilder->ELF->EntryPoint := EntryPoint
	TargetBuilder->CodeProgramHeader->FileOffset := CodeOffset
	TargetBuilder->CodeProgramHeader->VirtualAddress := CodeBase
	TargetBuilder->CodeSectionHeader->FileOffset := CodeOffset
	TargetBuilder->CodeSectionHeader->VirtualAddress := CodeBase
	
	for (i32 Index := 0, Index < ProgramHeaderCount, Index += 1) {
		i8* NextProgramHeader := TargetBuilder->ProgramHeaders[Index] As i8*
		
		for (i32 NestedIndex := 0, NestedIndex < #ELFProgramHeader, NestedIndex += 1) {
			ByteBuffer[ProgramHeadersOffset + NestedIndex + (Index * #ELFProgramHeader)] := NextProgramHeader[NestedIndex]
		}
	}
	for (Index := 0, Index < SectionHeaderCount, Index += 1) {
		i8* NextSectionHeader := TargetBuilder->SectionHeaders[Index] As i8*
		
		for (NestedIndex := 0, NestedIndex < #ELFSectionHeader, NestedIndex += 1) {
			ByteBuffer[SectionHeadersOffset + NestedIndex + (Index * #ELFSectionHeader)] := NextSectionHeader[NestedIndex]
		}	
	}
	for (Index := 0, Index < StringSectionSize, Index += 1) {
		ByteBuffer[StringsOffset + Index] := StringBufferBytes[Index]
	}
	for (Index := 0, Index < CodeSize, Index += 1) {
		ByteBuffer[CodeOffset + Index] := CodeBufferBytes[Index]
	}
}