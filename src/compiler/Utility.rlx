#Require "$/Exit.rlx"

i32 NOTIFY_ERROR := 1
i32 NOTIFY_WARNING := 2

i32 NOTIFY_EXIT := 0x1_0000

i32 NOTIFY_FATAL := NOTIFY_ERROR | NOTIFY_EXIT

declare void NotifyAtContext(i32, SourceContext*, i8*)

define void RawNotifyAtContext(i32 Level, SourceContext* Where, i8* Format, void* Parameters) {
	i32 Length := RawFormatLength(Format, Parameters)
	i8* Buffer := Alloc(Length + 1)
	RawFormatString(Buffer, Length, Format, Parameters)

	NotifyAtContext(Level, Where, Buffer)

	Free(Buffer)
}
define void NotifyAtContext(i32 Level, SourceContext* Where, i8* Format, ... Parameters) {
	RawNotifyAtContext(Level, Where, Format, Parameters)
}

define void ErrorAtContext(SourceContext* Where, i8* Message) {
	NotifyAtContext(NOTIFY_FATAL, Where, Message)
}
define void RawErrorAtContext(SourceContext* Where, i8* Format, void* Parameters) {
	RawNotifyAtContext(NOTIFY_FATAL, Where, Format, Parameters)
}
define void ErrorAtContext(SourceContext* Where, i8* Format, ... Parameters) {
	RawNotifyAtContext(NOTIFY_FATAL, Where, Format, Parameters)
}

define void WarnAtContext(SourceContext* Where, i8* Message) {
	NotifyAtContext(NOTIFY_WARNING, Where, Message)
}
define void RawWarnAtContext(SourceContext* Where, i8* Format, void* Parameters) {
	RawNotifyAtContext(NOTIFY_WARNING, Where, Format, Parameters)
}
define void WarnAtContext(SourceContext* Where, i8* Format, ... Parameters) {
	RawNotifyAtContext(NOTIFY_WARNING, Where, Format, Parameters)
}

define i8* OpenAndRead(i8* FilePath, i32* OutFileSize, SourceContext* Blame) {
	i64 FileHandle := FileOpen(FilePath, FILE_READ)
	
	if (FileHandle < 0) {
		if (Blame) {
			; Blame is opaque for now, defined below. Use the function instead of the method
			
			ErrorAtContext(Blame, "Could not open '%s', error code %i\n", FilePath, FileGetError(FileHandle))
		}
		else {
			SwapOutputStream()
			Print("Could not open file: '%s'\n", FilePath)
			Print("Error code: %i\nAborting", FileGetError(FileHandle))
			
			Exit(1)
		}
	}
	
	i32 FileSize := FileGetSize(FileHandle)
	
	if (OutFileSize != 0) {
		OutFileSize[0] := FileSize
	}
	
	void* FileBuffer := Alloc(FileSize)
	
	i64 ReadResult := FileRead(FileHandle, FileBuffer, FileSize)
	
	if (ReadResult < 0) {
		SwapOutputStream()
		Print("Could not read file: '%s'\nError code: %i\nAborting", FilePath, FileGetError(ReadResult))
		
		Exit(1)
	}
	
	FileClose(FileHandle)
	
	return FileBuffer
}
define i8* OpenAndRead(i8* FilePath, i32* OutFileSize) {
	return OpenAndRead(FilePath, OutFileSize, null)
}

i8 OUTPUT_PE := 0
i8 OUTPUT_ELF := 1
i8 OUTPUT_BIN := 2

i8 ABI_X64 := 1
i8 ABI_SYSTEMV := 2

i8 DUMP_FUNCTIONS := 1
i8 DUMP_OPTIMIZED_GLOBALS := 2
i8 DUMP_PRESENT_GLOBALS := 4
i8 DUMP_GLOBALS := 6
i8 DUMP_LINES := 8
i8 DUMP_SILENT := 16
i8 DUMP_MAKEDEP := 32
i8 DUMP_SYNTHETIC_TOKENS := 64

i8 DEBUG_NONE := 0
i8 DEBUG_EMIT_FUNCTION_NAMES := 1
i8 DEBUG_EMIT_DWARF := 2
i8 DEBUG_EMIT_RELOC := 4
i8 DEBUG_EMIT_FUNCTION_SYMBOLS := 8
i8 DEBUG_EMIT_GLOBAL_SYMBOLS := 16
i8 DEBUG_EMIT_SYMBOLS := 24
i8 DEBUG_EMIT_DYNAMIC := 32
i8 DEBUG_EMIT_OBJECT := 64

i8 LINE_ENDING_DEFAULT := 0
i8 LINE_ENDING_CR := 1
i8 LINE_ENDING_CRLF := 2

struct IncludeEntry {
	; Maps misc. forms of a path to a resolved/included absolute path

	i8* AbsolutePath
}

struct BuildConfig {
	LexerState* Lexer
	i8* SourceFile
	i8* LibraryDirectory
	i8* PlatformDirectory
	AVLTree IncludedFiles

	i8* PlatformName
	
	i64 ImageBase
	i64 PhysicalImageBase
	i8 OutputFormat
	i8 TargetABI
	i8 DumpInfo
	i8 DebugMode
	i8 LineEnding

	union {
		i16 PESubsystem
		i8 ELFABI
	}

	static self* New() {
		self* this := Alloc(#self)

		this~>IncludedFiles->ValueSize := #IncludeEntry

		return this
	}

	define void DefineIncludedPath(i64 Hash, i8* Absolute) {
		IncludeEntry Entry {
			AbsolutePath: Absolute
		}

		this~>IncludedFiles->Insert(Hash, &Absolute)
	}

	define void DefineIncludedPath(i8* Path, i8* Absolute) {
		this->DefineIncludedPath(FNV1A(Path), Absolute)
	}
	define void DefineIncludedPath(SafeString* Path, i8* Absolute) {
		this->DefineIncludedPath(FNV1A(Path->Buffer, Path->Length), Absolute)
	}

	define i8 HasIncludedPath(i8* Path) {
		return this~>IncludedFiles->Has(FNV1A(Path))
	}

	define i8* LookupIncludedPath(i8* Path) {
		IncludeEntry* Entry := this~>IncludedFiles->Get(FNV1A(Path))

		return Entry->AbsolutePath
	}

	define void Free() {
		this~>IncludedFiles->Free()
		Free(this)
	}
}

struct SourceContext {
	LexerState* Lexer

	i32 LineNumber,
	i32 PositionInSource,
	i16 LengthInSource
	
	define SourceContext* Clone(SourceContext* Other) {
		MoveMemory(this, Other, #SourceContext)
		
		return this
	}
	define SourceContext* Merge(SourceContext* Other) {
		if (this->PositionInSource > Other->PositionInSource) {
			this->PositionInSource := Other->PositionInSource
		}
		
		i32 ThisEnd := this->PositionInSource + this->LengthInSource
		i32 OtherEnd := Other->PositionInSource + Other->LengthInSource
		
		if (ThisEnd < OtherEnd) {
			this->LengthInSource := (OtherEnd - this->PositionInSource) As i16
		}
		else {
			this->LengthInSource := (ThisEnd - this->PositionInSource) As i16
		}
		
		return this
	}
	define SourceContext* Merge(... Others) {
		i32 Count := Others[0] As i32
		
		for (i32 Index := 1, Index <= Count, Index += 1) {
			this->Merge(Others[Index] As SourceContext*)
		}
		
		return this
	}
	
	define void Notify(i32 Level, i8* Message) {
		NotifyAtContext(Level, this, Message)
	}
	define void Notify(i32 Level, i8* Format, ... Parameters) {
		RawNotifyAtContext(Level, this, Format, Parameters)
	}
	define void Error(i8* Message) {
		ErrorAtContext(this, Message)
	}
	define void Error(i8* Format, ... Parameters) {
		RawErrorAtContext(this, Format, Parameters)
	}
	define void Warn(i8* Message) {
		WarnAtContext(this, Message)
	}
	define void Warn(i8* Format, ... Parameters) {
		RawWarnAtContext(this, Format, Parameters)
	}
}

define void CopyContext(SourceContext* From, SourceContext* To) {
	To->Lexer := From->Lexer
	To->LineNumber := From->LineNumber
	To->PositionInSource := From->PositionInSource
	To->LengthInSource := From->LengthInSource
}

define void MergeContexts(SourceContext* Left, SourceContext* Right, SourceContext* To) {
	CopyContext(Left, To)
	
	if (Left->PositionInSource > Right->PositionInSource) {
		To->PositionInSource := Right->PositionInSource
	}
	
	i32 LeftEnd := Left->PositionInSource + Left->LengthInSource
	i32 RightEnd := Right->PositionInSource + Right->LengthInSource
	
	if (LeftEnd < RightEnd) {
		To->LengthInSource := (RightEnd - To->PositionInSource) As i16
	}
	else {
		To->LengthInSource := (LeftEnd - To->PositionInSource) As i16
	}
}

define i8 GetNumberSize(i64 NumberToCheck) {
	/* Returns the minimum number of bytes needed to store NumberToCheck */
	
	if (NumberToCheck & 0x7FFFFFFF80000000) {
		return 8
	}
	else if (NumberToCheck & 0x7FFF8000) {
		return 4
	}
	else if (NumberToCheck & 0x7F80) {
		return 2
	}
	else {
		return 1
	}
}

define i32 RoundTo(i32 Value, i32 BaseValue) {
	/* Rounds Value up to a multiple of BaseValue */
	
	i32 Remainder := Value % BaseValue
	
	if (Remainder = 0) {
		return Value
	}
	
	return (Value - Remainder) + BaseValue
}
