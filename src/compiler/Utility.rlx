DllImport i64 GetCurrentProcess() {Kernel32.dll, GetCurrentProcess}
DllImport void TerminateProcess(i64, i32) {Kernel32.dll, TerminateProcess}

define void Exit(i32 ExitCode) {
	windows {
		TerminateProcess(GetCurrentProcess(), ExitCode)
	}
	linux {
		syscall:(60, ExitCode)
	}
}

define i16* OpenAndRead(i8* FilePath, i32* OutFileSize) {
	i64 FileHandle := FileOpen(FilePath, FILE_READ)
	
	if (FileHandle < 0) {
		SwapOutputStream()
		Print("Could not open file: '%s'\nError code: %i\nAborting", FilePath, FileGetError(FileHandle))
		Exit(1)
	}
	
	i32 FileSize := FileGetSize(FileHandle)
	
	if (OutFileSize != 0) {
		OutFileSize[0] := FileSize
	}
	
	void* FileBuffer := Alloc(FileSize)
	
	i64 ReadResult := FileRead(FileHandle, FileBuffer, FileSize)
	
	if (ReadResult < 0) {
		SwapOutputStream()
		Print("Could not read file: '%s'\nError code: %i\nAborting", FilePath, FileGetError(FileHandle))
		
		Exit(1)
	}
	
	i16* Source := AToW(FileBuffer As i8*, FileSize)
	
	Free(FileBuffer)
	FileClose(FileHandle)
	
	return Source
}

i8 OUTPUT_PE := 0
i8 OUTPUT_ELF := 1
i8 OUTPUT_BIN := 2

i8 ABI_X64 := 1
i8 ABI_SYSTEMV := 2

i8 DUMP_FUNCTIONS := 1
i8 DUMP_GLOBALS := 2
i8 DUMP_LINES := 4

i8 DEBUG_NONE := 0
i8 DEBUG_EMIT_FUNCTION_NAMES := 1
i8 DEBUG_EMIT_DWARF := 2

struct BuildConfig {
	LexerState* Lexer
	i8* SourceFile
	
	i64 ImageBase
	i8 OutputFormat
	i8 TargetABI
	i8 DumpInfo
	i8 DebugMode
}

declare void PrettyError(ErrorContext*, i8*, i8)

struct ErrorContext {
	SafeWideString* SourceFilePath,
	i32 LineNumber,
	i16* Source,
	i32 PositionInSource,
	i16 LengthInSource
	
	
	define ErrorContext* Clone(ErrorContext* Other) {
		MoveMemory(this, Other, #ErrorContext)
		
		return this
	}
	define ErrorContext* Merge(ErrorContext* Other) {
		if (this->PositionInSource > Other->PositionInSource) {
			this->PositionInSource := Other->PositionInSource
		}
		
		i32 ThisEnd := this->PositionInSource + this->LengthInSource
		i32 OtherEnd := Other->PositionInSource + Other->LengthInSource
		
		if (ThisEnd < OtherEnd) {
			this->LengthInSource := (OtherEnd - this->PositionInSource) As i16
		}
		else {
			this->LengthInSource := (ThisEnd - this->PositionInSource) As i16
		}
		
		return this
	}
	define ErrorContext* Merge(... Others) {
		i32 Count := Others[0] As i32
		
		for (i32 Index := 1, Index <= Count, Index += 1) {
			this->Merge(Others[Index] As ErrorContext*)
		}
		
		return this
	}
	
	define void Error(i8* Message) {
		if (Message) {
			SwapOutputStream()
		}
		
		PrettyError(this, Message, Red | Bright)
		Exit(1)
	}
	define void Warn(i8* Message) {
		PrettyError(this, Message, Red | Green)
	}
}

define void CopyContext(ErrorContext* From, ErrorContext* To) {
	To->SourceFilePath := From->SourceFilePath
	To->LineNumber := From->LineNumber
	To->Source := From->Source
	To->PositionInSource := From->PositionInSource
	To->LengthInSource := From->LengthInSource
}

define void MergeContexts(ErrorContext* Left, ErrorContext* Right, ErrorContext* To) {
	CopyContext(Left, To)
	
	if (Left->PositionInSource > Right->PositionInSource) {
		To->PositionInSource := Right->PositionInSource
	}
	
	i32 LeftEnd := Left->PositionInSource + Left->LengthInSource
	i32 RightEnd := Right->PositionInSource + Right->LengthInSource
	
	if (LeftEnd < RightEnd) {
		To->LengthInSource := (RightEnd - To->PositionInSource) As i16
	}
	else {
		To->LengthInSource := (LeftEnd - To->PositionInSource) As i16
	}
}

define i16* FindLastLine(i16* Base, i32 Offset) {
	i32 Index := 0
	i16* WString := Base + Offset
	
	loop {
		i16 NextCharacter := (WString - Index)[0]
		
		if (NextCharacter = 13 || NextCharacter = 10) {
			return (WString - Index) + 2
		}
		else if ((WString - Index) <= Base) {
			break
		}
		
		Index += 1
	}
	
	return Base
}

define void PrintSpaces(i32 Count) {
	while (Count != 0) {
		PrintCharacter(' ')
		Count -= 1
	}
}

define void ManualErrorMessagePrelude() {
	SwapOutputStream()
	TextColor(Red | Bright)
}

define void PrettyError(ErrorContext* At, i8* Message, i8 Color) {	
	i8* LineNumberString := IToA(At->LineNumber)
	i32 LineNumberLength := StringLength(LineNumberString)
	
	if (Message) {
		TextColor(Color)
		Print(Message)
		PrintNewLine()
	}
	
	ResetColors()
	
	PrintSpaces(LineNumberLength + 1) 
	Print(" [^90 ")
	PrintSafeString(At->SourceFilePath)
	
	Print(" ^F0]\n %s | ", LineNumberString)
	
	i32 OffsetInSource := At->PositionInSource * 2
	
	i16* SourceLine := FindLastLine(At->Source, OffsetInSource)
	i32 PositionInLine := (OffsetInSource - (SourceLine - At->Source As i32)) / 2
	
	i32 DashCount := 0
	
	for (i32 LeftIndex := 0, LeftIndex < PositionInLine, LeftIndex += 1) {
		i16 NextLeftCharacter := SourceLine[LeftIndex]
		
		if (NextLeftCharacter = '	') {
			PrintSpaces(4)
			DashCount += 4
		}
		else {
			PrintCharacter(NextLeftCharacter As i8)
			DashCount += 1
		}
	}
	
	i32 RightIndex := LeftIndex
	
	loop {
		i16 NextCharacter := SourceLine[RightIndex]
		
		if (NextCharacter = 10 || NextCharacter = 13 || NextCharacter = 0) {
			break
		}
		
		PrintCharacter(NextCharacter As i8)
		RightIndex += 1
	}
	
	PrintNewLine()
	
	PrintSpaces(LineNumberLength + 1)
	
	Print(" |-")
	
	for (i32 DashIndex := 0, DashIndex < DashCount, DashIndex += 1) {
		PrintCharacter('-')
	}
	
	TextColor(Color)
	
	for (i32 ArrowIndex := 0, ArrowIndex < At->LengthInSource, ArrowIndex += 1) {
		PrintCharacter('^')
	}
	
	ResetColors()
	
	PrintNewLine()
}
define void PrettyError(ErrorContext* At, i8 Color) {
	PrettyError(At, null, Color)
}

define void ContextError(ErrorContext* At, i8* Message) {
	if (Message) {
		SwapOutputStream()
	}
	
	PrettyError(At, Message, Red | Bright)
	Exit(1)
}

define i8 GetNumberSize(i64 NumberToCheck) {
	/* Returns the minimum number of bytes needed to store NumberToCheck */
	
	if (NumberToCheck & 0x7FFFFFFF80000000) {
		return 8
	}
	else if (NumberToCheck & 0x7FFF8000) {
		return 4
	}
	else if (NumberToCheck & 0x7F80) {
		return 2
	}
	else {
		return 1
	}
}
