#Require "$/Exit.rlx"

declare void PrettyError(ErrorContext*, i8*, i8)

define i8* OpenAndRead(i8* FilePath, i32* OutFileSize, ErrorContext* Blame) {
	i64 FileHandle := FileOpen(FilePath, FILE_READ)
	
	if (FileHandle < 0) {
		SwapOutputStream()
		
		if (Blame) {
			i8[200] Message
			i32 Length := FormatString(Message, 200, "Could not open '%s'", FilePath)
			Message[Length] := 0

			PrettyError(Blame, Message, Red | Bright)
		}
		else {
			Print("Could not open file: '%s'\n", FilePath)
		}
		
		Print("Error code: %i\nAborting", FileGetError(FileHandle))
		
		Exit(1)
	}
	
	i32 FileSize := FileGetSize(FileHandle)
	
	if (OutFileSize != 0) {
		OutFileSize[0] := FileSize
	}
	
	void* FileBuffer := Alloc(FileSize)
	
	i64 ReadResult := FileRead(FileHandle, FileBuffer, FileSize)
	
	if (ReadResult < 0) {
		SwapOutputStream()
		Print("Could not read file: '%s'\nError code: %i\nAborting", FilePath, FileGetError(ReadResult))
		
		Exit(1)
	}
	
	FileClose(FileHandle)
	
	return FileBuffer
}
define i8* OpenAndRead(i8* FilePath, i32* OutFileSize) {
	return OpenAndRead(FilePath, OutFileSize, null)
}

i8 OUTPUT_PE := 0
i8 OUTPUT_ELF := 1
i8 OUTPUT_BIN := 2

i8 ABI_X64 := 1
i8 ABI_SYSTEMV := 2

i8 DUMP_FUNCTIONS := 1
i8 DUMP_OPTIMIZED_GLOBALS := 2
i8 DUMP_PRESENT_GLOBALS := 4
i8 DUMP_GLOBALS := 6
i8 DUMP_LINES := 8
i8 DUMP_SILENT := 16
i8 DUMP_MAKEDEP := 32

i8 DEBUG_NONE := 0
i8 DEBUG_EMIT_FUNCTION_NAMES := 1
i8 DEBUG_EMIT_DWARF := 2
i8 DEBUG_EMIT_RELOC := 4
i8 DEBUG_EMIT_FUNCTION_SYMBOLS := 8
i8 DEBUG_EMIT_GLOBAL_SYMBOLS := 16
i8 DEBUG_EMIT_SYMBOLS := 24
i8 DEBUG_EMIT_DYNAMIC := 32

i8 LINE_ENDING_DEFAULT := 0
i8 LINE_ENDING_CR := 1
i8 LINE_ENDING_CRLF := 2

struct BuildConfig {
	LexerState* Lexer
	i8* SourceFile
	i8* LibraryDirectory
	i8* PlatformDirectory
	HashMap* IncludedFiles

	i8* PlatformName
	
	i64 ImageBase
	i64 PhysicalImageBase
	i8 OutputFormat
	i8 TargetABI
	i8 DumpInfo
	i8 DebugMode
	i8 LineEnding

	union {
		i16 PESubsystem
		i8 ELFABI
	}
}

declare void PrettyError(ErrorContext*, i8*, i8)
declare void ContextError(ErrorContext*, i8*)

struct ErrorContext {
	LexerState* Lexer

	i32 LineNumber,
	i32 PositionInSource,
	i16 LengthInSource
	
	define ErrorContext* Clone(ErrorContext* Other) {
		MoveMemory(this, Other, #ErrorContext)
		
		return this
	}
	define ErrorContext* Merge(ErrorContext* Other) {
		if (this->PositionInSource > Other->PositionInSource) {
			this->PositionInSource := Other->PositionInSource
		}
		
		i32 ThisEnd := this->PositionInSource + this->LengthInSource
		i32 OtherEnd := Other->PositionInSource + Other->LengthInSource
		
		if (ThisEnd < OtherEnd) {
			this->LengthInSource := (OtherEnd - this->PositionInSource) As i16
		}
		else {
			this->LengthInSource := (ThisEnd - this->PositionInSource) As i16
		}
		
		return this
	}
	define ErrorContext* Merge(... Others) {
		i32 Count := Others[0] As i32
		
		for (i32 Index := 1, Index <= Count, Index += 1) {
			this->Merge(Others[Index] As ErrorContext*)
		}
		
		return this
	}
	
	define void Error(i8* Message) {
		if (Message) {
			SwapOutputStream()
		}
		
		PrettyError(this, Message, Red | Bright)
		Exit(1)
	}
	define void Warn(i8* Message) {
		PrettyError(this, Message, Red | Green)
	}
}

define void CopyContext(ErrorContext* From, ErrorContext* To) {
	To->Lexer := From->Lexer
	To->LineNumber := From->LineNumber
	To->PositionInSource := From->PositionInSource
	To->LengthInSource := From->LengthInSource
}

define void MergeContexts(ErrorContext* Left, ErrorContext* Right, ErrorContext* To) {
	CopyContext(Left, To)
	
	if (Left->PositionInSource > Right->PositionInSource) {
		To->PositionInSource := Right->PositionInSource
	}
	
	i32 LeftEnd := Left->PositionInSource + Left->LengthInSource
	i32 RightEnd := Right->PositionInSource + Right->LengthInSource
	
	if (LeftEnd < RightEnd) {
		To->LengthInSource := (RightEnd - To->PositionInSource) As i16
	}
	else {
		To->LengthInSource := (LeftEnd - To->PositionInSource) As i16
	}
}

define i8 GetNumberSize(i64 NumberToCheck) {
	/* Returns the minimum number of bytes needed to store NumberToCheck */
	
	if (NumberToCheck & 0x7FFFFFFF80000000) {
		return 8
	}
	else if (NumberToCheck & 0x7FFF8000) {
		return 4
	}
	else if (NumberToCheck & 0x7F80) {
		return 2
	}
	else {
		return 1
	}
}

define i32 RoundTo(i32 Value, i32 BaseValue) {
	/* Rounds Value up to a multiple of BaseValue */
	
	i32 Remainder := Value % BaseValue
	
	if (Remainder = 0) {
		return Value
	}
	
	return (Value - Remainder) + BaseValue
}
