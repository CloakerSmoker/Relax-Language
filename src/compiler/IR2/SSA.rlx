	define void SetName(TACBlock* Block, i8* Name, TACAddress Value) {
		Print("Set %i.%s to %a\n", Block->Number, Name, Value)

		i64 Hash := FNV1A(Name)

		TACDefinition Definition {
			Name: Name,
			Value: Value
		}

		Block~>Definitions->Insert(Hash, &Definition)
	}
	define void SetName(i8* Name, TACAddress Value) {
		this->SetName(this->CurrentBlock, Name, Value)
	}

	define void ReplacePhiSource(TACPhiInfo* Phi, TACAddress Old, TACAddress New) {
		i32 DefinitionCount := Phi~>Definitions->Count()

		for (i32 Index := 0, Index < DefinitionCount, Index++) {
			TACPhiDefinition* Definition := Phi~>Definitions->At(Index) As TACPhiDefinition*
			TACAddress Next := Definition->Address

			if (Next->Equals(Old)) {
				this->RemoveUseAt(Next, Old)
				this->UseAt(Next, New)

				Definition->Address := New
				return
			}
		}
	}

	define TACAddress RemoveTrivialPhi(TACAddress PhiAddress, TACTriple* Triple, TACPhiInfo* Phi) {
		TACAddress Same := TAC_ADDRESS_NULL
		i32 DefinitionCount := Phi~>Definitions->Count()

		for (i32 Index := 0, Index < DefinitionCount, Index++) {
			TACPhiDefinition* Definition := Phi~>Definitions->At(Index)
			TACAddress Next := Definition->Address

			if (Next->Equals(Same) || Next->Equals(PhiAddress)) {
				continue
			}
			else if (Same != null) {
				return PhiAddress
			}

			Same := Next
		}

		if (Same = TAC_ADDRESS_NULL) {
			this->Remove(PhiAddress)
		}

		return PhiAddress

		;Print("Replace %a with %a\n", PhiAddress, Same)

		i32 UseCount := Triple~>Uses->Count()

		for (i32 Index := 0, Index < UseCount, Index++) {
			TACAddress NextUser := Triple~>Uses->At(Index) As TACAddress
			TACTriple* NextTriple := this->GetTemporary(NextUser)
			
			if (NextTriple->Is(TAC_PHI)) {
				this->ReplacePhiSource(NextTriple->Phi, PhiAddress, Same)
			}
			else {
				if (NextTriple->Left->Equals(PhiAddress)) {
					this->RemoveUseAt(NextUser, PhiAddress)
					this->UseAt(NextUser, Same)

					NextTriple->Left := Same
				}

				if (NextTriple->Right->Equals(PhiAddress)) {
					this->RemoveUseAt(NextUser, PhiAddress)
					this->UseAt(NextUser, Same)

					NextTriple->Right := Same
				}
			}
		}

		for (i32 Index := 0, Index < UseCount, Index++) {
			TACAddress NextUser := Triple~>Uses->At(Index) As TACAddress
			TACTriple* NextTriple := this->GetTemporary(NextUser)
			
			if (NextTriple->Is(TAC_PHI)) {
				this->RemoveTrivialPhi(NextUser, NextTriple, NextTriple->Phi)
			}
		}

		/*
		Phi->RemoveDefinition(PhiAddress.BlockNumber, PhiAddress)

		for (i32 Index := 0, Index < Phi~>Definitions->Count(), Index++) {
			TACAddress Address := Phi~>Definitions->At(Index) As TACAddress

			if (Address.Is(TACAddressKind:Temporary)) {
				TACTriple* Triple := this->GetTemporary(Address)

				if (Triple->Is(TAC_PHI)) {
					this->RemoveTrivialPhi(Triple->Phi, Address)
				}
			}
		}
		;*/

		return Same
	}

	declare TACAddress LookupName(TACBlock*, i8*, i64)

	define TACAddress AddPhiOperands(TACBlock* Block, TACAddress PhiAddress) {
		TACTriple* Triple := this->GetTemporary(PhiAddress)
		TACPhiInfo* Phi := Triple->Phi
		
		for (i32 Index := 0, Index < Block~>Parents->Count(), Index++) {
			TACBlock* Parent := Block~>Parents->At(Index)

			TACAddress ParentDefinition := this->LookupName(Parent, Phi->Name, Phi->Hash)

			if (ParentDefinition != TAC_ADDRESS_NULL) {
				Phi->AddDefinition(Parent->Number, ParentDefinition)
				this->UseAt(PhiAddress, ParentDefinition)
			}
		}

		return this->RemoveTrivialPhi(PhiAddress, Triple, Phi)

		;return PhiAddress
	}
	
	define TACAddress LookupName(TACBlock* Block, i8* Name, i64 Hash) {
		if (Block~>Definitions->Has(Hash)) {
			TACDefinition* Definition := Block~>Definitions->Get(Hash)

			Print("Get %i.%s is %a\n", Block->Number, Name, Definition->Value)

			return Definition->Value
		}
		else {
			Print("No such %i.%s (sealed? %i)\n", Block->Number, Name, Block->Sealed)
		}
		
		TACAddress Result := TAC_ADDRESS_NULL
		
		if !(Block->Sealed) {
			TACPhiInfo* Phi := TACPhiInfo:New(Name, Hash)
			Result := this->Emit(Block, TAC_PHI, Phi As TACAddress)

			Block~>IncompletePhi->Push(Result As void*)
		}
		else if (Block~>Parents->Count() = 1) {
			TACBlock* Parent := Block~>Parents->At(0)

			return this->LookupName(Parent, Name, Hash)
		}
		else {
			Print("new phi\n")
			TACPhiInfo* Phi := TACPhiInfo:New(Name, Hash)
			Result := this->Emit(Block, TAC_PHI, Phi As TACAddress)
			this->SetName(Block, Name, Result)

			TACTriple* NewPhi := this->GetTemporary(Result)

			; Move phi to start of block
			Block~>Body->RemoveValue(NewPhi)
			Block~>Body->Insert(0, NewPhi)

			Result := this->AddPhiOperands(Block, Result)
		}

		this->SetName(Block, Name, Result)

		return Result
	}

	define TACAddress LookupName(TACBlock* Block, i8* Name) {
		return this->LookupName(Block, Name, FNV1A(Name))
	}

	define TACAddress LookupName(i8* Name) {
		return this->LookupName(this->CurrentBlock, Name, FNV1A(Name))
	}

	define void SealBlock(TACBlock* Block) {
		if !(Block->Sealed) {
			Block->Sealed := true

			i32 PhiCount := Block~>IncompletePhi->Count()

			for (i32 Index := 0, Index < PhiCount, Index++) {
				TACAddress PhiAddress := Block~>IncompletePhi->At(Index) As TACAddress

				TACPhiInfo* Phi := this->GetTemporary(PhiAddress)->Phi

				Print("\nSeal %a %i.%s\n", PhiAddress, Block->Number, Phi->Name)

				this->AddPhiOperands(Block, PhiAddress)

				Print("\n")
			}
		}
	}
	
	define void RecomputePhi(TACBlock* Block, TACPhiInfo* Phi, TACAddress PhiAddress) {
		i32 DefinitionCount := Phi~>Definitions->Count()

		for (i32 Index := 0, Index < DefinitionCount, Index++) {
			Free(Phi~>Definitions->At(Index))
		}

		Phi~>Definitions->Clear()

		;this->GetTemporary(PhiAddress)->Print()
		;Print("\n")

		this->AddPhiOperands(Block, PhiAddress)

		;this->GetTemporary(PhiAddress)->Print()
		;Print("\n\n")
	}

	define void RecomputeAllPhi(TACBlock* Block, i32 RemovedBlock) {
		for (i32 Index := 0, Index < Block->Count(), Index++) {
			TACTriple* Next := Block->At(Index)

			if (Next->Is(TAC_PHI)) {
				TACPhiInfo* Phi := Next->Phi
				i32 DefinitionCount := Phi~>Definitions->Count()

				for (i32 PhiIndex := 0, PhiIndex < DefinitionCount, PhiIndex++) {
					TACPhiDefinition* Definition := Phi~>Definitions->At(PhiIndex)

					if (Definition->BlockNumber = RemovedBlock) {
						this->RecomputePhi(Block, Phi, TACAddress:Temporary(Next))
					}
				}
			}
		}
	}

	define void RemoveAllTrivialPhi() {
		i32 BlockCount := this->Blocks->Count()

		for (i32 BlockIndex := BlockCount - 1, BlockIndex >= 0, BlockIndex--) {
			TACBlock* Block := this->Blocks->At(BlockIndex)
			i32 Count := Block->Count()

			for (i32 Index := 0, Index < Count, Index++) {
				TACTriple* Next := Block->At(Index)

				if (Next->Is(TAC_PHI)) {
					TACAddress PhiAddress := TACAddress:Temporary(Next)

					this->RemoveTrivialPhi(PhiAddress, Next, Next->Phi)
				}
			}
		}
	}