struct TACFromAST {
	TACBuilder* Builder
	
	HashMap Locals
	
	static self* New() {
		self* this := Alloc(#self)
		
		this->Builder := TACBuilder:New()
		
		this~>Locals->Initialize()
		
		return this
	}
	
	define TACAddress Emit(i32 Opcode, TACAddress Left, TACAddress Right) {
		return this->Builder->Emit(Opcode, Left, Right)
	}
	define TACAddress Emit(i32 Opcode, TACAddress Operand) {
		return this->Builder->Emit(Opcode, Operand)
	}
	
	define TACAddress EmitOperator(i32 Opcode, TACAddress Left, TACAddress Right) {
		return this->Builder->Emit(TAC_ALU_FIRST + Opcode, Left, Right)
	}
	define TACAddress EmitOperator(i32 Opcode, TACAddress Operand) {
		return this->Builder->Emit(TAC_ALU_FIRST + Opcode, Operand)
	}
	
	define i32 ReserveLabel() {
		return this->Builder->ReserveLabel()
	}
	
	define i32 SetLabel() {
		return this->Builder->SetLabel()
	}
	define i32 SetLabel(i32 Number) {
		return this->Builder->SetLabel(Number)
	}

	define void EnterBlock(i32 Number) {
		this->Builder->StartBlock(Number)
	}

	define void Seal(... RawNumbers) {
		i32 Count := RawNumbers[0] As i32
		i64* Numbers := &RawNumbers[1] As i64*

		for (i32 Index := 0, Index < Count, Index++) {
			i32 Number := Numbers[Index] As i32

			TACBlock* InBlock := this->Builder->Blocks->At(Number)

			this->Builder->SealBlock(InBlock)
		}
	}
	
	define TACAddress FindOrAddVariable(VariableInfo* Variable) {
		if (Variable->IsGlobal) {
			
		}
		else {
			HashMapElement* LocalElement := this~>Locals->Get(Variable->Name)
			
			if (LocalElement) {
				TACVariable* Result := LocalElement->Value
				
				return TACAddress:WrapLong(TACAddressKind:Variable, Result).CopyGeneration()
			}
			else {
				TACVariable* Result := TACVariable:New(Variable)
				
				this~>Locals->Set(Variable->Name, Result)
				
				return TACAddress:WrapLong(TACAddressKind:Variable, Result).CopyGeneration()
			}
		}
		
		return TAC_ADDRESS_NULL
	}
	
	declare TACAddress CompileExpression(ASTNode*)
	
	declare TACAddress CompileStructAccessAddress(StructAccessExpression*)
	
	define TACAddress CompileStructAccessLeft(StructAccessExpression* Access) {
		ASTNode* Left := Access->Left
		
		if (Access->Operator->Value = OPERATOR_DOT) {
			if (Left->NodeType = NODE_TYPE_STRUCT_ACCESS) {
				return this->CompileStructAccessAddress(Left->AccessNode)
			}
			else if (Left->NodeType = NODE_TYPE_VARIABLE) {
				return this->Emit(TAC_LOAD_ADDRESS, this->FindOrAddVariable(Left->VariableValue))
			}
		}
		
		return this->CompileExpression(Left)
	}
	
	define TACAddress CompileStructAccessAddress(StructAccessExpression* Access) {
		StructField* Field := Access->TargetField
		i32 FieldOffset := Field->Offset
		TACAddress Left := this->CompileStructAccessLeft(Access)
		
		if (FieldOffset = 0) {
			return Left
		}
		else {
			return this->EmitOperator(OPERATOR_PLUS, Left, TACAddress:Integer(FieldOffset))
		}
	}
	
	define TACAddress CompileStructAccess(StructAccessExpression* Access) {
		StructField* Field := Access->TargetField
		i8 FieldSize := GetTypeSize(Field->ValueType) As i8
		i32 FieldOffset := Field->Offset
		
		TACAddress Left := this->CompileStructAccessLeft(Access)
		
		Left := this->EmitOperator(OPERATOR_PLUS, Left, TACAddress:Integer(FieldOffset))
		
		return this->Emit(SizedOpcode(TAC_LOAD_INDIRECT_1, FieldSize), Left)
	}
	
	define TACAddress CompileStructAccessSet(StructAccessExpression* Access, TACAddress Value) {
		StructField* Field := Access->TargetField
		i8 FieldSize := GetTypeSize(Field->ValueType) As i8
		i32 FieldOffset := Field->Offset
		
		TACAddress Left := this->CompileStructAccessLeft(Access)
		
		Left := this->EmitOperator(OPERATOR_PLUS, Left, TACAddress:Integer(FieldOffset))
		
		this->Emit(SizedOpcode(TAC_LOAD_INDIRECT_1, FieldSize), Left, Value)
		
		return Value
	}
	
	define TACAddress CompileCall(ASTNode* CallNode) {
		/*CallExpression* Call := CallNode->CallNode
		
		FunctionDefine* Target := Call->TargetFunction
		
		i64* Parameters := Alloc(Call->ParameterCount * #i64)
		
		for (i32 Index := 0, Index < Call->ParameterCount, Index++) {
			Parameters[Index] := this->CompileExpression(Call->Parameters[Index])
		}
		
		return this->EmitCall(Target->LabelNumber, Call->ParameterCount, Parameters)
		*/
		
		return TAC_ADDRESS_NULL
	}
	
	define TACAddress CompileExpression(ASTNode* Target) {
		i8 ResultSize := GetTypeSize(Target->ValueType) As i8
		
		if (Target->NodeType = NODE_TYPE_INTEGER) {
			if (ResultSize = 8) {
				return TACAddress:Integer(Target->IntegerValue As i32)
			}
			else {
				return TACAddress:Integer(Target->IntegerValue)
			}
		}
		else if (Target->NodeType = NODE_TYPE_ZERO) {
			return TACAddress:Integer(0)
		}
		else if (Target->NodeType = NODE_TYPE_VARIABLE) {
			return this->Builder->LookupName(Target->VariableValue->Name->Buffer)
		}
		else if (Target->NodeType = NODE_TYPE_CALL) {
			return this->CompileCall(Target)
		}
		else if (Target->NodeType = NODE_TYPE_STRUCT_ACCESS) {
			if (Target->AccessNode->Operator->Value = OPERATOR_TILDE_GREATER) {
				return this->CompileStructAccessAddress(Target->AccessNode)
			}
			else {
				return this->CompileStructAccess(Target->AccessNode)
			}
		}
		else if (Target->NodeType = NODE_TYPE_UNARY) {
			UnaryExpression* Unary := Target->UnaryNode
			i8 UnaryOperator := Unary->Operator->IntegerValue As i8
			
			if (UnaryOperator = OPERATOR_AND) {
				ASTNode* UnaryRight := Unary->Operand
				
				if (UnaryRight->NodeType = NODE_TYPE_VARIABLE) {
					this->Emit(TAC_LOAD_ADDRESS, this->FindOrAddVariable(UnaryRight->VariableValue))
				}
				else if (UnaryRight->NodeType = NODE_TYPE_STRUCT_ACCESS) {
					return this->CompileStructAccessAddress(UnaryRight->AccessNode)
				}
			}
			else {
				TACAddress Operand := this->CompileExpression(Unary->Operand)
				
				if (UnaryOperator = OPERATOR_STAR) {
					return this->Emit(SizedOpcode(TAC_LOAD_INDIRECT_1, ResultSize), Operand)
				}
				else {
					return this->EmitOperator(UnaryOperator, Operand)
				}
			}
		}
		else if (Target->NodeType = NODE_TYPE_BINARY) {
			BinaryExpression* Binary := Target->BinaryNode
			
			i8 BinaryOperator := Binary->Operator->IntegerValue As i8
			
			if (OPERATOR_FIRST_ASSIGNMENT <= BinaryOperator && BinaryOperator <= OPERATOR_LAST_ASSIGNMENT) {
				ASTNode* LeftNode := Binary->Left
				TACAddress AssignmentRight := this->CompileExpression(Binary->Right)
				
				if (BinaryOperator = OPERATOR_COLON_EQUAL) {	
					if (LeftNode->NodeType = NODE_TYPE_VARIABLE) {
						;TACAddress VariableRegister := this->FindOrAddVariable(LeftNode->VariableValue)->IncrementGeneration()
						
						this->Builder->SetName(LeftNode->VariableValue->Name->Buffer, AssignmentRight)
					}
					else if (LeftNode->NodeType = NODE_TYPE_STRUCT_ACCESS) {
						this->CompileStructAccessSet(LeftNode->AccessNode, AssignmentRight)
					}
					
					return AssignmentRight
				}
				else {
					if (BinaryOperator <= OPERATOR_PERCENT_EQUAL) {	
						BinaryOperator += OPERATOR_PLUS - OPERATOR_PLUS_EQUAL
					}
					else {
						BinaryOperator += OPERATOR_AND - OPERATOR_AND_EQUAL
					}
					
					if (LeftNode->NodeType = NODE_TYPE_VARIABLE) {
						TACAddress VariableRegister := this->FindOrAddVariable(LeftNode->VariableValue)->IncrementGeneration()
						
						TACAddress CompoundResult := this->EmitOperator(BinaryOperator, VariableRegister, AssignmentRight)
						
						this->Emit(TAC_MOVE, VariableRegister, CompoundResult)
					}
				}
			}
			else {
				TACAddress Left := this->CompileExpression(Binary->Left)
				TACAddress Right := this->CompileExpression(Binary->Right)
				
				return this->EmitOperator(BinaryOperator, Left, Right)
			}
		}
		
		return TAC_ADDRESS_NULL
	}
	
	declare void CompileBlock(Block*)
	
	define void CompileIf(IfGroup* Target) {
		i32 BranchCount := Target->BranchCount
		i32 HasElse := (Target->ElseBranch) != 0
		
		i32 FirstLabel := this->Builder->Blocks->Count()
		i32 FirstBodyLabel := FirstLabel + BranchCount
		i32 LastHeaderLabel := FirstBodyLabel - 1
		i32 EndLabel := FirstBodyLabel + BranchCount

		for (i32 Index := FirstLabel, Index <= EndLabel, Index++) {
			this->ReserveLabel()
		}
		
		for (i32 BranchIndex := 0, BranchIndex < BranchCount, BranchIndex += 1) {
			ASTNode* ConditionNode := Target->Conditions[BranchIndex]
			
			if (ConditionNode->NodeType = NODE_TYPE_NONE) {
				continue
			}

			if (BranchIndex != 0) {
				this->SetLabel(FirstLabel + BranchIndex - 1)
			}
			
			i32 BodyLabel := FirstBodyLabel + BranchIndex

			TACAddress Condition := this->CompileExpression(ConditionNode)
			
			this->Emit(TAC_JUMP_TRUE, Condition, TACAddress:Integer(BodyLabel))
			this->Emit(TAC_JUMP_FALSE, Condition, TACAddress:Integer(FirstLabel + BranchIndex))

			this->Seal(BodyLabel)

			if (BranchIndex != 0) {
				this->Seal(FirstLabel + BranchIndex)
			}
		}

		this->SetLabel(LastHeaderLabel)
		this->Seal(LastHeaderLabel)

		if (Target->ElseBranch) {
			this->CompileBlock(Target->ElseBranch)
		}

		this->Emit(TAC_JUMP, TACAddress:Integer(EndLabel))

		for (i32 BranchIndex := 0, BranchIndex < BranchCount, BranchIndex++) {
			i32 BodyLabel := FirstBodyLabel + BranchIndex

			this->SetLabel(BodyLabel)
			this->Seal(BodyLabel)
			
			this->CompileBlock(Target->Bodies[BranchIndex])
			
			this->Emit(TAC_JUMP, TACAddress:Integer(EndLabel))
		}

		;this->EmitJump(EndLabel)
		
		this->SetLabel(EndLabel)
		this->Seal(EndLabel)
	}
	
	i32 CurrentLoopContinueLabel
	i32 CurrentLoopBreakLabel
	
	define i64 EnterLoop(i32 ContinueLabel, i32 BreakLabel) {
		LoopLables Result := this->CurrentLoopContinueLabel As LoopLables
		Result.BreakLabel := this->CurrentLoopBreakLabel
		
		this->CurrentLoopContinueLabel := ContinueLabel
		this->CurrentLoopBreakLabel := BreakLabel
		
		return Result As i64
	}
	define void ExitLoop(i64 PackedLoopState) {
		LoopLables LoopState := PackedLoopState As LoopLables
		
		this->CurrentLoopContinueLabel := LoopState.ContinueLabel
		this->CurrentLoopBreakLabel := LoopState.BreakLabel
	}
	
	define void CompileLoop(Block* LoopBody) {
		i32 StartLabel := this->ReserveLabel()
		i32 EndLabel := this->ReserveLabel()
		
		this->Emit(TAC_JUMP, TACAddress:Integer(StartLabel))
		i64 LoopState := this->EnterLoop(StartLabel, EndLabel)
		
		this->SetLabel(StartLabel)
		
		this->CompileBlock(LoopBody)
		
		this->Emit(TAC_JUMP, TACAddress:Integer(StartLabel))
		
		this->SetLabel(EndLabel)

		this->Seal(StartLabel, EndLabel)
		
		this->ExitLoop(LoopState)
	}
	define void CompileWhile(WhileLoop* WhileToCompile) {
		i32 StartLabel := this->ReserveLabel()
		i32 EndLabel := this->ReserveLabel()
		i32 BodyLabel := this->ReserveLabel()
		
		this->Emit(TAC_JUMP, TACAddress:Integer(StartLabel))
		i64 LoopState := this->EnterLoop(StartLabel, EndLabel)
		
		this->SetLabel(StartLabel)
		
		ASTNode* ConditionNode := WhileToCompile->Condition
		
		TACAddress Condition := this->CompileExpression(ConditionNode)
		this->Emit(TAC_JUMP_TRUE, Condition, TACAddress:Integer(BodyLabel))
		this->Emit(TAC_JUMP_FALSE, Condition, TACAddress:Integer(EndLabel))
		
		this->SetLabel(BodyLabel)

		this->CompileBlock(WhileToCompile->Body)
		
		this->Emit(TAC_JUMP, TACAddress:Integer(StartLabel))
		this->Seal(StartLabel, BodyLabel, EndLabel)

		this->SetLabel(EndLabel)
		
		this->ExitLoop(LoopState)
	}
	define void CompileFor(ForLoop* ForToCompile) {
		this->CompileExpression(ForToCompile->Initializer)
		
		i32 StartLabel := this->ReserveLabel()
		i32 EndLabel := this->ReserveLabel()
		i32 BodyLabel := this->ReserveLabel()
		
		this->Emit(TAC_JUMP, TACAddress:Integer(StartLabel))
		i64 LoopState := this->EnterLoop(StartLabel, EndLabel)
		
		this->SetLabel(StartLabel)
		
		ASTNode* Condition := ForToCompile->Condition
		
		TACAddress ConditionRegister := this->CompileExpression(Condition)
		this->Emit(TAC_JUMP_TRUE, ConditionRegister, TACAddress:Integer(BodyLabel))
		this->Emit(TAC_JUMP, TACAddress:Integer(EndLabel))
		
		this->SetLabel(BodyLabel)
		this->CompileBlock(ForToCompile->Body)
		
		this->CompileExpression(ForToCompile->Step)
		this->Emit(TAC_JUMP, TACAddress:Integer(StartLabel))
		this->Seal(StartLabel, BodyLabel, EndLabel)
		
		this->SetLabel(EndLabel)
		this->ExitLoop(LoopState)
	}
	
	define void CompileStatement(ASTNode* Target) {
		if (Target->NodeType = NODE_TYPE_EXPRESSION) {
			if (Target->ExpressionStatement->NodeType != NODE_TYPE_NONE) {
				; TODO: Remove check for NODE_TYPE_NONE once FoldConstants is called on the input AST, since it
				;  will remove all NODE_TYPE_NONE nodes
				
				this->CompileExpression(Target->ExpressionStatement)
			}
		}
		else if (Target->NodeType = NODE_TYPE_RETURN) {
			TACAddress ReturnValue := this->CompileExpression(Target->ReturnExpression)
			this->Emit(TAC_RETURN, ReturnValue)
		}
		else if (Target->NodeType = NODE_TYPE_IF) {
			this->CompileIf(Target->IfNode)
		}
		else if (Target->NodeType = NODE_TYPE_LOOP) {
			this->CompileLoop(Target->LoopBody)
		}
		else if (Target->NodeType = NODE_TYPE_WHILE) {
			this->CompileWhile(Target->WhileNode)
		}
		else if (Target->NodeType = NODE_TYPE_FOR) {
			this->CompileFor(Target->ForNode)
		}
		else if (Target->NodeType = NODE_TYPE_CONTINUEBREAK) {
			if (Target->IsContinue) {
				this->Emit(TAC_JUMP, TACAddress:Integer(this->CurrentLoopContinueLabel))
			}
			else {
				this->Emit(TAC_JUMP, TACAddress:Integer(this->CurrentLoopBreakLabel))
			}
		}
	}
	
	define void CompileBlock(Block* Target) {
		for (i32 Index := 0, Index < Target->StatementCount, Index++) {
			this->CompileStatement(Target->Statements[Index])
		}
	}
	
	define void CompileFunction(FunctionDefine* Function) {
		;if (Function->CallCount != 0) {
			i32 Label := this->SetLabel()

			this->Seal(Label)
			
			this->CompileBlock(Function->Body)
		;}
	}
	
	define void CompileFunctionOverloads(FunctionDefine* Function) {
		this->CompileFunction(Function)
		
		while (Function->Next) {
			Function := Function->Next
			
			this->CompileFunction(Function)
		}
	}
	
	define void CompileFunctionHashMap(HashMap* Map) {
		void* Elements := Map->Elements
		
		for (i32 ElementIndex := 0, ElementIndex < (Map->BufferMaxCount), ElementIndex += 1) {
			if (Elements[ElementIndex]) {
				HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
				
				while (FoundElement) {
					FunctionDefine* NextFunction := (FoundElement->Value) As FunctionDefine*
					
					this->CompileFunctionOverloads(NextFunction)
					
					FoundElement := FoundElement->NextElement
				}
			}
		}
	}
}