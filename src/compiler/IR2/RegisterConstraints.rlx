	define TACTriple* Joined(TACTriple* Triple) {
		if (Triple->Join = Triple) {
			return Triple
		}
		else {
			return this->Joined(Triple->Join)
		}
	}

	define i8 CouldJoinIntervals(TACInterval* Left, TACInterval* Right) {
		BitSet* Clone := Left~>Range->Clone()

		Clone->And(Right~>Range)
		i32 Count := Clone->Count()
		i32 Edge := Clone->Find()

		Clone->Free()
		Free(Clone)

		if (Left->Storage->HasValue()) {
			for (i32 Index := 0, Index < Count, Index++) {
				TACTriple* NextTriple := this->Triples->At(Index)
				TACInterval* Next := NextTriple->Interval()

				if (Next = Left || Next = Right) {
					continue
				}

				if (Next->Storage->Equals(Left->Storage)) {
					if (Next->Overlaps(Right)) {
						return false
					}
				}
			}

			return true
		}

		if (Count = 1) {
			if (Left->End() != Edge || Right->Start() != Edge) {
				return false
			}

			return true
		}
		else if (Count = 0) {
			return true
		}

		return false
	}

	define void TryJoin(TACTriple* RawLeft, TACTriple* RawRight) {
		TACTriple* Left := this->Joined(RawLeft)
		TACTriple* Right := this->Joined(RawRight)

		if (Left->Storage()->Equals(Right->Storage())) {
			return
		}

		if (this->CouldJoinIntervals(Left->Interval(), Right->Interval())) {
			Right->Interval()->Or(Left->Interval())
			;Left~>Interval->Free()
			RawLeft->Join := Right
		}
	}

	PointerArray* DeferredJoins ; <TACDeferredJoin>

	define void DeferJoin(TACTriple* Left, TACTriple* Right) {
		TACDeferredJoin* Join := Alloc(#TACDeferredJoin)

		Join->Left := Left
		Join->Right := Right

		this->DeferredJoins->Push(Join)
	}
	define void DoDeferredJoins() {
		i32 Count := this->DeferredJoins->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACDeferredJoin* Join := this->DeferredJoins->At(Index)

			this->TryJoin(Join->Left, Join->Right)
		}
	}
 
	define void Join(TACAddress Left, TACAddress Right) {
		this->DeferJoin(Left.TemporaryTriple, Right.TemporaryTriple)
	}
	
	define void TieOperandRegister(TACBlock* Block, TACTriple* Triple, TACAddress* Operand, i32 RegisterNumber) {
		TACAddress MoveAddress := this->Emit(Block, TAC_MOVE, *Operand)

		this->RemoveUseAt(Triple->Address(), *Operand)
		*Operand := MoveAddress

		TACTriple* Move := MoveAddress.TemporaryTriple

		Move->Interval()->Storage := TACPhysicalStorage:Register(RegisterNumber)

		i32 Index := Block~>Body->Find(Triple)

		Block~>Body->RemoveValue(Move)
		Block~>Body->Insert(Index, Move)

		this->DeferJoin(Move, Triple)
	}
	define void TieOperandRegister(TACAddress Address, i32 Operand, i32 RegisterNumber) {
		TACTriple* Triple := Address->TemporaryTriple
		TACBlock* Block := this->Blocks->At(Triple->BlockNumber)

		this->TieOperandRegister(Block, Triple, &Triple->Operands[Operand], RegisterNumber)
	}

	define void TieResultRegister(TACBlock* Block, TACTriple* Triple, i32 RegisterNumber) {
		TACAddress OldAddress := Triple->Address()
		
		TACAddress MoveAddress := this->Emit(Block, TAC_MOVE, OldAddress)
		TACTriple* Move := MoveAddress.TemporaryTriple

		Triple->Interval()->Storage := TACPhysicalStorage:Register(RegisterNumber)

		i32 Index := Block~>Body->Find(Triple)
		
		Block~>Body->RemoveValue(Move)
		Block~>Body->Insert(Index + 1, Move)

		this->ReplaceUses(Triple, OldAddress, MoveAddress)

		this->DeferJoin(Move, Triple)
	}
	define void TieResultRegister(TACAddress Address, i32 RegisterNumber) {
		TACTriple* Triple := Address->TemporaryTriple
		TACBlock* Block := this->Blocks->At(Triple->BlockNumber)

		this->TieResultRegister(Block, Triple, RegisterNumber)
	}

	define void ClobberRegister(TACAddress Address, i32 RegisterNumber) {
		TACTriple* Triple := Address->TemporaryTriple
		TACBlock* Block := this->Blocks->At(Triple->BlockNumber)

		TACAddress ClobberAddress := this->Emit(Block, TAC_CLOBBER, TAC_ADDRESS_NULL)
		TACTriple* Clobber := ClobberAddress.TemporaryTriple

		Clobber->Interval()->Storage := TACPhysicalStorage:Register(RegisterNumber)
		
		i32 Index := Block~>Body->Find(Triple)

		Block~>Body->RemoveValue(Clobber)
		Block~>Body->Insert(Index, Clobber)

		TACAddress ClosingClobberAddress := this->Emit(Block, TAC_CLOBBER, ClobberAddress)
		TACTriple* ClosingClobber := ClosingClobberAddress.TemporaryTriple

		Block~>Body->RemoveValue(ClosingClobber)
		Block~>Body->Insert(Index + 2, ClosingClobber)
	}

	define void SetupRegisterConstraints() {
		this->DeferredJoins := PointerArray:New()
	}