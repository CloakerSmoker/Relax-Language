	define TACTriple* Joined(TACTriple* Triple) {
		if (Triple->Join = Triple) {
			return Triple
		}
		else {
			return this->Joined(Triple->Join)
		}
	}

	define i8 CouldJoinIntervals(TACInterval* Left, TACInterval* Right) {
		BitSet* Clone := Left~>Range->Clone()

		Clone->And(Right~>Range)
		i32 Count := Clone->Count()
		i32 Edge := Clone->Find()

		Clone->Free()
		Free(Clone)

		if (Count = 1) {
			if (Left->End() != Edge || Right->Start() != Edge) {
				return false
			}

			return true
		}
		else if (Count = 0) {
			return true
		}

		return false
	}

	define void TryJoin(TACTriple* RawLeft, TACTriple* RawRight) {
		TACTriple* Left := this->Joined(RawLeft)
		TACTriple* Right := this->Joined(RawRight)

		if (Left->Interval()->RegisterNumber != Right->Interval()->RegisterNumber) {
			return
		}

		if (this->CouldJoinIntervals(Left->Interval(), Right->Interval())) {
			Right->Interval()->Or(Left->Interval())
			;Left~>Interval->Free()
			RawLeft->Join := Right
		}
	}
	define void Join(TACAddress Left, TACAddress Right) {
		this->TryJoin(Left.TemporaryTriple, Right.TemporaryTriple)
	}
	
	define void TieOperandRegister(TACBlock* InBlock, TACTriple* Triple, TACAddress* Operand, i32 RegisterNumber) {
		TACAddress MoveAddress := this->Emit(InBlock, TAC_MOVE, *Operand)

		this->RemoveUseAt(Triple->Address(), *Operand)
		*Operand := MoveAddress

		TACTriple* Move := MoveAddress.TemporaryTriple

		Move->Interval()->RegisterNumber := RegisterNumber

		i32 Index := InBlock~>Body->Find(Triple)

		InBlock~>Body->RemoveValue(Move)
		InBlock~>Body->Insert(Index, Move)

		this->TryJoin(Move, Triple)
	}
	define void TieOperandRegister(TACAddress Address, i32 Operand, i32 RegisterNumber) {
		TACTriple* Triple := Address->TemporaryTriple
		TACBlock* InBlock := this->Blocks->At(Triple->BlockNumber)

		this->TieOperandRegister(InBlock, Triple, &Triple->Operands[Operand], RegisterNumber)
	}

	define void TieResultRegister(TACBlock* InBlock, TACTriple* Triple, i32 RegisterNumber) {
		TACAddress OldAddress := Triple->Address()
		
		TACAddress MoveAddress := this->Emit(InBlock, TAC_MOVE, OldAddress)
		TACTriple* Move := MoveAddress.TemporaryTriple

		Triple->Interval()->RegisterNumber := RegisterNumber

		i32 Index := InBlock~>Body->Find(Triple)
		
		InBlock~>Body->RemoveValue(Move)
		InBlock~>Body->Insert(Index + 1, Move)

		this->ReplaceUses(Triple, OldAddress, MoveAddress)
	}
	define void TieResultRegister(TACAddress Address, i32 RegisterNumber) {
		TACTriple* Triple := Address->TemporaryTriple
		TACBlock* InBlock := this->Blocks->At(Triple->BlockNumber)

		this->TieResultRegister(InBlock, Triple, RegisterNumber)
	}

	define void ClobberRegister(TACAddress Address, i32 RegisterNumber) {
		TACTriple* Triple := Address->TemporaryTriple
		TACBlock* InBlock := this->Blocks->At(Triple->BlockNumber)

		TACAddress ClobberAddress := this->Emit(InBlock, TAC_CLOBBER, TAC_ADDRESS_NULL)
		TACTriple* Clobber := ClobberAddress.TemporaryTriple

		Clobber->Interval()->RegisterNumber := RegisterNumber
		
		i32 Index := InBlock~>Body->Find(Triple)

		InBlock~>Body->RemoveValue(Clobber)
		InBlock~>Body->Insert(Index, Clobber)

		TACAddress ClosingClobberAddress := this->Emit(InBlock, TAC_CLOBBER, ClobberAddress)
		TACTriple* ClosingClobber := ClosingClobberAddress.TemporaryTriple

		InBlock~>Body->RemoveValue(ClosingClobber)
		InBlock~>Body->Insert(Index + 2, ClosingClobber)
	}