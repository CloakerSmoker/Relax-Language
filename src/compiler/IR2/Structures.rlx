enum TACAddressKind As i8 {
	Variable,
	Temporary,
	Integer
}

enum TACAddressSize As i8 {
	Word,
	Long
}

struct TACVariable {
	VariableInfo* Base
	
	i32 Generation
	
	i64 LastValue
	
	static self* New(VariableInfo* Base) {
		self* this := Alloc(#self)
		
		this->Base := Base
		
		return this
	}
}

declare i32 GetTripleNumber(TACTriple*)
declare i32 GetTripleRegisterNumber(TACTriple*)

bits TACAddress As i64 {
	TACVariable* [0:47] Variable
	TACTriple* [0:47] TemporaryTriple

	i64* [0:47] IntegerPointer
	i64 [0:47] Integer

	void* [0:47] Value
	
	i32 [48:55] Web
	TACAddressKind [56:59] Kind
	TACAddressSize [60:63] Size
	
	define void Web(i32 WebNumber) {
		this->Web := WebNumber
	}
	define i32 Web() {
		return this->Web
	}
	
	static self WrapLong(TACAddressKind Kind, void* Value) {
		self this := 0 As self
		
		this->Kind := Kind
		this->Size := TACAddressSize:Long
		this->Value := Value
		
		return this
	}
	static self WrapLong(TACAddressKind Kind, i64 Value) {
		return self:WrapLong(Kind, Value As void*)
	}
	
	static self WrapWord(TACAddressKind Kind, void* Value) {
		self this := 0 As self
		
		this->Kind := Kind
		this->Size := TACAddressSize:Long
		this->Value := Value
		
		return this
	}
	static self WrapWord(TACAddressKind Kind, i64 Value) {
		return self:WrapWord(Kind, Value As void*)
	}
	
	static self Integer(i32 Value) {
		return self:WrapWord(TACAddressKind:Integer, Value As void*)
	}
	static self Integer(i64 Value) {
		return self:WrapLong(TACAddressKind:Integer, Value As void*)
	}

	static self Temporary(TACTriple* Triple) {
		return self:WrapLong(TACAddressKind:Temporary, Triple)
	}
	
	define i8 Is(TACAddressKind Kind) {
		return this->Kind = Kind
	}
	
	define i8 Equals(TACAddress Other) {
		if (this = 0 && Other = 0) {
			return true
		}
		else if (this = 0 || Other = 0) {
			return false
		}
		
		if (Other->Kind != this->Kind) {
			return false
		}
		
		if (Other->Value != this->Value) {
			return false
		}
		
		return true
	}
	
	define void Print(i8 ShowRegisterNumber) {
		if (this = 0) {
			return
		}

		if (this->Web) {
			Print("[%i]", this->Web)
		}
		
		if (this->Is(TACAddressKind:Integer)) {
			Print("%i", this->Integer)
		}
		else {
			if (this->Is(TACAddressKind:Variable)) {
				this->Variable->Base->Name->Print()
				
			}
			else if (this->Is(TACAddressKind:Temporary)) {
				i32 RegisterNumber := GetTripleRegisterNumber(this->TemporaryTriple)

				if (ShowRegisterNumber && RegisterNumber != -1) {
					Print("r%i", RegisterNumber)
				}
				else {
					Print("@%i", GetTripleNumber(this->TemporaryTriple))
				}
			}
		}
		
		if (this->Size = TACAddressSize:Word) {
			;Print("_w")
		}
		else {
			;Print("_l")
		}
	}
}

TACAddress TAC_ADDRESS_NULL := 0 As TACAddress

define void DoAddressPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	TACAddress Address := Parameters[*ParameterIndex] As TACAddress
	
	Address->Print(false)
	
	*ParameterIndex += 1
}

PrintFormatPrototype AddressPrintPrototype {
	Name: "a",
	Format: &DoAddressPrint
}

i32 ADDRESS_PRINT_PROTOTYPE_ID := AddPrintFormat(&AddressPrintPrototype)

define void DoOperandAddressPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	TACAddress Address := Parameters[*ParameterIndex] As TACAddress
	
	Address->Print(true)
	
	*ParameterIndex += 1
}

PrintFormatPrototype OperandAddressPrintPrototype {
	Name: "o",
	Format: &DoOperandAddressPrint
}

i32 OPERAND_ADDRESS_PRINT_PROTOTYPE_ID := AddPrintFormat(&OperandAddressPrintPrototype)

i32 TAC_MOVE := 0

i32 TAC_LOAD_INDIRECT_1 := 1
i32 TAC_LOAD_INDIRECT_2 := 2
i32 TAC_LOAD_INDIRECT_4 := 3
i32 TAC_LOAD_INDIRECT_8 := 4
i32 TAC_STORE_INDIRECT_1 := 5
i32 TAC_STORE_INDIRECT_2 := 6
i32 TAC_STORE_INDIRECT_4 := 7
i32 TAC_STORE_INDIRECT_8 := 8

i32 TAC_LOAD_ADDRESS := 9
i32 TAC_JUMP_TRUE := 10
i32 TAC_JUMP_FALSE := 11
i32 TAC_JUMP := 12

i32 TAC_RETURN := 13
i32 TAC_MOVE := 14
i32 TAC_PHI := 15
i32 TAC_CLOBBER := 16

i32 TAC_REMOVED := 17

i32 TAC_ALU_FIRST := 20

define i32 SizedOpcode(i32 Opcode, i32 Size) {
	if (Size = 8) {
		return Opcode + 3
	}
	else if (Size = 4) {
		return Opcode + 2
	}
	else if (Size = 2) {
		return Opcode + 1
	}
	else {
		return Opcode
	}
}

define i8* GetOperatorName(i32 Operator) {
	i8*[40] Operators {
		":=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=",
		"&&", "||",
		"eq", "neq", "lt", "lt_e", "gt", "gt_e",
		"as",
		"+", "-",
		"*", "/", "%",
		"&", "|", "^",
		"<<", ">>",
		"!", "~",
		"++", "--", "++", "--",
		"[",
		".", "->", "~>",
		":", "#"
	}
	
	return Operators[Operator]
}

define i8* GetOpcodeName(i32 Opcode) {
	i8*[17] Names {
		":=",
		"* As i8",
		"* As i16",
		"* As i32",
		"* As i64",
		"* As i8 :=",
		"* As i16 := ",
		"* As i32 :=",
		"* As i64 :=",
		"&",
		"jnz",
		"jez",
		"jmp",
		"return",
		"move",
		"phi",
		"clobber"
	}
	
	if (Opcode >= TAC_ALU_FIRST) {
		return GetOperatorName(Opcode - TAC_ALU_FIRST)
	}
	
	return Names[Opcode]
}

struct TACPhiDefinition {
	TACAddress Address
	i32 BlockNumber

	static self* New(i32 BlockNumber, TACAddress Address) {
		self* this := Alloc(#self)

		this->BlockNumber := BlockNumber
		this->Address := Address

		return this
	}
}

struct TACPhiInfo {
	i32 Web

	i8* Name
	i64 Hash

	PointerArray Definitions ; <TACAddress>

	static self* New(i8* Name, i64 Hash) {
		self* this := Alloc(#self)

		this->Name := Name
		this->Hash := Hash
		this~>Definitions->Initialize()

		return this
	}

	define void AddDefinition(i32 BlockNumber, TACAddress Address) {
		TACPhiDefinition* Definition := TACPhiDefinition:New(BlockNumber, Address)

		this~>Definitions->Push(Definition As void*)
	}

	define TACPhiDefinition* FindDefinition(i32 BlockNumber) {
		for (i32 Index := 0, Index < this~>Definitions->Count(), Index++) {
			TACPhiDefinition* Next := this~>Definitions->At(Index)

			if (Next->BlockNumber = BlockNumber) {
				return Next
			}
		}
		
		Throw('nophidef')

		return null
	}

	define void RemoveDefinition(i32 BlockNumber, TACAddress Address) {
		for (i32 Index := 0, Index < this~>Definitions->Count(), Index++) {
			TACPhiDefinition* Next := this~>Definitions->At(Index)

			if (Next->BlockNumber = BlockNumber && Next->Address->Equals(Address)) {
				this~>Definitions->Remove(Index)

				return
			}
		}
	}

	define i32 Count() {
		return this~>Definitions->Count()
	}
	define TACPhiDefinition* At(i32 Index) {
		return this~>Definitions->At(Index)
	}
}

bits TACLiveRange As i64 {
	i32 [0:31] Start
	i32 [32:63] End

	static self New(i32 Start, i32 End) {
		self Result

		Result.Start := Start
		Result.End := End

		return Result
	}

	define i8 IsAdjacent(TACLiveRange Other) {
		if (Other.End + 1 = this.Start) {
			return true
		}
		else if (this.End + 1 = Other.Start) {
			return true
		}

		return false
	}

	define i8 IsContaining(i32 Offset) {
		return this.Start <= Offset && Offset <= this.End
	}

	define self Merge(TACLiveRange Other) {
		if (Other.Start >= this.Start) {
			Other.Start := this.Start
		}

		if (Other.End <= this.End) {
			Other.End := this.End
		}

		return Other
	}

	define i8 IsOverlapping(TACLiveRange Other) {
		i32 Start := this.Start

		if (Other.Start <= Start) {
			Start := Other.Start
		}

		i32 End := this.End

		if (Other.End >= End) {
			End := Other.End
		}

		return this.Start <= Other.End && Other.Start <= this.End
	}
}

TACLiveRange TAC_RANGE_NULL := 0 As TACLiveRange

struct TACInterval {
	PointerArray Ranges ; <TACLiveRange>
	i32 RegisterNumber

	define void Initialize() {
		this~>Ranges->Initialize()
		this->RegisterNumber := -1
	}

	define void Add(TACLiveRange Range) {
		i32 RangeCount := this~>Ranges->Count()

		for (i32 Index := 0, Index < RangeCount, Index++) {
			TACLiveRange Next := this~>Ranges->At(Index) As TACLiveRange

			if (Next->IsAdjacent(Range)) {
				this~>Ranges->Set(Index, Next->Merge(Range) As void*)

				return
			}
		}

		this~>Ranges->Push(Range As void*)
	}

	define i8 IsOverlapping(TACLiveRange Other) {
		i32 RangeCount := this~>Ranges->Count()

		for (i32 Index := 0, Index < RangeCount, Index++) {
			TACLiveRange Next := this~>Ranges->At(Index) As TACLiveRange

			if (Next.IsOverlapping(Other)) {
				return true
			}
		}

		return false
	}

	define i8 IsOverlapping(TACInterval* Other) {
		i32 Count := this~>Ranges->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACLiveRange Next := this~>Ranges->At(Index) As TACLiveRange

			if (Other->IsOverlapping(Next)) {
				return true
			}
		}

		return false
	}

	define i32 Start() {
		i32 Result := 0x7FFF_FFFF
		i32 Count := this~>Ranges->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACLiveRange Next := this~>Ranges->At(Index) As TACLiveRange

			if (Next.Start <= Result) {
				Result := Next.Start
			}
		}

		return Result
	}
	define i32 End() {
		i32 Result := 0
		i32 Count := this~>Ranges->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACLiveRange Next := this~>Ranges->At(Index) As TACLiveRange

			if (Next.End >= Result) {
				Result := Next.End
			}
		}

		return Result
	}

	define void UnionWith(TACInterval* Other) {
		i32 Count := Other~>Ranges->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACLiveRange Next := this~>Ranges->At(Index) As TACLiveRange
			
			this->Add(Next)
		}
	}

	define void Free() {
		this~>Ranges->Free()
	}

	define i8 IsContaining(i32 Offset) {
		i32 Count := this~>Ranges->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACLiveRange Range := this~>Ranges->At(Index) As TACLiveRange

			if (Range.IsContaining(Offset)) {
				return true
			}
		}

		return false
	}

	define void Print(i32 Max) {
		;Print("├")

		i8 ContainedLast := false

		for (i32 Index := 0, Index <= Max, Index++) {
			if (this->IsContaining(Index)) {
				if (ContainedLast) {
					Print("┼─")
				}
				else {
					Print("├─")
				}
			}
			else if (ContainedLast) {
				Print("┤ ")
			}
			else {
				Print("│ ")
			}

			ContainedLast := this->IsContaining(Index)
		}

		if (this->RegisterNumber != -1) {
			Print(" = r%i", this->RegisterNumber)
		}
	}
}

struct TACTriple {
	i32 Opcode
	
	union {
		TACAddress[0] Operands
		TACAddress Left
		TACAddress Operand
		TACAddress Source
		TACPhiInfo* Phi
	}
	
	union {
		TACAddress Right
	}

	PointerArray Uses ; <TACAddress>
	TACInterval LiveInterval

	i32 Number
	i32 BlockNumber

	TACTriple* Join

	i32 RegisterNumber
	
	static self* New(i32 Opcode, TACAddress Left, TACAddress Right) {
		self* this := Alloc(#self)
		
		this->Opcode := Opcode
		this->Left := Left
		this->Right := Right

		this~>Uses->Initialize()
		this~>LiveInterval->Initialize()

		this->Join := this

		this->RegisterNumber := -1
		
		return this
	}
	
	static self* New(i32 Opcode, TACAddress Operand) {
		self* this := Alloc(#self)
		
		this->Opcode := Opcode
		this->Operand := Operand
		
		return this
	}

	define i8 Is(i32 Opcode) {
		return this->Opcode = Opcode
	}

	define TACInterval* Interval() {
		return this->Join~>LiveInterval
	}
	define void AddRange(TACLiveRange Range) {
		this~>LiveInterval->Add(Range)
	}

	define i32 OperandCount() {
		if (this->Is(TAC_PHI)) {
			return this->Phi~>Definitions->Count()
		}
		else {
			return 2
		}
	}

	define TACAddress OperandAt(i32 Index) {
		if (this->Is(TAC_PHI)) {
			TACPhiDefinition* Definition := this->Phi~>Definitions->At(Index)

			return Definition->Address
		}
		else {
			return this->Operands[Index]
		}
	}

	define TACAddress Address() {
		return TACAddress:Temporary(this)
	}

	define void Remove() {
		this->Opcode := TAC_REMOVED
	}

	define void Print() {
		if (this->Interval()->RegisterNumber != -1) {
			Print("r%i := ", this->Interval()->RegisterNumber)
		}

		if (this->Is(TAC_PHI)) {
			Print("phi(%s)\t", this->Phi->Name)

			if (this->Phi->Web) {
				Print("[%i]", this->Phi->Web)
			}

			for (i32 Index := 0, Index < this->Phi->Count(), Index++) {
				TACPhiDefinition* Next := this->Phi->At(Index)
				
				Print("\t%i: %a", Next->BlockNumber, Next->Address)

				if (Index + 1 != this->Phi->Count()) {
					Print(",")
				}
			}
		}
		else if (this->Right) {
			Print("%s\t%o,\t%o", GetOpcodeName(this->Opcode), this->Left, this->Right)
		}
		else {
			Print("%s\t%o", GetOpcodeName(this->Opcode), this->Left)
		}
	}
}

define i32 GetTripleNumber(TACTriple* Triple) {
	return Triple->Number
}

define i32 GetTripleRegisterNumber(TACTriple* Triple) {
	return Triple->Interval()->RegisterNumber
}

struct TACDefinition {
	i8* Name
	TACAddress Value
}

struct TACBlock {
	i32 Number
	i32 Fallthrough

	PointerArray Parents ; <TACBlock*>
	PointerArray Children ; <TACBlock*>

	PointerArray IncompletePhi ; <TACAddress>
	
	PointerArray Body ; <TACTriple*>

	AVLTree Definitions ; <i64, TACDefinition>

	PointerArray Live ; <TACTriple*>

	i32 PhiCount

	i32 First
	i32 Last

	i8 Renumbered
	i8 Sealed
	i8 Deleted

	define void Initialize(i32 Number) {
		this->Number := Number

		this~>Parents->Initialize()
		this~>Children->Initialize()

		this~>IncompletePhi->Initialize()
		this~>Body->Initialize()

		this~>Definitions->ValueSize := #TACDefinition
	}

	define void Push(TACTriple* Triple) {
		this~>Body->Push(Triple)
	}
	define i32 Count() {
		return this~>Body->Count()
	}
	define TACTriple* At(i32 Index) {
		if (Index < 0) {
			return this~>Body->At(this->Count() + Index)
		}

		return this~>Body->At(Index)
	}
	define TACTriple* Last() {
		return this~>Body->Last()
	}
	define TACTriple* Pop() {
		return this~>Body->Pop()
	}
	define void Remove(i32 Index) {
		this~>Body->Remove(Index)
	}

	define void Print() {
		Print("%i: ", this->Number, this->Sealed)

		i32 ParentCount := this~>Parents->Count()

		if (ParentCount) {
			Print("[parents: ")

			for (i32 Index := 0, Index < ParentCount, Index++) {
				TACBlock* Parent := this~>Parents->At(Index)

				Print("%i", Parent->Number)

				if (Index + 1 != ParentCount) {
					Print(", ")
				}
			}

			Print("] ")
		}

		i32 ChildCount := this~>Children->Count()

		if (ChildCount) {
			Print("(children: ")

			for (i32 Index := 0, Index < ChildCount, Index++) {
				TACBlock* Child := this~>Children->At(Index)

				Print("%i", Child->Number)

				if (Index + 1 != ChildCount) {
					Print(", ")
				}
			}

			Print(")")
		}

		Print("\n")

		i32 DefinitionCount := this~>Definitions->Count()

		for (i32 Index := 0, Index < DefinitionCount, Index++) {
			TACDefinition* Definition := this~>Definitions->ValueAt(Index)

			Print("\t%s: %a\n", Definition->Name, Definition->Value)
		}

		Print("\t====\n")

		for (i32 Index := 0, Index < this->Count(), Index++) {
			TACTriple* Next := this->At(Index)

			if (Next->Opcode = TAC_REMOVED) {
				continue
			}

			Print("\t%i:\t", Next->Number)
			Next->Print()
			Print("\n")
		}
	}

	define void PrintGraphViz(i8* Name) {
		i32 ChildCount := this~>Children->Count()

		if (ChildCount) {
			for (i32 Index := 0, Index < ChildCount, Index++) {
				TACBlock* Child := this~>Children->At(Index)

				Print("\t%s_%i -> %s_%i;\n", Name, this->Number, Name, Child->Number)
			}
		}

		Print("\t%s_%i [fontname=\"Courier\",shape=record,label=\"{%i: | - definitions -\\n", Name, this->Number, this->Number)

		i32 DefinitionCount := this~>Definitions->Count()

		for (i32 Index := 0, Index < DefinitionCount, Index++) {
			TACDefinition* Definition := this~>Definitions->ValueAt(Index)

			Print("\t%s: %a\\l", Definition->Name, Definition->Value)
		}

		Print(" | - uses -\\n")

		for (i32 Index := 0, Index < this->Count(), Index++) {
			TACTriple* Next := this->At(Index)

			if (Next->Opcode = TAC_REMOVED) {
				continue
			}

			i32 UseCount := Next~>Uses->Count()

			if (UseCount) {
				Print("%i:", Next->Number)

				for (i32 UseIndex := 0, UseIndex < UseCount, UseIndex++) {
					TACAddress NextUse := Next~>Uses->At(UseIndex) As TACAddress

					Print(" %a", NextUse)
				}

				Print("\\l")
			}
		}

		Print(" | ")

		for (i32 Index := 0, Index < this->Count(), Index++) {
			TACTriple* Next := this->At(Index)

			if (Next->Opcode = TAC_REMOVED) {
				continue
			}

			Print("\t%i:\t", Next->Number)
			Next->Print()
			Print("\\l")
		}

		Print("}\"];\n")
	}
}

bits RegisterSet As i64 {
	i64[0:63] Value

	static RegisterSet New(i32 MaxIndex) {
		i64 Value := (1 As i64) << ((MaxIndex + 1) As i8)

		Value -= 1

		return Value As RegisterSet
	}

	define i8 Has(i32 Index) {
		i64 Mask := (1 As i64) << (Index As i8)

		if (this.Value & Mask) {
			return true
		}
		else {
			return false
		}
	}

	define RegisterSet Remove(i32 Index) {
		i64 Mask := (1 As i64) << (Index As i8)

		return (this.Value ^ Mask) As RegisterSet
	}

	define RegisterSet Add(i32 Index) {
		i64 Mask := (1 As i64) << (Index As i8)

		return (this.Value | Mask) As RegisterSet
	}

	define i32 Count() {
		i32 Result := 0

		for (i32 Index := 0, Index < 64, Index++) {
			if (this->Has(Index)) {
				Result += 1
			}
		}

		return Result
	}

	define i32 First() {
		for (i32 Index := 0, Index < 64, Index++) {
			if (this->Has(Index)) {
				return Index
			}
		}

		return -1
	}
}