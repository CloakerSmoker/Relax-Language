#Require "$/Memory.rlx"
#Require "$/File.rlx"

#Require "$/String.rlx"
#Require "$/Console.rlx"
#Require "$/SafeString.rlx"
#Require "$/HashMap.rlx"
#Require "$/Debug.rlx"

enum TACAddressKind As i8 {
	Variable,
	Temporary,
	Integer
}

enum TACAddressSize As i8 {
	Word,
	Long
}

struct VariableInfo {
	i8* Name
}

struct TACVariable {
	VariableInfo* Base
	
	i32 Generation
	
	static self* New(VariableInfo* Base) {
		self* this := Alloc(#self)
		
		this->Base := Base
		
		return this
	}
}

bits TACAddress As i64 {
	TACVariable* [0:47] Variable
	i64* [0:47] IntegerPointer
	i64 [0:47] Integer
	i32 [0:31] TemporaryNumber
	void* [0:47] Value
	
	i32 [48:55] Generation
	TACAddressKind [56:59] Kind
	TACAddressSize [60:63] Size
	
	static self WrapLong(TACAddressKind Kind, void* Value) {
		self this := 0 As self
		
		this->Kind := Kind
		this->Size := TACAddressSize:Long
		this->Value := Value
		
		return this
	}
	static self WrapLong(TACAddressKind Kind, i64 Value) {
		return self:WrapLong(Kind, Value As void*)
	}
	
	static self WrapWord(TACAddressKind Kind, void* Value) {
		self this := 0 As self
		
		this->Kind := Kind
		this->Size := TACAddressSize:Long
		this->Value := Value
		
		return this
	}
	static self WrapWord(TACAddressKind Kind, i64 Value) {
		return self:WrapWord(Kind, Value As void*)
	}
	
	static self Integer(i32 Value) {
		return self:WrapWord(TACAddressKind:Integer, Value As void*)
	}
	static self Integer(i64 Value) {
		return self:WrapLong(TACAddressKind:Integer, Value As void*)
	}
	
	define i8 Is(TACAddressKind Kind) {
		return this->Kind = Kind
	}
	
	define i8 Equals(TACAddress Other) {
		if (this = 0 && Other = 0) {
			return true
		}
		else if (this = 0 || Other = 0) {
			return false
		}
		
		if (Other->Kind != this->Kind) {
			return false
		}
		
		if (Other->Value != this->Value) {
			return false
		}
		
		if (Other->Generation != this->Generation) {
			return false
		}
		
		return true
	}
	
	define void Print() {
		if (this = 0) {
			return
		}
		
		if (this->Is(TACAddressKind:Integer)) {
			Print("%i", this->Integer)
		}
		else {
			if (this->Is(TACAddressKind:Variable)) {
				Print("%s", this->Variable->Base->Name)
				
				Print("_%i", this->Generation)
			}
			else if (this->Is(TACAddressKind:Temporary)) {
				Print("(%i)", this->TemporaryNumber)
			}
		}
		
		if (this->Size = TACAddressSize:Word) {
			Print("_w")
		}
		else {
			Print("_l")
		}
	}
}

define void DoAddressPrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	TACAddress Address := Parameters[*ParameterIndex] As TACAddress
	
	Address->Print()
	
	*ParameterIndex += 1
}

PrintFormatPrototype AddressPrintPrototype {
	Name: "a",
	Format: &DoAddressPrint
}

i32 ADDRESS_PRINT_PROTOTYPE_ID := AddPrintFormat(&AddressPrintPrototype)

i32 TAC_MOVE := 0

i32 TAC_LOAD_INDIRECT_1 := 1
i32 TAC_LOAD_INDIRECT_2 := 2
i32 TAC_LOAD_INDIRECT_4 := 3
i32 TAC_LOAD_INDIRECT_8 := 4
i32 TAC_STORE_INDIRECT_1 := 5
i32 TAC_STORE_INDIRECT_2 := 6
i32 TAC_STORE_INDIRECT_4 := 7
i32 TAC_STORE_INDIRECT_8 := 8

i32 TAC_LOAD_ADDRESS := 9

i32 TAC_ALU_FIRST := 20

define i8* GetOperatorName(i32 Operator) {
	i8*[40] Operators {
		":=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=",
		"&&", "||",
		"=", "!=", "<", "<=", ">", ">=",
		"as",
		"+", "-",
		"*", "/", "%",
		"&", "|", "^",
		"<<", ">>",
		"!", "~",
		"++", "--", "++", "--",
		"[",
		".", "->", "~>",
		":", "#"
	}
	
	return Operators[Operator]
}

define i8* GetOpcodeName(i32 Opcode) {
	i8*[10] Names {
		":=",
		"* As i8",
		"* As i16",
		"* As i32",
		"* As i64",
		"* As i8 :=",
		"* As i16 := ",
		"* As i32 :=",
		"* As i64 :=",
		"&"
	}
	
	if (Opcode >= TAC_ALU_FIRST) {
		return GetOperatorName(Opcode - TAC_ALU_FIRST)
	}
	
	return Names[Opcode]
}

struct TACTriple {
	i32 Opcode
	
	union {
		TACAddress Left
		TACAddress Operand
		TACAddress Source
	}
	
	union {
		TACAddress Right
	}
	
	static self* New(i32 Opcode, TACAddress Left, TACAddress Right) {
		self* this := Alloc(#self)
		
		this->Opcode := Opcode
		this->Left := Left
		this->Right := Right
		
		return this
	}
	
	static self* New(i32 Opcode, TACAddress Operand) {
		self* this := Alloc(#self)
		
		this->Opcode := Opcode
		this->Operand := Operand
		
		return this
	}
	
	define void Print() {
		Print("(%s, %a, %a)", GetOpcodeName(this->Opcode), this->Left, this->Right)
	}
}

struct TACBuilder {
	
	union {
		void* Buffer
		TACTriple** Triples
	}
	
	i32 Length
	
	define i32 FindOrAddTriple(i32 Opcode, TACAddress Left, TACAddress Right) {
		for (i32 Index := 0, Index < this->Length, Index++) {
			TACTriple* Next := this->Triples[Index]
			
			if (Next->Opcode = Opcode) {
				if (Next->Left->Equals(Left) && Next->Right->Equals(Right)) {
					return Index
				}
			}
		}
		
		i32 Result := this->Length++
		
		this->Triples[Result] := TACTriple:New(Opcode, Left, Right)
		
		return Result
	}
}

define void Main() {
	TACAddress L := TACAddress:WrapLong(TACAddressKind:Integer, 123)
	TACAddress R := TACAddress:WrapWord(TACAddressKind:Temporary, 321)
	
	TACTriple* F := TACTriple:New(TAC_LOAD_INDIRECT_1, L, R)
	
	F->Print()
}