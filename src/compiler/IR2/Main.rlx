#Require "$/Memory.rlx"
#Require "$/File.rlx"

#Require "$/String.rlx"
#Require "$/Console.rlx"
#Require "$/SafeString.rlx"
#Require "$/HashMap.rlx"
#Require "$/Debug.rlx"
#Require "$/MemoryDebug.rlx"

#Require "$/AVLTree.rlx"

#Require "./src/compiler/Utility.rlx"
#Require "./src/compiler/Lexer.rlx"
#Require "./src/compiler/Parser.rlx"
#Require "./src/compiler/ErrorReporting.rlx"

#Require "./src/compiler/IR2/Structures.rlx"

struct TACBuilder {
	TACBlock* CurrentBlock
	
	PointerArray* Triples ; <TACTriple*>
	PointerArray* Blocks ; <TACBlock*>

	define TACTriple* GetTemporary(TACAddress Value) {
		return Value.TemporaryTriple
	}

	define void UseAt(TACAddress Where, TACAddress Value) {
		if (Value->Is(TACAddressKind:Temporary)) {
			;Print("use %a at %a\n", Value, Where)

			TACTriple* Definer := Value.TemporaryTriple

			Definer~>Uses->Push(Where As void*)
		}
	}
	define void RemoveUseAt(TACAddress Where, TACAddress Value) {
		if (Value->Is(TACAddressKind:Temporary)) {
			TACTriple* Definer := this->GetTemporary(Value)

			Definer~>Uses->RemoveValue(Where As void*)
		}
	}
	
	define TACAddress Emit(TACBlock* Block, i32 Opcode, TACAddress Left, TACAddress Right) {
		if (Opcode = TAC_JUMP) {
			TACBlock* Destination := this->Blocks->At(Left.Integer As i32)

			Block->Fallthrough := Destination->Number

			Block~>Children->Add(Destination)
			Destination~>Parents->Add(Block)

			return TAC_ADDRESS_NULL
		}
		else if (Opcode = TAC_MOVE && Left.Is(TACAddressKind:Temporary)) {
			TACTriple* LeftTriple := Left.TemporaryTriple

			if (LeftTriple->Is(TAC_MOVE)) {
				return Left
			}
		}

		TACTriple* New := TACTriple:New(Opcode, Left, Right)

		if (Opcode = TAC_PHI) {
			Block~>Body->Insert(0, New)
			Block->PhiCount += 1
		}
		else {
			Block->Push(New)
		}

		New->BlockNumber := Block->Number
		New->Number := this->Triples->Count()

		this->Triples->Push(New)
		
		TACAddress Result := TACAddress:Temporary(New)
		
		if (Opcode = TAC_JUMP_TRUE || Opcode = TAC_JUMP_FALSE) {
			TACBlock* Destination := null

			if (Opcode = TAC_JUMP) {
				Destination := this->Blocks->At(Left.Integer As i32)
			}
			else {
				this->UseAt(Result, Left)

				Destination := this->Blocks->At(Right.Integer As i32)
			}

			Block~>Children->Add(Destination)
			Destination~>Parents->Add(Block)
		}
		else {
			if (Left != TAC_ADDRESS_NULL) {
				this->UseAt(Result, Left)
			}

			if (Right != TAC_ADDRESS_NULL) {
				this->UseAt(Result, Right)
			}
		}
		
		return Result
	}

	define TACAddress Emit(i32 Opcode, TACAddress Left, TACAddress Right) {
		return this->Emit(this->CurrentBlock, Opcode, Left, Right)
	}

	define TACAddress Emit(TACBlock* Block, i32 Opcode, TACAddress Operand) {
		return this->Emit(Block, Opcode, Operand, TAC_ADDRESS_NULL)
	}

	define TACAddress Emit(i32 Opcode, TACAddress Operand) {
		return this->Emit(Opcode, Operand, TAC_ADDRESS_NULL)
	}

	define void Remove(TACAddress TemporaryAddress) {
		this->GetTemporary(TemporaryAddress)->Remove()
	}
	
	define void EndBlock() {
		if (this->CurrentBlock) {
			this->CurrentBlock := null
		}
	}
	
	define i32 StartBlock(i32 Index) {
		this->EndBlock()
		
		this->CurrentBlock := this->Blocks->Get(Index)
		
		return Index
	}
	
	define i32 ReserveLabel() {
		i32 Result := this->Blocks->Count()

		TACBlock* New := Alloc(#TACBlock)
		
		New->Initialize(this->Blocks->Count())
		this->Blocks->Push(New)
		
		return Result
	}
	
	define i32 SetLabel() {
		return this->StartBlock(this->ReserveLabel())
	}
	define i32 SetLabel(i32 Number) {
		return this->StartBlock(Number)
	}
	
	define void Print() {
		for (i32 BlockIndex := 0, BlockIndex < this->Blocks->Count(), BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)

			Block->Print()
		}
	}
	define void PrintGraphViz(i8* Name, i8* Description) {
		Print("subgraph cluster_%i {\n", FNV1A(Name) & 0x7FFF_FFFF)
		Print("\tstyle=filled;\n")
		Print("\tcolor=lightgrey;\n")
		Print("\tlabel=\"%s:\n%s\";\n", Name, Description)

		for (i32 BlockIndex := 0, BlockIndex < this->Blocks->Count(), BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)
			
			Block->PrintGraphViz(Name)
		}

		Print("}\n")
	}

	define TACTriple* FindInstruction(i32 Number) {
		i32 Count := this->Triples->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TACTriple* Next := this->Triples->At(Index)

			if (Next->Number = Number) {
				return Next
			}
		}

		return null
	}

	#Require "./src/compiler/IR2/SSA.rlx"
	#Require "./src/compiler/IR2/FlowOptimizations.rlx"

	#Require "./src/compiler/IR2/RegisterConstraints.rlx"
	
	#Require "./src/compiler/IR2/InstructionSelection.rlx"

	#Require "./src/compiler/IR2/RegisterAllocation.rlx"

	static TACBuilder* New() {
		self* this := Alloc(#self)
		
		this->Triples := PointerArray:New()
		this->Blocks := PointerArray:New()

		this->SetupRegisterConstraints()
		
		return this
	}
}

bits LoopLables As i64 {
	[0:31] BreakLabel
	[32:63] ContinueLabel
}

#Require "./src/compiler/IR2/TACFromAST.rlx"

#Require "./src/compiler/IR2/X64InstructionSelector.rlx"

define void Main(i64 ArgC, i8** ArgV) {
	GetArgs(&ArgC, &ArgV)
	
	if (ArgC != 2) {
		Print("No input file\n")
		Exit(1)
	}
	
	BuildConfig* Config := Alloc(#BuildConfig)
	
	Config->DumpInfo := 0
	Config->LineEnding := LINE_ENDING_DEFAULT
	Config->OutputFormat := OUTPUT_ELF
	
	i8* InputFilePath := ArgV[1]
	
	i32 SourceLength := 0
	i8* Source := OpenAndRead(InputFilePath, &SourceLength)
	
	LexerState* Lexer := LexerState:New(Config, Source, SourceLength, AToS(InputFilePath))
	Config->Lexer := Lexer
	
	ParserState* Parser := ParserState:New(Config, Lexer)
	
	TACFromAST* TFA := TACFromAST:New()
	
	Parser->ParseProgram()
	
	TFA->CompileFunctionHashMap(Parser~>Functions)

	;TFA->Builder->Print()
	
	;/*
	Print("digraph CFG {\n")
	TFA->Builder->PrintGraphViz("original", "Unoptimized SSA")
	;TFA->Builder->RemoveExtraJumps()
	;TFA->Builder->PrintGraphViz("opt1", "SSA with jumps cleaned")
	TFA->Builder->GenerateMoves()
	TFA->Builder->PrintGraphViz("mov", "Moves added")

	TFA->Builder->SelectInstruction := &X64SelectInstruction
	TFA->Builder->SelectInstructions()

	TFA->Builder->RenumberInstructions()
	TFA->Builder->PrintGraphViz("reg0", "Registers tied")
	;TFA->Builder->PrintGraphViz("ren", "Instructions renumbered")
	TFA->Builder->BuildIntervals()
	TFA->Builder->DoDeferredJoins()
	TFA->Builder->LinearScan()
	;TFA->Builder->PrintGraphViz("reg1", "Registers allocated")
	TFA->Builder->LinearScanCleanup()
	TFA->Builder->PrintGraphViz("reg2", "Register allocation helpers cleanup")
	Print("}\n")

	TFA->Builder->PrintLiveIntervals()

	X64Generator* Gen := X64GenerateCode(TFA->Builder->Blocks->At(0))

	for (i32 Index := 0, Index < Gen->CodeBufferIndex, Index++) {
		Print("%B ", Gen->CodeBufferBytes[Index])
	}

	Print("\n")

	;*/
}


/*

function highlight(e, color) {
	let bbox = e.getBBox();
	
	let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect.setAttribute("x", bbox.x);
    rect.setAttribute("y", bbox.y);
    rect.setAttribute("width", bbox.width);
    rect.setAttribute("height", bbox.height);
    rect.setAttribute("fill", color);
    e.parentElement.before(rect);
	
	return rect;
}

function unhighlight_all(selector) {
	document.querySelectorAll(selector).forEach(e => {
		if (e.highlight) {
			e.highlight.remove();
		}
	})
}

const cyrb53 = function(str, seed = 0) {
    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
    for (let i = 0, ch; i < str.length; i++) {
        ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 = Math.imul(h1 ^ (h1>>>16), 2246822507) ^ Math.imul(h2 ^ (h2>>>13), 3266489909);
    h2 = Math.imul(h2 ^ (h2>>>16), 2246822507) ^ Math.imul(h1 ^ (h1>>>13), 3266489909);
    return 4294967296 * (2097151 & h2) + (h1>>>0);
};

var stringToColour = function(str) {
	var hash = cyrb53(str);
	var colour = '#';
	for (var i = 0; i < 3; i++) {
		var value = (hash >> (i * 8)) & 0xFF;
		colour += ('00' + value.toString(16)).substr(-2);
	}
	return colour;
}

function highlight_all(selector) {
	document.querySelectorAll(selector).forEach(e => {
		if (e.highlight) {
			e.highlight.remove();
		}
	
		e.highlight = highlight(e, stringToColour(selector))
	})
}

let all_selectors = {};

function highlight_hover(e, selector) {
	all_selectors[selector] = true;

	e.onmouseenter = function() {
		highlight_all(selector);
	};
	e.onmouseleave = function() {
		unhighlight_all(selector);
	};
}

function highlight_hover_all(selector) {
	document.querySelectorAll(selector).forEach(e => {
		highlight_hover(e, selector);
	})
}

function text_to_spans(e) {
	let text = e.textContent;
	e.textContent = '';

	text.split(' ').forEach(s => {
		e.appendChild(document.createTextNode(' '))

		let tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
		tspan.textContent = s;
		e.appendChild(tspan);
	});
}

function classify(e) {
	let text = e.textContent.trim();
	let match;

	if (match = text.match(/(\d+):/)) {
		let cls = 't' + match[1]

		e.classList.add(cls);
		highlight_hover(e, '.' + cls);
	}
	else if (match = text.match(/(\w+):/)) {
		let cls = 'v' + match[1]

		e.classList.add(cls);
		highlight_hover(e, '.' + cls);
	}
	else if (match = text.match(/@(\d+)/)) {
		let cls = 't' + match[1]

		e.classList.add(cls);
		highlight_hover(e, '.' + cls);
	}
	else if (match = text.match(/r(\d+)/)) {
		let cls = 'r' + match[1]

		e.classList.add(cls);
		highlight_hover(e, '.' + cls);
	}
}

function replace(e) {
	text_to_spans(e);
	
	e.childNodes.forEach(e => {
		classify(e);
	});
}

function doit(e) {
	let title = true;
	let defs = false;
	let defs_body = false;
	let uses = false;
	let uses_body = false;
	let body = false;

	e.childNodes.forEach(c => {
		if (c.tagName == "text") {
			let anchor = c.getAttribute('text-anchor');

			if (anchor != 'middle') {
				replace(c);
			}
		}
	})
}

document.querySelectorAll('.node').forEach(doit);

keys(all_selectors).forEach(s => highlight_all(s));

*/