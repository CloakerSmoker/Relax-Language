	define void GenerateMoves() {
		i32 BlockCount := this->Blocks->Count()

		for (i32 BlockIndex := 0, BlockIndex < BlockCount, BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)

			i32 ParentCount := Block~>Parents->Count()

			for (i32 Index := 0, Index < ParentCount, Index++) {
				TACBlock* Parent := Block~>Parents->At(Index)

				i32 ParentChildCount := Parent~>Children~>Count()

				TACBlock* MoveContainer := Parent

				if (ParentCount > 1 && ParentChildCount > 1) {
					i32 NewBlockID := this->ReserveLabel()

					TACBlock* NewBlock := this->Blocks->At(NewBlockID)

					Parent~>Children->RemoveValue(Block)
					Block~>Parents->RemoveValue(Parent)

					Parent~>Children->Push(NewBlock)
					NewBlock~>Parents->Push(Parent)

					NewBlock~>Children->Push(Block)
					Block~>Parents->Push(NewBlock)

					MoveContainer := NewBlock
				}

				for (i32 PhiIndex := 0, PhiIndex < Block->PhiCount, PhiIndex++) {
					TACTriple* Triple := Block->At(PhiIndex)
					TACPhiInfo* Phi := Triple->Phi

					TACPhiDefinition* Definition := Phi->FindDefinition(Parent->Number)

					TACAddress MoveAddress := this->Emit(MoveContainer, TAC_MOVE, Definition->Address)

					this->RemoveUseAt(Triple->Address(), Definition->Address)
					this->UseAt(Triple->Address(), MoveAddress)
					Definition->Address := MoveAddress

					this->TryJoin(MoveAddress->TemporaryTriple, Triple)
				}
			}
		}
	}

	i32 NextInstructionNumber

	define void RenumberInstructions(TACBlock* Block) {
		if (Block->Renumbered) {
			return
		}

		Block->Renumbered := true

		i32 ParentCount := Block~>Parents->Count()

		for (i32 Index := 0, Index < ParentCount, Index++) {
			this->RenumberInstructions(Block~>Parents->At(Index))
		}

		Block->First := this->NextInstructionNumber

		i32 Count := Block->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			Block->At(Index)->Number := this->NextInstructionNumber++
		}

		Block->Last := this->NextInstructionNumber - 1
	}

	define void RenumberInstructions() {
		i32 BlockCount := this->Blocks->Count()

		for (i32 BlockIndex := 0, BlockIndex < BlockCount, BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)

			this->RenumberInstructions(Block)
		}
	}
	
	define void TryJoinMoves() {
		; NOT USED
		; We copy every left operand before use for x86 since it stores
		;  the result in the left operand.
		; However, for the last use of any given temporary, we can
		;  skip this and just clobber the old value.
		; The problem is that the `copy := move value; res := op copy`
		;  sequence can't be rewritten very easily.
		; The obvious solution is joining `copy` and `value` so the move
		;  is redundant and gets removed, but this doesn't work since
		;   ???? this code sucks ????
		; Yeah I'm out of ideas, fuck this 

		i32 BlockCount := this->Blocks->Count()

		for (i32 BlockIndex := 0, BlockIndex < BlockCount, BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)

			i32 Count := Block->Count()

			for (i32 Index := 0, Index < Count, Index++) {
				TACTriple* Next := Block->At(Index)

				if (Next->Is(TAC_MOVE)) {
					TACAddress MoveFrom := Next->Left

					if (MoveFrom.Is(TACAddressKind:Temporary)) {
						this->TryJoin(Next, MoveFrom.TemporaryTriple)

						this->ReplaceUses(Next, Next->Address(), MoveFrom)
					}
				}
			}
		}
	}

	define void AddRange(TACBlock* Block, TACTriple* Definition, i32 End) {
		TACLiveRange Range := TAC_RANGE_NULL

		if (Block->First <= Definition->Number && Definition->Number <= Block->Last) {
			Range := TACLiveRange:New(Definition->Number, End)
		}
		else {
			Range := TACLiveRange:New(Block->First + Block->PhiCount, End)
		}

		Definition->AddRange(Range)
	}

	define void BuildIntervals() {
		i32 BlockCount := this->Blocks->Count()

		for (i32 BlockIndex := 0, BlockIndex < BlockCount, BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)

			i32 PhiCount := Block->PhiCount
			i32 ChildCount := Block~>Children->Count()

			BitSet* Live := Block~>Live

			for (i32 ChildIndex := 0, ChildIndex < ChildCount, ChildIndex++) {
				TACBlock* Child := Block~>Children->At(ChildIndex)

				Live->Or(Child~>Live)

				for (i32 ChildPhiIndex := 0, ChildPhiIndex < Child->PhiCount, ChildPhiIndex++) {
					TACTriple* ChildPhi := Child->At(ChildPhiIndex)
					
					Live->Clear(ChildPhi->Number)

					TACPhiDefinition* ChildPhiParent := ChildPhi->Phi->FindDefinition(Block->Number)

					if (ChildPhiParent && ChildPhiParent->Address.Is(TACAddressKind:Temporary)) {
						Live->Clear(ChildPhiParent->Address.TemporaryTriple->Number)
					}
				}
			}

			for (i32 Index := 0, Index < Live->Count(), Index++) {
				i32 Location := Live->Find(Index)

				TACTriple* Next := this->FindInstruction(Location)

				this->AddRange(Block, Next, Block->Last + 1)
			}

			for (i32 Index := Block->Count() - 1, Index >= PhiCount, Index--) {
				TACTriple* Next := Block->At(Index)
				Live->Clear(Next->Number)

				for (i32 OperandIndex := 0, OperandIndex < Next->OperandCount(), OperandIndex++) {
					TACAddress OperandAddress := Next->OperandAt(OperandIndex)

					if (OperandAddress->Is(TACAddressKind:Temporary)) {
						TACTriple* Operand := OperandAddress.TemporaryTriple

						if !(Live->Get(Operand->Number)) {
							Live->Set(Operand->Number)
							this->AddRange(Block, Operand, Next->Number)
						}
					}
				}
			}

			;Live->Free()
			;Free(Live)
		}
	}

	define void Gauge(i32 Offset, i32 Scale) {
		Print("    \t")

		i32 Triples := this->Triples->Count()

		i32 Width := (Scale * 2) + 2

		for (i32 Index := 0, Index < Offset, Index++) {
			Print("  ")
		}

		for (i32 Outer := Offset, Outer <= Triples, Outer += Scale) {
			i8[40] Buffer
			i32 Length := FormatString(Buffer, 40, "│%i", Outer)
			Buffer[Length] := 0

			Print("%s", Buffer)

			for (i32 Index := Length, Index < Width, Index++) {
				Print(" ")
			}
		}

		Print("\n")
	}

	define void PrintLiveIntervals() {
		i32 Blocks := this->Blocks->Count()

		for (i32 Inner := 0, Inner < Blocks, Inner++) {
			TACBlock* NextBlock := this->Blocks->At(Inner)

			Print("%i: %i-%i\n", NextBlock->Number, NextBlock->First, NextBlock->Last)
		}

		Print("    \t")
		i32 Triples := this->Triples->Count()

		for (i32 Outer := 0, Outer < Triples, Outer++) {
			TACBlock* Last := null

			for (i32 Inner := 0, Inner < Blocks, Inner++) {
				TACBlock* NextBlock := this->Blocks->At(Inner)

				if (NextBlock->First = Outer) {
					Last := NextBlock
				}
			}

			if !(Last) {
				Print("  ")
				continue
			}

			i8[40] Buffer
			i32 Length := FormatString(Buffer, 40, "│ Block %i", Last->Number)
			Buffer[Length] := 0

			Print("%s", Buffer)

			i32 Size := (Last->Last - Last->First) + 2
			i32 Slots := Size * 2

			i32 Gap := Slots - Length

			for (i32 Index := 0, Index < Gap, Index++) {
				Print(" ")
			}

			Outer := Last->Last
		}

		Print("\n")

		for (i32 Index := 0, Index < this->NextInstructionNumber, Index++) {
			TACTriple* Next := this->FindInstruction(Index)

			;Print("%i: ", Next->Number)
			;Next~>Interval->Print(this->Triples->Count())
			;Print("\n")

			Print("%i: ", Next->Number)
			Next->Interval()->Print(this->Triples->Count())
			Print("\n")
		}

		this->Gauge(2, 3)
		this->Gauge(1, 3)
		this->Gauge(0, 3)
	}

	define void LinearScan() {
		PointerArray* Handled := PointerArray:New() ; <TACInterval*>
		PointerArray* Unhandled := PointerArray:New() ; <TACInterval*>
		PointerArray* Active := PointerArray:New() ; <TACInterval*>
		PointerArray* Inactive := PointerArray:New() ; <TACInterval*>

		i32 RegisterCount := 3
		i32 NextMemorySlot := 8000

		BitSet* Free := BitSet:New()

		for (i32 Index := 0, Index < 16, Index++) {
			Free->Set(Index)
		}

		Free->Clear(4)
		Free->Clear(5)
		Free->Clear(3)

		i32* RegisterWeights := Alloc(RegisterCount * 4)

		i32 Count := this->Triples->Count()

		for (i32 OuterIndex := 0, OuterIndex < Count, OuterIndex++) {
			for (i32 InnerIndex := 0, InnerIndex < Count, InnerIndex++) {
				TACTriple* Triple := this->Triples->At(InnerIndex)
				
				TACInterval* Interval := Triple->Interval()

				if (Unhandled->Has(Interval)) {
					continue
				}

				if (Interval->Contains(OuterIndex)) {
					Unhandled->Push(Interval)
				}
			}
		}

		/*
		for (i32 Index := 0, Index < Unhandled->Count(), Index++) {
			Print("Unhandled [%i] = ", Index)
			TACInterval* Next := Unhandled->At(Index)
			Next->Print(this->Triples->Count())
			Print("\n")
		}
		;*/

		i32 idex := -1

		while (Unhandled->Count() != 0) {
			idex += 1

			Print("Iter %i\n", idex)

			TACInterval* Current := Unhandled->Remove(0)

			for (i32 Index := 0, Index < Active->Count(), Index++) {
				TACInterval* ActiveInterval := Active->At(Index)
				
				if (ActiveInterval->End() < Current->Start()) {
					Active->Remove(Index)
					Handled->Push(ActiveInterval)

					Print("Active->Free(%i)\n", ActiveInterval->RegisterNumber())

					Free->Set(ActiveInterval->RegisterNumber())
				}
				else if !(ActiveInterval->Contains(Current->Start())) {
					Active->Remove(Index)
					Inactive->Push(ActiveInterval)

					Print("Active->Free(%i)\n", ActiveInterval->RegisterNumber())

					Free->Set(ActiveInterval->RegisterNumber())
				}
			}

			for (i32 Index := 0, Index < Inactive->Count(), Index++) {
				TACInterval* InactiveInterval := Inactive->At(Index)
				
				if (InactiveInterval->End() < Current->Start()) {
					Inactive->Remove(Index)
					Handled->Push(InactiveInterval)

					Print("Inactive->Free(%i)\n", InactiveInterval->RegisterNumber())
				}
				else if (InactiveInterval->Contains(Current->Start())) {
					Inactive->Remove(Index)
					Active->Push(InactiveInterval)

					Print("Inactive->Free(%i)\n", InactiveInterval->RegisterNumber())

					Free->Clear(InactiveInterval->RegisterNumber())
				}
			}

			BitSet* Potential := Free->Clone()

			for (i32 Index := 0, Index < Inactive->Count(), Index++) {
				TACInterval* InactiveInterval := Inactive->At(Index)

				if (InactiveInterval->Overlaps(Current)) {
					Potential->Clear(InactiveInterval->RegisterNumber())
				}
			}
			
			for (i32 Index := 0, Index < Unhandled->Count(), Index++) {
				TACInterval* UnhandledInterval := Unhandled->At(Index)

				if (UnhandledInterval->Storage->Is(TAC_PHYSICAL_STORAGE_KIND_REGISTER) && UnhandledInterval->Overlaps(Current)) {
					Potential->Clear(UnhandledInterval->RegisterNumber())
				}
			}

			if (Potential->Count() = 0) {
				for (i32 Index := 0, Index < RegisterCount, Index++) {
					RegisterWeights[Index] := 0
				}

				for (i32 Index := 0, Index < Active->Count(), Index++) {
					TACInterval* Next := Active->At(Index)
					
					if (Next->Overlaps(Current)) {
						RegisterWeights[Next->RegisterNumber()] += Next->Weight
					}
				}

				for (i32 Index := 0, Index < Inactive->Count(), Index++) {
					TACInterval* Next := Inactive->At(Index)

					if (Next->Overlaps(Current)) {
						RegisterWeights[Next->RegisterNumber()] += Next->Weight
					}
				}

				for (i32 Index := 0, Index < Unhandled->Count(), Index++) {
					TACInterval* UnhandledInterval := Unhandled->At(Index)

					if (UnhandledInterval->Storage->Is(TAC_PHYSICAL_STORAGE_KIND_REGISTER) && UnhandledInterval->Overlaps(Current)) {
						RegisterWeights[Next->RegisterNumber()] += Next->Weight
					}
				}

				i32 Best := -1
				i32 BestWeight := 0x7FFF_FFFF

				for (i32 Index := 0, Index < RegisterCount, Index++) {
					if (RegisterWeights[Index] < BestWeight) {
						Best := Index
						BestWeight := RegisterWeights[Index]
					}
				}

				if (Best != -1 && Current->Weight < BestWeight) {
					Current->Storage := TACPhysicalStorage:Memory(NextMemorySlot++)
					
					Handled->Push(Current)
				}
				else {
					for (i32 Index := Active->Count() - 1, Index >= 0, Index--) {
						TACInterval* Next := Active->At(Index)
						
						if (Next->RegisterNumber() = Best) {
							Next->Storage := TACPhysicalStorage:Memory(NextMemorySlot++)
							
							Active->Remove(Index)
							Handled->Push(Next)
						}
					}

					for (i32 Index := Inactive->Count() - 1, Index >= 0, Index--) {
						TACInterval* Next := Inactive->At(Index)

						if (Next->RegisterNumber() = Best) {
							Next->Storage := TACPhysicalStorage:Memory(NextMemorySlot++)

							Inactive->Remove(Index)
							Handled->Push(Next)
						}
					}

					Current->Storage := TACPhysicalStorage:Register(Best)
					Active->Push(Current)
				}
			}
			else {
				if !(Current->RegisterNumber()) {
					Current->Storage := TACPhysicalStorage:Register(Potential->First())
				}
				
				Free->Clear(Current->RegisterNumber())
				Active->Push(Current)
			}
		}

		/*
		Print("=============\n")

		for (i32 Index := 0, Index < Unhandled->Count(), Index++) {
			Print("Unhandled [%i] = ", Index)
			TACInterval* Next := Unhandled->At(Index)
			Next->Print(this->Triples->Count())
			Print("\n")
		}

		for (i32 Index := 0, Index < Handled->Count(), Index++) {
			TACInterval* Next := Handled->At(Index)
			Next->Print(this->Triples->Count())
			Print("\n")
		}

		for (i32 Index := 0, Index < Active->Count(), Index++) {
			TACInterval* Next := Active->At(Index)
			Next->Print(this->Triples->Count())
			Print("\n")
		}

		for (i32 Index := 0, Index < Inactive->Count(), Index++) {
			TACInterval* Next := Inactive->At(Index)
			Next->Print(this->Triples->Count())
			Print("\n")
		}
		;*/
	}

	define void LinearScanCleanup() {
		i32 BlockCount := this->Blocks->Count()

		for (i32 BlockIndex := 0, BlockIndex < BlockCount, BlockIndex++) {
			TACBlock* Block := this->Blocks->At(BlockIndex)

			i32 Count := Block->Count()

			for (i32 Index := Count - 1, Index >= 0, Index--) {
				TACTriple* Triple := Block->At(Index)

				if (Triple->Is(TAC_PHI) || Triple->Is(TAC_CLOBBER)) {
					Block~>Body->RemoveValue(Triple)
				}
				else if (Triple->Is(TAC_MOVE) && Triple->Left->Is(TACAddressKind:Temporary)) {
					TACPhysicalStorage Result := Triple->Storage()
					TACPhysicalStorage Operand := Triple->Left.TemporaryTriple->Storage()

					if (Result->Equals(Operand)) {
						Block~>Body->RemoveValue(Triple)
					}
				}
			}
		}
	}