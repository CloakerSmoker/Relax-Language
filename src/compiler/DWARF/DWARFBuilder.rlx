

#Require "./src/lib/Memory.rlx"
#Require "./src/compiler/DWARF/Stream.rlx"
#Require "./src/compiler/DWARF/Expression.rlx"
#Require "./src/compiler/DWARF/DIE.rlx"
#Require "./src/compiler/DWARF/Lines.rlx"
;#Require "./src/compiler/DWARF/FakeTypes.rlx"

#Require "./src/lib/SafeString.rlx"

struct DWARFBuilder {
	DWARFDebuggingEntryStreamBuilder* DIEStream
	DWARFAbbreviationTableBuilder* Abbreviations
	DWARFLineProgramBuilder* LineInfo
	
	HashMap Types
	HashMap IncompleteTypes
	
	i32 CompilationUnitTag
	
	i32 BaseTypeTag
	i32 PointerTypeTag
	i32 ArrayTypeTag
	
	i32 StructTypeTag
	i32 StructTypeAliasTag
	i32 StructCompletionTypeTag
	i32 StructFieldTag
	
	i32 BitsTypeTag
	i32 BitsFieldTag
	
	i32 FunctionDefinitionTag
	i32 FunctionParameterTag
	
	i32 VariableTag
	
	i32 EnumTypeTag
	i32 EnumMemberTag
	
	i32 ConstantTag
	
	i32 FunctionPointerTag
	i32 FunctionPointerParameterTag
	
	static DWARFBuilder* New() {
		DWARFBuilder* this := Alloc(#DWARFBuilder)
		
		this->DIEStream := DWARFDebuggingEntryStreamBuilder:New()
		this->Abbreviations := DWARFAbbreviationTableBuilder:New()
		this->LineInfo := DWARFLineProgramBuilder:New()
		
		this~>Types->Initialize()
		this~>IncompleteTypes->Initialize()
		
		return this
	}
	
	define void CreateAbbreviations() {
		DWARFAbbreviationTableBuilder* A := this->Abbreviations
		; ^ much shortened name for sanity's sake
		
		this->CompilationUnitTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_COMPILATION_UNIT, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_PRODUCER, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_COMPILATION_DIRECTORY, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_MAIN_SUBPROGRAM, DWARF_FORM_FLAG_PRESENT)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOW_ADDRESS, DWARF_FORM_ADDRESS)
			A->AppendAttributePair(DWARF_ATTRIBUTE_HIGH_ADDRESS, DWARF_FORM_DATA_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_STATEMENT_LIST, DWARF_FORM_SECTION_OFFSET)
		A->EndAbbreviation()
		
		this->BaseTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_BASE_TYPE, false)
			;Abbreviations->AppendAttributePair(DWARF_ATTRIBUTE_FILE, DWARF_FORM_DATA_1)
			;Abbreviations->AppendAttributePair(DWARF_ATTRIBUTE_COLUMN, DWARF_FORM_DATA_1)
			;Abbreviations->AppendAttributePair(DWARF_ATTRIBUTE_LINE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_ENCODING, DWARF_FORM_DATA_1)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
		A->EndAbbreviation()
		
		this->PointerTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_POINTER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
		A->EndAbbreviation()
		
		this->StructTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_STRUCTURE, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
		A->EndAbbreviation()
		
		; Structs are written in a slightly funky way. First, we write a `typedef %Name% 0` entry which we can
		;  point to if the struct refers to itself. Then, when writing the actual definition of the struct, we go back
		;   and rewrite it to `typedef %Name% %Definition%`
		
		; This avoids problems with infinitely recursive structure pointers and such. I don't remember how, so just trust
		;  me on it
		
		this->StructTypeAliasTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_TYPE_ALIAS, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
		A->EndAbbreviation()
		
		this->StructCompletionTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_STRUCTURE, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
		A->EndAbbreviation()
		
		this->StructFieldTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_MEMBER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_MEMBER_LOCATION, DWARF_FORM_LOCATION_EXPRESSION)
		A->EndAbbreviation()
		
		this->VariableTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_VARIABLE, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOCATION, DWARF_FORM_LOCATION_EXPRESSION)
		A->EndAbbreviation()
		
		this->FunctionDefinitionTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_SUBPROGRAM, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_FRAME_BASE, DWARF_FORM_LOCATION_EXPRESSION)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOW_ADDRESS, DWARF_FORM_ADDRESS)
			A->AppendAttributePair(DWARF_ATTRIBUTE_HIGH_ADDRESS, DWARF_FORM_DATA_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_MAIN_SUBPROGRAM, DWARF_FORM_DATA_1)
		A->EndAbbreviation()
		
		this->FunctionParameterTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_PARAMETER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOCATION, DWARF_FORM_LOCATION_EXPRESSION)
			A->AppendAttributePair(DWARF_ATTRIBUTE_VARIABLE_PARAMETER, DWARF_FORM_FLAG_PRESENT)
		A->EndAbbreviation()
		
		this->BitsTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_STRUCTURE, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
		A->EndAbbreviation()
		
		this->BitsFieldTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_MEMBER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_DATA_BIT_OFFSET, DWARF_FORM_DATA_1)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BIT_SIZE, DWARF_FORM_DATA_1)
		A->EndAbbreviation()

		this->ArrayTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_ARRAY, false)
			;A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_ORDERING, DWARF_FORM_DATA_1)
		A->EndAbbreviation()
		
		this->EnumTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_ENUM_TYPE, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_REFERENCE_4)
		A->EndAbbreviation()
		
		this->EnumMemberTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_ENUM_MEMBER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_CONSTANT_VALUE, DWARF_FORM_DATA_4)
		A->EndAbbreviation()
		
		this->ConstantTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_VARIABLE, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_CONSTANT_VALUE, DWARF_FORM_DATA_8)
		A->EndAbbreviation()
		
		this->FunctionPointerTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_FUNCTION_POINTER, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
		A->EndAbbreviation()
		
		this->FunctionPointerParameterTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_PARAMETER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
		A->EndAbbreviation()
	
		A->End()
	}
	
	define i32 StartCompilationUnit(i8* BaseFile, i8* Directory, i64 ImageBase, i32 LineNumberInfoOffset) {
		this->DIEStream->StartEntry(this->CompilationUnitTag)
			this->DIEStream->AppendString(BaseFile)
			this->DIEStream->AppendString("DWARFBuilder.rlx")
			this->DIEStream->AppendString(Directory)
			this->DIEStream->AppendI64(ImageBase)
			
			i32 ImageSizeOffset := this->DIEStream->Stream->Tell()
			this->DIEStream->AppendI32(0)
			
			this->DIEStream->AppendI32(LineNumberInfoOffset)
		this->DIEStream->EndEntry()
		
		return ImageSizeOffset
	}
	define void EndCompilationUnit(i32 ImageSizeOffset, i32 ImageSize) {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
		
		i32 CurrentOffset := this->DIEStream->Stream->Tell()
		
		this->DIEStream->Stream->Seek(ImageSizeOffset)
		this->DIEStream->Stream->WriteI32(ImageSize)
		
		this->DIEStream->Stream->Seek(CurrentOffset)
	}
	
	define i32 AddBaseType(i8* Name, i32 Size) {
		i32 TypeOffset := this->DIEStream->StartEntry(this->BaseTypeTag)
			this->DIEStream->AppendI16(Size)
			this->DIEStream->AppendI8(DWARF_ENCODING_SIGNED_INTEGER)
			this->DIEStream->AppendString(Name)
		this->DIEStream->EndEntry()
		
		this~>Types->Set(Name, TypeOffset)
		
		return TypeOffset
	}
	define i32 AddPointerType(i32 PointedToTypeOffset) {
		i32 PointerOffset := this->DIEStream->StartEntry(this->PointerTypeTag)
			this->DIEStream->AppendI32(PointedToTypeOffset)
		this->DIEStream->EndEntry()
		
		return PointerOffset
	}
	define i32 AddArrayType(i32 ElementTypeOffset, i16 Size) {
		i32 ArrayOffset := this->DIEStream->StartEntry(this->ArrayTypeTag)
			this->DIEStream->AppendI32(ElementTypeOffset)
			this->DIEStream->AppendI16(Size)
			this->DIEStream->AppendI8(0)
		this->DIEStream->EndEntry()
		
		return ArrayOffset
	}
	
	define i32 StartStruct(i8* Name, i16 Size) {
		i32 StructOffset := this->DIEStream->StartEntry(this->StructTypeTag)
			this->DIEStream->AppendI16(Size)
			this->DIEStream->AppendString(Name)
		this->DIEStream->EndEntry()
		
		return StructOffset
	}
	
	define i32 AddIncompleteStruct(i32* TargetTypeOffset, i8* Name) {
		i32 IncompleteStructOffset := this->DIEStream->StartEntry(this->StructTypeAliasTag)
			this->DIEStream->AppendString(Name)
			*TargetTypeOffset := this->DIEStream->Stream->Tell()
			this->DIEStream->AppendI32(0)
		this->DIEStream->EndEntry()
		
		return IncompleteStructOffset
	}
	define i32 StartStructCompletion(i32 AliasOffset, i16 Size) {
		i32 StructCompletionOffset := this->DIEStream->StartEntry(this->StructCompletionTypeTag)
			this->DIEStream->AppendI16(Size)
		this->DIEStream->EndEntry()
		
		i32 Offset := this->DIEStream->Stream->Tell()
		this->DIEStream->Stream->Seek(AliasOffset)
		this->DIEStream->AppendI32(StructCompletionOffset)
		this->DIEStream->Stream->Seek(Offset)
		
		return StructCompletionOffset
	}
	
	define i32 AddStructField(i8* Name, i32 TypeOffset, i32 Offset) {
		i32 FieldOffset := this->DIEStream->StartEntry(this->StructFieldTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			
			DWARFExpressionBuilder* OffsetExpression := this->DIEStream->StartAppendExpression()
			
			OffsetExpression->EmitAddConstant(Offset)
			
			this->DIEStream->EndAppendExpression(OffsetExpression)
		this->DIEStream->EndEntry()
		
		return FieldOffset
	}
	define void EndStruct() {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define i32 StartBits(i8* Name, i16 Size) {
		i32 BitsOffset := this->DIEStream->StartEntry(this->BitsTypeTag)
			this->DIEStream->AppendI16(Size)
			this->DIEStream->AppendString(Name)
		this->DIEStream->EndEntry()
		
		return BitsOffset
	}
	define i32 AddBitsField(i8* Name, i32 TypeOffset, i8 BitOffset, i8 BitSize) {
		i32 FieldOffset := this->DIEStream->StartEntry(this->BitsFieldTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			this->DIEStream->AppendI8(BitOffset)
			this->DIEStream->AppendI8(BitSize)
		this->DIEStream->EndEntry()
		
		return FieldOffset
	}
	define void EndBits() {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define i32 StartEnum(i8* Name) {
		i32 EnumOffset := this->DIEStream->StartEntry(this->EnumTypeTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(4) ; TODO: If an enum holds flags it might need to be bigger than 4 bytes
		this->DIEStream->EndEntry()
		
		return EnumOffset
	}
	define i32 AddEnumMember(i8* Name, i32 Value) {
		i32 MemberOffset := this->DIEStream->StartEntry(this->EnumMemberTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(Value)
		this->DIEStream->EndEntry()
		
		return MemberOffset
	}
	define void EndEnum() {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define i32 StartFunctionPointer(i8* Name, i32 ReturnTypeOffset) {
		i32 TypeOffset := this->DIEStream->StartEntry(this->FunctionPointerTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(ReturnTypeOffset)
		this->DIEStream->EndEntry()
		
		return TypeOffset
	}
	define i32 AddFunctionPointerParameter(i32 TypeOffset) {
		i32 ParameterOffset := this->DIEStream->StartEntry(this->FunctionPointerParameterTag)
			this->DIEStream->AppendI32(TypeOffset)
		this->DIEStream->EndEntry()
		
		return ParameterOffset
	}
	define void EndFunctionPointer() {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define void AddConstant(i8* Name, i32 TypeOffset, i64 Value) {
		this->DIEStream->StartEntry(this->ConstantTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			this->DIEStream->AppendI64(Value)
		this->DIEStream->EndEntry()
	}
	
	define i32 StartFunction(i8* Name, i32 ReturnTypeOffset, i64 StartAddress, i8 IsMain) {
		this->DIEStream->StartEntry(this->FunctionDefinitionTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(ReturnTypeOffset)
			
			DWARFExpressionBuilder* FrameBaseExpression := this->DIEStream->StartAppendExpression()
			
			FrameBaseExpression->EmitPushRegister(DWARF_AMD64_REGISTER_RBP)
			
			this->DIEStream->EndAppendExpression(FrameBaseExpression)
			
			this->DIEStream->AppendI64(StartAddress)
			
			i32 SizeOffset := this->DIEStream->Stream->Tell()
			this->DIEStream->AppendI32(0)
			
			this->DIEStream->AppendI8(IsMain)
		this->DIEStream->EndEntry()
		
		return SizeOffset
	}
	
	define void AddRawLocalVariable(i32 Tag, i8* Name, i32 TypeOffset, i32 StackOffset) {
		this->DIEStream->StartEntry(Tag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			
			DWARFExpressionBuilder* OffsetExpression := this->DIEStream->StartAppendExpression()
			
			OffsetExpression->EmitPushBasePointerOffset(StackOffset)
			
			this->DIEStream->EndAppendExpression(OffsetExpression)
		this->DIEStream->EndEntry()
	}
	
	define void AddFunctionParameter(i8* Name, i32 TypeOffset, i32 StackOffset) {
		this->AddRawLocalVariable(this->FunctionParameterTag, Name, TypeOffset, StackOffset)
	}
	define void AddLocalVariable(i8* Name, i32 TypeOffset, i32 StackOffset) {
		this->AddRawLocalVariable(this->VariableTag, Name, TypeOffset, StackOffset)
	}
	define void EndFunction(i32 SizeOffset, i32 Size) {
		i32 CurrentOffset := this->DIEStream->Stream->Tell()
		
		this->DIEStream->Stream->Seek(SizeOffset)
		this->DIEStream->Stream->WriteI32(Size)
		
		this->DIEStream->Stream->Seek(CurrentOffset)
		
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define i32 AddGlobalVariable(i8* Name, i32 TypeOffset, i64 Address) {
		i32 GlobalOffset := this->DIEStream->StartEntry(this->VariableTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			
			DWARFExpressionBuilder* LocationExpression := this->DIEStream->StartAppendExpression()
			
			LocationExpression->EmitPushAddress(Address)
			
			this->DIEStream->EndAppendExpression(LocationExpression)
		this->DIEStream->EndEntry()
		
		return GlobalOffset
	}
	
	declare i32 FindOrTranslateType(Type, i8)
	
	define i32 FindOrTranslateType(Type T) {
		return this->FindOrTranslateType(T, false)
	}
	
	define i32 TranslateTypeInfo(TypeInfo* T, i8 MustBeIncomplete) {
		i32 Offset := 0
		
		if (T->IsStructType) {
			i32 AliasOffset := 0
			
			Offset := this->AddIncompleteStruct(&AliasOffset, T->Name->Buffer)
			this~>Types->Set(T->Name, Offset)
			
			if (MustBeIncomplete) {
				return Offset
			}
			
			void* Elements := T~>Fields->Elements
			i32 MaxIndex := T~>Fields->BufferMaxCount As i32
			
			for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
				; Ensure full definitions for any array/pointer/bits types, but only incomplete definitions
				;  for nested struct types
				
				if (Elements[ElementIndex]) {
					HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
					
					while (FoundElement) {
						StructField* NextField := FoundElement->Value
						
						NextField->DWARFTypeOffset := this->FindOrTranslateType(NextField->ValueType)
						
						FoundElement := FoundElement->NextElement
					}
				}
			}
			
			Offset := this->StartStructCompletion(AliasOffset, T->Size)
			
			for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
				; Complete our earlier definition, filling in the actual size/fields
				
				if (Elements[ElementIndex]) {
					HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
					
					while (FoundElement) {
						StructField* NextField := FoundElement->Value
						
						this->AddStructField(NextField->Name->Buffer, NextField->DWARFTypeOffset, NextField->Offset)
						
						FoundElement := FoundElement->NextElement
					}
				}
			}
			
			this->EndStruct()
		}
		else if (T->IsBits) {
			Offset := this->StartBits(T->Name->Buffer, T->Size)
			this~>Types->Set(T->Name, Offset)
			
			void* Elements := T~>Fields->Elements
			i32 MaxIndex := T~>Fields->BufferMaxCount As i32
			
			for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
				if (Elements[ElementIndex]) {
					HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
					
					while (FoundElement) {
						StructField* NextField := FoundElement->Value
						
						i32 TypeOffset := this->FindOrTranslateType(NextField->ValueType)
						
						i8 BitSize := NextField->BitEndIndex - NextField->BitStartIndex
						
						this->AddBitsField(NextField->Name->Buffer, TypeOffset, NextField->BitStartIndex, BitSize)
						
						FoundElement := FoundElement->NextElement
					}
				}
			}
			
			this->EndBits()
		}
		else if (T->IsEnum) {
			Offset := this->StartEnum(T->Name->Buffer)
			this~>Types->Set(T->Name, Offset)
			
			DWARFStream* NameStream := DWARFStream:Tiny()
			
			NameStream->WriteString(T->Name->Buffer)
			NameStream->Seek(NameStream->Tell() - 1) ; Seek back over null terminator
			NameStream->WriteI8(':')
			
			i32 BeforeMemberName := NameStream->Tell()
			
			void* Elements := T~>Fields->Elements
			i32 MaxIndex := T~>Fields->BufferMaxCount As i32
			
			for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
				if (Elements[ElementIndex]) {
					HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
					
					while (FoundElement) {
						StructField* NextField := FoundElement->Value
						
						NameStream->Seek(BeforeMemberName)
						NameStream->WriteString(NextField->Name->Buffer)
						
						this->AddEnumMember(NameStream->Buffer, NextField->EnumValue)
						
						FoundElement := FoundElement->NextElement
					}
				}
			}
			
			this->EndEnum()
			
			for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
				if (Elements[ElementIndex]) {
					HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
					
					while (FoundElement) {
						StructField* NextField := FoundElement->Value
						
						NameStream->Seek(BeforeMemberName)
						NameStream->WriteString(NextField->Name->Buffer)
						
						this->AddConstant(NameStream->Buffer, Offset, NextField->EnumValue)
						
						FoundElement := FoundElement->NextElement
					}
				}
			}
			
			NameStream->Free()
		}
		else if (T->IsFunctionPointer) {
			FunctionPointerInfo* FunctionPointer := T~>FunctionPointer
			
			i32 ReturnTypeOffset := this->FindOrTranslateType(FunctionPointer->ReturnType)
			
			i8[100] NameBuffer
			StringifyType(NameBuffer, MakeType(T, 0))
			
			Offset := this->StartFunctionPointer(NameBuffer, ReturnTypeOffset)
			
			for (i32 Index := 0, Index < FunctionPointer->ParameterCount, Index++) {
				i32 ParameterTypeOffset := this->FindOrTranslateType(FunctionPointer->ParameterTypes[Index])
				
				this->AddFunctionPointerParameter(ParameterTypeOffset)
			}
			
			this->EndFunctionPointer()
		}
		
		return Offset
	}
	
	define i32 FindOrTranslateType(Type T, i8 MustBeIncomplete) {
		TypeInfo* BaseType := GetBaseType(T)
		
		HashMapElement* BaseTypeElement := this~>Types->Get(BaseType->Name)
		
		i32 BaseTypeOffset := 0
		
		if (BaseTypeElement) {
			BaseTypeOffset := BaseTypeElement->Value As i32
		}
		else {
			BaseTypeOffset := this->TranslateTypeInfo(BaseType, MustBeIncomplete)
		}
		
		i32 TypeOffset := BaseTypeOffset
		
		if (T.IsArray) {
			ArrayTypeInfo* ArrayType := GetArrayType(T)
			
			TypeOffset := this->AddArrayType(TypeOffset, BaseType->Size * ArrayType->Length)
		}
		else {
			i32 PointerDepth := GetPointerDepth(T)
			
			if (BaseType->IsFunctionPointer) {
				; Our function pointers aren't actually pointers to function types, since
				;  that would ask the question of "what happens if I dereference a function
				;   pointer?" which I don't want to answer. 
				; However, gdb/DWARF expect a function pointer to be a pointer to a function
				;  type, which means we need to add a fake level of pointer depth to function
				;   pointers
				
				PointerDepth += 1
			}
			
			for (i32 Index := 0, Index < PointerDepth, Index++) {
				TypeOffset := this->AddPointerType(TypeOffset)
			}
		}
		
		return TypeOffset
	}
	
	define void WriteSections(ELFBuilder* ELF) {
		DWARFStream* DIEStream := DWARFStream:Big()
		this->DIEStream->Serialize(DIEStream)
		
		DWARFStream* AbbreviationsStream := this->Abbreviations->Stream
		
		DWARFStream* LineInfoStream := DWARFStream:Big()
		this->LineInfo->Serialize(LineInfoStream)
		
		ELF->AddDataSection(".debug_abbrev", AbbreviationsStream->Buffer, AbbreviationsStream->Index)
		ELF->AddDataSection(".debug_info", DIEStream->Buffer, DIEStream->Index)
		ELF->AddDataSection(".debug_line", LineInfoStream->Buffer, LineInfoStream->Index)
	}
}
