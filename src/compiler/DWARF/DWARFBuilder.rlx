

#Require "./src/lib/Memory.rlx"
#Require "./src/compiler/DWARF/Stream.rlx"
#Require "./src/compiler/DWARF/Expression.rlx"
#Require "./src/compiler/DWARF/DIE.rlx"
#Require "./src/compiler/DWARF/Lines.rlx"
#Require "./src/compiler/DWARF/FakeTypes.rlx"

struct DWARFBuilder {
	DWARFDebuggingEntryStreamBuilder* DIEStream
	DWARFAbbreviationTableBuilder* Abbreviations
	DWARFLineProgramBuilder* LineInfo
	
	HashMap Types
	
	i32 CompilationUnitTag
	i32 BaseTypeTag
	i32 PointerTypeTag
	i32 StructTypeTag
	i32 MemberTypeTag
	i32 VariableTag
	i32 FunctionDefinitionTag
	
	static DWARFBuilder* New() {
		DWARFBuilder* this := Alloc(#DWARFBuilder)
		
		this->DIEStream := DWARFDebuggingEntryStreamBuilder:New()
		this->Abbreviations := DWARFAbbreviationTableBuilder:New()
		this->LineInfo := DWARFLineProgramBuilder:New()
		
		this~>Types->Initialize()
		
		return this
	}
	
	define void CreateAbbreviations() {
		DWARFAbbreviationTableBuilder* A := this->Abbreviations
		; ^ much shortened name for sanity's sake
		
		this->CompilationUnitTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_COMPILATION_UNIT, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_COMPILATION_DIRECTORY, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_MAIN_SUBPROGRAM, DWARF_FORM_FLAG_PRESENT)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOW_ADDRESS, DWARF_FORM_ADDRESS)
			A->AppendAttributePair(DWARF_ATTRIBUTE_HIGH_ADDRESS, DWARF_FORM_DATA_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_STATEMENT_LIST, DWARF_FORM_DATA_4)
		A->EndAbbreviation()
		
		this->BaseTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_BASE_TYPE, false)
			;Abbreviations->AppendAttributePair(DWARF_ATTRIBUTE_FILE, DWARF_FORM_DATA_1)
			;Abbreviations->AppendAttributePair(DWARF_ATTRIBUTE_COLUMN, DWARF_FORM_DATA_1)
			;Abbreviations->AppendAttributePair(DWARF_ATTRIBUTE_LINE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_ENCODING, DWARF_FORM_DATA_1)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
		A->EndAbbreviation()
		
		this->PointerTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_POINTER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
		A->EndAbbreviation()
		
		this->StructTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_STRUCTURE, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_BYTE_SIZE, DWARF_FORM_DATA_2)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
		A->EndAbbreviation()
		
		this->MemberTypeTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_MEMBER, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_MEMBER_LOCATION, DWARF_FORM_LOCATION_EXPRESSION)
		A->EndAbbreviation()
		
		this->VariableTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_VARIABLE, false)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOCATION, DWARF_FORM_LOCATION_EXPRESSION)
		A->EndAbbreviation()
		
		this->FunctionDefinitionTag := A->StartAbbreviation(DWARF_ABBREVIATION_TAG_SUBPROGRAM, true)
			A->AppendAttributePair(DWARF_ATTRIBUTE_NAME, DWARF_FORM_STRING)
			A->AppendAttributePair(DWARF_ATTRIBUTE_TYPE, DWARF_FORM_REFERENCE_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_FRAME_BASE, DWARF_FORM_LOCATION_EXPRESSION)
			A->AppendAttributePair(DWARF_ATTRIBUTE_LOW_ADDRESS, DWARF_FORM_ADDRESS)
			A->AppendAttributePair(DWARF_ATTRIBUTE_HIGH_ADDRESS, DWARF_FORM_DATA_4)
			A->AppendAttributePair(DWARF_ATTRIBUTE_MAIN_SUBPROGRAM, DWARF_FORM_DATA_1)
		A->EndAbbreviation()
		
		A->End()
	}
	
	define i32 StartCompilationUnit(i8* BaseFile, i8* Directory, i64 ImageBase, i32 LineNumberInfoOffset) {
		this->DIEStream->StartEntry(this->CompilationUnitTag)
			this->DIEStream->AppendString(BaseFile)
			this->DIEStream->AppendString(Directory)
			this->DIEStream->AppendI64(ImageBase)
			
			i32 ImageSizeOffset := this->DIEStream->Stream->Tell()
			this->DIEStream->AppendI32(0)
			
			this->DIEStream->AppendI32(LineNumberInfoOffset)
		this->DIEStream->EndEntry()
		
		return ImageSizeOffset
	}
	define void EndCompilationUnit(i32 ImageSizeOffset, i32 ImageSize) {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
		
		i32 CurrentOffset := this->DIEStream->Stream->Tell()
		
		this->DIEStream->Stream->Seek(ImageSizeOffset)
		this->DIEStream->Stream->WriteI32(ImageSize)
		
		this->DIEStream->Stream->Seek(CurrentOffset)
	}
	
	define i32 AddBaseType(i8* Name, i32 Size) {
		i32 TypeOffset := this->DIEStream->StartEntry(this->BaseTypeTag)
			this->DIEStream->AppendI16(Size)
			this->DIEStream->AppendI8(DWARF_ENCODING_SIGNED_INTEGER)
			this->DIEStream->AppendString(Name)
		this->DIEStream->EndEntry()
		
		this~>Types->Set(Name, TypeOffset)
		
		return TypeOffset
	}
	define i32 AddPointerType(i32 PointedToTypeOffset) {
		i32 PointerOffset := this->DIEStream->StartEntry(this->PointerTypeTag)
			this->DIEStream->AppendI32(PointedToTypeOffset)
		this->DIEStream->EndEntry()
		
		return PointerOffset
	}
	
	define i32 StartStruct(i8* Name, i16 Size) {
		i32 StructOffset := this->DIEStream->StartEntry(this->StructTypeTag)
			this->DIEStream->AppendI16(Size)
			this->DIEStream->AppendString(Name)
		this->DIEStream->EndEntry()
		
		return StructOffset
	}
	define i32 AddStructField(i8* Name, i32 TypeOffset, i32 Offset) {
		i32 FieldOffset := this->DIEStream->StartEntry(this->MemberTypeTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			
			DWARFExpressionBuilder* OffsetExpression := this->DIEStream->StartAppendExpression()
			
			OffsetExpression->EmitAddConstant(Offset)
			
			this->DIEStream->EndAppendExpression(OffsetExpression)
		this->DIEStream->EndEntry()
		
		return FieldOffset
	}
	define void EndStruct() {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define i32 StartFunction(i8* Name, i32 ReturnTypeOffset, i64 StartAddress, i32 Size, i8 IsMain) {
		i32 FunctionOffset := this->DIEStream->StartEntry(this->FunctionDefinitionTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(ReturnTypeOffset)
			
			DWARFExpressionBuilder* FrameBaseExpression := this->DIEStream->StartAppendExpression()
			
			FrameBaseExpression->EmitPushRegister(DWARF_AMD64_REGISTER_RBP)
			
			this->DIEStream->EndAppendExpression(FrameBaseExpression)
			
			this->DIEStream->AppendI64(StartAddress)
			this->DIEStream->AppendI32(Size)
			this->DIEStream->AppendI8(IsMain)
		this->DIEStream->EndEntry()
		
		return FunctionOffset
	}
	define i32 AddLocalVariable(i8* Name, i32 TypeOffset, i32 StackOffset) {
		i32 LocalOffset := this->DIEStream->StartEntry(this->VariableTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			
			DWARFExpressionBuilder* OffsetExpression := this->DIEStream->StartAppendExpression()
			
			OffsetExpression->EmitPushBasePointerOffset(StackOffset)
			
			this->DIEStream->EndAppendExpression(OffsetExpression)
		this->DIEStream->EndEntry()
		
		return LocalOffset
	}
	define void EndFunction() {
		this->DIEStream->StartEntry(DWARF_ABBREVIATION_TAG_NULL)
	}
	
	define i32 AddGlobalVariable(i8* Name, i32 TypeOffset, i64 Address) {
		i32 GlobalOffset := this->DIEStream->StartEntry(this->VariableTag)
			this->DIEStream->AppendString(Name)
			this->DIEStream->AppendI32(TypeOffset)
			
			DWARFExpressionBuilder* LocationExpression := this->DIEStream->StartAppendExpression()
			
			LocationExpression->EmitPushAddress(Address)
			
			this->DIEStream->EndAppendExpression(LocationExpression)
		this->DIEStream->EndEntry()
		
		return GlobalOffset
	}
	
	declare i32 TranslateType(Type)
	
	define i32 TranslateTypeInfo(TypeInfo* T) {
		
		if (T->IsStructType) {
			i32 Offset := this->StartStruct(T->Name->PackToString(), T->Size)
			
			void* Elements := T~>Fields->Elements
			i32 MaxIndex := T~>Fields->BufferMaxCount As i32
			
			for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
				if (Elements[ElementIndex]) {
					HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
					
					while (FoundElement) {
						StructField* NextField := FoundElement->Value
						
						i8* Name := NextField->Name->PackToString()
						i32 TypeOffset := this->TranslateType(NextField->ValueType)
						i32 FieldOffset := NextField->Offset
						
						this->AddStructField(Name, TypeOffset, FieldOffset)
						
						NextField->Name->UnpackFromString()
						
						FoundElement := FoundElement->NextElement
					}
				}
			}
			
			this->EndStruct()
			
			T->Name->UnpackFromString()
			
			return Offset
		}
		
		return 0
		
	}
	
	define i32 TranslateType(Type T) {
		TypeInfo* BaseType := GetBaseType(T)
		
		HashMapElement* BaseTypeElement := this~>Types->Get(BaseType->Name)
		
		i32 BaseTypeOffset := 0
		
		if (BaseTypeElement) {
			BaseTypeOffset := BaseTypeElement->Value As i32
		}
		else {
			BaseTypeOffset := this->TranslateTypeInfo(BaseType)
			
			this~>Types->Set(BaseType->Name, BaseTypeOffset)
		}
		
		i32 TypeOffset := BaseTypeOffset
		
		i32 PointerDepth := GetPointerDepth(T)
		
		for (i32 Index := 0, Index < PointerDepth, Index++) {
			TypeOffset := this->AddPointerType(TypeOffset)
		}
		
		return TypeOffset
	}
	
	define void WriteSections(ELFBuilder* ELF) {
		DWARFStream* DIEStream := DWARFStream:Big()
		this->DIEStream->Serialize(DIEStream)
		
		DWARFStream* AbbreviationsStream := this->Abbreviations->Stream
		
		DWARFStream* LineInfoStream := DWARFStream:Big()
		this->LineInfo->Serialize(LineInfoStream)
		
		ELF->AddDataSection(".debug_abbrev", AbbreviationsStream->Buffer, AbbreviationsStream->Index)
		ELF->AddDataSection(".debug_info", DIEStream->Buffer, DIEStream->Index)
		ELF->AddDataSection(".debug_line", LineInfoStream->Buffer, LineInfoStream->Index)
	}
}
