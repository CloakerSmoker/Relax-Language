

#Require "./src/compiler/DWARF/Stream.rlx"
#Require "./src/lib/HashMap.rlx"

i8 DWARF_AMD64_MINIMUM_INSTRUCTION_LENGTH := 1
i8 DWARF_AMD64_MAXIMUM_OPERATIONS_PER_INSTRUCTION := 1

i32 DWARF_LINE_HEADER_FORMAT_PATH := 0x1

i32 DWARF_LINE_PROGRAM_OPCODE_COPY := 0x1
i32 DWARF_LINE_PROGRAM_OPCODE_ADVANCE_PC := 0x2
i32 DWARF_LINE_PROGRAM_OPCODE_ADVANCE_LINE := 0x3
i32 DWARF_LINE_PROGRAM_OPCODE_SET_FILE := 0x4
i32 DWARF_LINE_PROGRAM_OPCODE_SET_PROLOGUE_END := 0xA
i32 DWARF_LINE_PROGRAM_OPCODE_SET_EPILOGUE_BEGIN := 0xB

i32 DWARF_LINE_PROGRAM_EXTENDED_OPCODE_END_SEQUENCE := 0x1
i32 DWARF_LINE_PROGRAM_EXTENDED_OPCODE_SET_ADDRESS := 0x2

i32 DWARF_LINE_PROGARM_MAXIMUM_SHORT_OPCODE := 255
i32 DWARF_LINE_PROGRAM_RESERVED_SHORT_OPCODES := 13
i32 DWARF_LINE_PROGRAM_SPECIAL_OPCODE_COUNT := DWARF_LINE_PROGARM_MAXIMUM_SHORT_OPCODE - DWARF_LINE_PROGRAM_RESERVED_SHORT_OPCODES

; IF EDITING: REREAD THIS PAGE AGAIN http://wiki.dwarfstd.org/index.php?title=DWARF5_Line_Table_File_Numbers
; This is the least sane part of DWARF5, and basically never does what you want.
; Initial VM state sets the file index to 1. The file list is 0 indexed.
; Some parts of the spec are convinced that file index 0 is the "null file", which is totally not right.
; File 0 is actually just the first file, don't fall for their lies.

struct DWARFLineProgramBuilder {
	DWARFStream* LineProgram
	
	i32 DirectoryEntryCount
	DWARFStream* DirectoryEntries
	
	i32 FileEntryCount
	DWARFStream* FileEntries
	
	HashMap Files
	
	i32 LineBase
	i32 LineRange
	i32 OpcodeBase
	
	i32 MaxLineAdvance
	i32 MaxOffsetAdvance
	
	i32 CurrentLine
	i32 CurrentFileIndex
	i32 CurrentOffset
	
	i64 ImageBase
	
	static DWARFLineProgramBuilder* New() {
		DWARFLineProgramBuilder* this := Alloc(#DWARFLineProgramBuilder)
		
		this~>Files->Initialize()
		this->DirectoryEntries := DWARFStream:Little()
		this->FileEntries := DWARFStream:Little()
		this->LineProgram := DWARFStream:Little()
		
		this->LineBase := 1
		this->LineRange := 12
		this->OpcodeBase := 13
		
		this->MaxLineAdvance := this->LineBase + this->LineRange - 1
		this->MaxOffsetAdvance := DWARF_LINE_PROGRAM_SPECIAL_OPCODE_COUNT / this->LineRange
		
		this->CurrentLine := 1
		this->CurrentFileIndex := 1
		
		return this
	}
	
	define void SetImageBase(i64 ImageBase) {
		this->ImageBase := ImageBase
	}
	
	define i32 AddDirectory(i8* Path) {
		i32 DirectoryEntryOffset := this->DirectoryEntries->Tell()
		
		this->DirectoryEntries->WriteString(Path)
		
		this->DirectoryEntryCount += 1
		
		return DirectoryEntryOffset
	}
	define i32 AddFile(i8* Path) {
		i32 FileEntryIndex := this->FileEntryCount
		
		this->FileEntries->WriteString(Path)
		this~>Files->Set(Path, FileEntryIndex)
		this->FileEntryCount += 1
		
		return FileEntryIndex
	}
	define i32 FindOrAddFile(i8* Path) {
		HashMapElement* FileElement := this~>Files->Get(Path)
		
		if (FileElement != null) {
			return FileElement->Value As i32
		}
		else {
			return this->AddFile(Path)
		}
	}
	
	define void EmitOpcode(i64 Opcode) {
		this->LineProgram->WriteI8(Opcode)
	}
	define void EmitLEB128(i64 Value) {
		this->LineProgram->WriteLEB128(Value)
	}
	
	define i8 SeekTo(i32 Offset, i32 LineNumber, i32 FileIndex, i8 IgnoreLineNumber) {
		; Returns true if a DWARF_LINE_PROGRAM_OPCODE_COPY should be emitted after
		
		i32 OffsetAdvance := Offset - this->CurrentOffset
		i32 LineAdvance := LineNumber - this->CurrentLine
		
		if (FileIndex != this->CurrentFileIndex) {
			this->EmitOpcode(DWARF_LINE_PROGRAM_OPCODE_SET_FILE)
			this->EmitLEB128(FileIndex)
			
			this->CurrentFileIndex := FileIndex
		}
		
		if (OffsetAdvance + LineAdvance = 0) {
			return true
		}
		else if (LineAdvance = 0 && LineNumber != 1 && !IgnoreLineNumber) {
			return false
		}
		
		
		this->CurrentOffset := Offset
		this->CurrentLine := LineNumber
		
		i8 OffsetAdvanceFits := OffsetAdvance < this->MaxOffsetAdvance && OffsetAdvance > 0
		i8 LineAdvanceFits := LineAdvance < this->MaxLineAdvance && LineAdvance > 0
		
		if (OffsetAdvanceFits && LineAdvanceFits) {
			i32 Opcode := (LineAdvance - this->LineBase) + (this->LineRange * OffsetAdvance) + this->OpcodeBase
			
			if (Opcode < 0xFF) {
				this->EmitOpcode(Opcode)
				
				return false
			}
		}
		
		this->EmitOpcode(DWARF_LINE_PROGRAM_OPCODE_ADVANCE_PC)
		this->LineProgram->WriteLEB128(OffsetAdvance)
		
		this->EmitOpcode(DWARF_LINE_PROGRAM_OPCODE_ADVANCE_LINE)
		this->LineProgram->WriteLEB128(LineAdvance)
		
		return true
	}
	define void AddLine(i32 Offset, i32 LineNumber, i8* File) {
		if (this->SeekTo(Offset, LineNumber, this->FindOrAddFile(File), false)) {
			this->EmitOpcode(DWARF_LINE_PROGRAM_OPCODE_COPY)
		}
	}
	
	define void EmitSetAddress(i64 Address) {
		this->EmitOpcode(0)
		this->LineProgram->WriteLEB128(9)
		this->LineProgram->WriteI8(DWARF_LINE_PROGRAM_EXTENDED_OPCODE_SET_ADDRESS)
		this->LineProgram->WriteI64(Address)
	}
	
	define void EmitEndSequence(i32 Offset) {
		this->SeekTo(Offset, this->CurrentLine, this->CurrentFileIndex, true)
		
		this->EmitOpcode(0)
		this->LineProgram->WriteLEB128(1)
		this->LineProgram->WriteI8(DWARF_LINE_PROGRAM_EXTENDED_OPCODE_END_SEQUENCE)
		
		this->CurrentLine := 1
		this->CurrentFileIndex := 1
		this->CurrentOffset := 0
		
		this->EmitSetAddress(this->ImageBase)
	}
	
	define void Serialize(DWARFStream* Stream) {
		i32 BeforeUnitLength := Stream->Tell()
		Stream->WriteI32(0)
		i32 AfterUnitLength := Stream->Tell()
		
		Stream->WriteI16(DWARF_VERSION_5)
		Stream->WriteI8(DWARF_ADDRESS_SIZE_AMD64)
		Stream->WriteI8(DWARF_SEGMENT_SELECTOR_SIZE_AMD64)
		
		i32 BeforeHeaderLength := Stream->Tell()
		Stream->WriteI32(0)
		i32 AfterHeaderLength := Stream->Tell()
		
		Stream->WriteI8(DWARF_AMD64_MINIMUM_INSTRUCTION_LENGTH)
		Stream->WriteI8(DWARF_AMD64_MAXIMUM_OPERATIONS_PER_INSTRUCTION)
		Stream->WriteI8(true)
		
		Stream->WriteI8(this->LineBase)
		Stream->WriteI8(this->LineRange)
		Stream->WriteI8(this->OpcodeBase)
		
		i8* StandardOpcodeOperandCounts := {i8: 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1}
		
		for (i32 Index := 0, Index < 12, Index++) {
			Stream->WriteI8(StandardOpcodeOperandCounts[Index])
		}
		
		Stream->WriteI8(1)
		
		Stream->WriteULEB128(DWARF_LINE_HEADER_FORMAT_PATH)
		Stream->WriteULEB128(DWARF_FORM_STRING)
		
		Stream->WriteI8(this->DirectoryEntryCount)
		Stream->WriteStream(this->DirectoryEntries)
		
		Stream->WriteI8(1)
		
		Stream->WriteULEB128(DWARF_LINE_HEADER_FORMAT_PATH)
		Stream->WriteULEB128(DWARF_FORM_STRING)
		
		Stream->WriteI8(this->FileEntryCount)
		Stream->WriteStream(this->FileEntries)
		
		i32 AfterHeader := Stream->Tell()
		
		Stream->WriteStream(this->LineProgram)
		
		i32 CurrentOffset := Stream->Tell()
		
		i32 HeaderLength := AfterHeader - AfterHeaderLength
		i32 UnitLength := CurrentOffset - AfterUnitLength
		
		Stream->Seek(BeforeHeaderLength)
		Stream->WriteI32(HeaderLength)
		
		Stream->Seek(BeforeUnitLength)
		Stream->WriteI32(UnitLength)
		
		Stream->Seek(CurrentOffset)
	}
	
	
}
