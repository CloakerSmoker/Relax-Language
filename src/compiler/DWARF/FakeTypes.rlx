
#Require "./src/lib/SafeString.rlx"
#Require "./src/lib/HashMap.rlx"

bits Type As i64 {
	[0:47] BaseType,
	[48:49] IsArray,
	[50:63] PointerDepth
}

Type TYPE_NONE := 0 As Type

define Type MakeType(TypeInfo* BackingType, i16 PointerDepth) {
	/* Functions as GetType except with a TypeInfo passed directly instead of being found by name */
	
	Type NewType := TYPE_NONE
	
	NewType.BaseType := BackingType As i64
	NewType.PointerDepth := PointerDepth

	return NewType
}
define Type MakeType(i64 BackingType, i16 PointerDepth) {
	return MakeType(BackingType As TypeInfo*, PointerDepth)
}

struct TypeInfo {
	SafeWideString* Name,
	HashMap Fields,
	HashMap Methods,
	HashMap StaticMethods,
	i16 Size,
	i8 IsStructType,
	i8 IsIncomplete,
	i8 IsBits,
	i8 IsBuiltin
	
	define Type AsNonPointer() {
		return MakeType(this, 0)
	}
	define Type AsPointer(i16 Depth) {
		return MakeType(this, Depth)
	}
	define i8 Is(TypeInfo* Other) {
		return this->Name = Other->Name
	}
}
struct ArrayTypeInfo {
	TypeInfo* BaseType
	i16 Length
	
	static ArrayTypeInfo* New(TypeInfo* Base, i16 Length) {
		ArrayTypeInfo* this := Alloc(#ArrayTypeInfo)
		
		this->BaseType := Base
		this->Length := Length
		
		return this
	}
}

declare TypeInfo* GetBaseType(Type)

define Type MakeArrayType(Type ElementType, i16 ArrayLength) {
	Type Result := TYPE_NONE
	
	Result.IsArray := true
	Result.BaseType := ArrayTypeInfo:New(GetBaseType(ElementType), ArrayLength) As i64
	Result.PointerDepth := ElementType.PointerDepth + 1 As i16
	
	return Result
}

define ArrayTypeInfo* GetArrayType(Type T) {
	return T.BaseType As ArrayTypeInfo*
}
define TypeInfo* GetBaseType(Type T) {
	if (T.IsArray) {
		return GetArrayType(T)->BaseType
	}
	
	return T.BaseType As TypeInfo*
}
define i16 GetTypeSize(Type T) {
	if (T.PointerDepth) {
		return 8
	}
	else {
		return GetBaseType(T)->Size
	}
}
define i16 GetTypeStorageSize(Type T) {
	i16 RegularSize := GetTypeSize(T)
	
	if (T.IsArray) {
		Type B := T
		
		B.PointerDepth -= 1
		
		return (GetTypeSize(B) * GetArrayType(T)->Length) As i16
	}
	
	return RegularSize
}
define i16 GetPointerDepth(Type T) {
	return T.PointerDepth
}

define i32 GetTypeStringLength(Type T) {
	return GetBaseType(T)->Name->Length + GetPointerDepth(T)
}
define void StringifyType(void* RawBuffer, Type T) {
	i8* Buffer := RawBuffer
	
	SafeWideString* Name := GetBaseType(T)->Name
	
	for (i32 Index := 0, Index < Name->Length, Index += 1) {
		Buffer[Index] := Name->ASCIICharacterAt(Index)
	}
	
	for (i32 Depth := 0, Depth < GetPointerDepth(T), Depth += 1) {
		Buffer[Index + Depth] := '*'
	}
	
	Buffer[Index + Depth] := 0
}

i8{100} PrintTypeBuffer

define void PrintType(Type TypeToPrint) {
	; Prints a type, including its pointer depth
	
	StringifyType(PrintTypeBuffer, TypeToPrint)
	
	Print("%s", PrintTypeBuffer)
}

struct StructField {
	SafeWideString* Name,
	i16 Offset,
	Type ValueType,
	i8 BitStartIndex,
	i8 BitEndIndex
}
