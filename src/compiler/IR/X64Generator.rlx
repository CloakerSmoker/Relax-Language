
i8 REX_BASE := 0x40

i8 REX_W := 8
i8 REX_R := 4
i8 REX_X := 2
i8 REX_B := 1

i8 NO_REGISTER := 0
i8 RAX := 0
i8 RBX := 3
i8 RCX := 1
i8 RDX := 2
i8 RSP := 4
i8 RBP := 5
i8 RSI := 6
i8 RDI := 7

; Although R8-R15 actually have the same numbers of RAX-RDI, REX.B is encoded as bit 3 
;  (which is removed and replaced with a REX prefix while actually encoding)

i8 R8 := 8
i8 R9 := 9
i8 R10 := 10
i8 R11 := 11
i8 R12 := 12
i8 R13 := 13
i8 R14 := 14
i8 R15 := 15

i8 MODE_PTOR := 0
i8 MODE_PTOR_DISP8 := 1
i8 MODE_PTOR_DISP32 := 2

i8 MODE_RTOR := 3

i8 LEGACY_SIZE_PREFIX := 0x66

struct X64Generator {
	union {
		void* CodeBuffer
		i8* CodeBufferBytes
	}
	
	i32 CodeBufferCapacity
	i32 CodeBufferIndex
	
	static X64Generator* New() {
		X64Generator* this := Alloc(#X64Generator)
		
		this->CodeBufferCapacity := 0x1000
		this->CodeBuffer := Alloc(this->CodeBufferCapacity)
		
		return this
	}
	
	define void EnsureCodeBufferCapacity() {
		if ((this->CodeBufferIndex + 0x100) >= this->CodeBufferCapacity) {
			this->CodeBufferCapacity += 0x1000
			this->CodeBuffer := ReAlloc(this->CodeBuffer, this->CodeBufferCapacity)
		}
	}
	
	define void* GetPointerToTail() {
		return this->CodeBuffer + this->CodeBufferIndex
	}
	
	define void WriteI8(i16 Number) {
		this->EnsureCodeBufferCapacity()
		this->CodeBufferBytes[this->CodeBufferIndex++] := Number As i8
	}
	define void WriteI16(i16 Number) {
		this->EnsureCodeBufferCapacity()
		
		*(this->GetPointerToTail() As i16*) := Number
		
		this->CodeBufferIndex += 2
	}
	define void WriteI32(i32 Number) {
		this->EnsureCodeBufferCapacity()
		
		*(this->GetPointerToTail() As i32*) := Number
		
		this->CodeBufferIndex += 4
	}
	define void WriteI64(i64 Number) {
		this->EnsureCodeBufferCapacity()
		
		*(this->GetPointerToTail() As i64*) := Number
		
		this->CodeBufferIndex += 8
	}
	
	define i8 RegisterRequiresREX(i8 RegisterNumber) {
		return RegisterNumber >= 8
	}
	
	define void WriteREX(i8 Destination, i8 Source, i8 Extra) {
		i8 Prefix := REX_BASE | Extra
		
		if (this->RegisterRequiresREX(Destination)) {
			Prefix |= REX_R
		}
		
		if (this->RegisterRequiresREX(Source)) {
			Prefix |= REX_B
		}
		
		if (Prefix != REX_BASE || Extra != 0) {
			this->WriteI8(Prefix)
		}
	}
	
	define i8 ClampRegisterNumber(i8 RegisterNumber) {
		if (this->RegisterRequiresREX(RegisterNumber)) {
			return (RegisterNumber - 8) As i8
		}
		
		return RegisterNumber
	}
	
	define void WriteModRM(i8 Mode, i8 Destination, i8 Source) {
		Mode := (Mode << 6) As i8
		i8 Reg := (this->ClampRegisterNumber(Destination) << 3) As i8
		i8 RM := this->ClampRegisterNumber(Source)
		
		this->WriteI8(Mode | Reg | RM)
	}
	
	define void WriteLegacySizePrefix() {
		this->WriteI8(LEGACY_SIZE_PREFIX)
	}
	
	define void WriteSIB(i8 Scale, i8 Index, i8 Base) {
		i8 TrueScale := 0
		
		if (Scale = 2) {TrueScale := 1}
		else if (Scale = 4) {TrueScale := 2}
		else if (Scale = 8) {TrueScale := 3}
		
		this->WriteI8(((TrueScale << 6) | (Index << 3) | Base) As i8)
	}
	
	define void WriteREXOpcode(i8 REX, i16 Opcode) {
		this->WriteREX(0, 0, REX)
		
		if (Opcode & 0xFF00) {
			this->WriteI8(((Opcode >> 8) & 0xFF) As i8)
		}
		
		this->WriteI8(Opcode)
	}
	define void WriteREXOpcode(i8 REX, i16 Opcode, i8 Operand) {
		Opcode += this->ClampRegisterNumber(Operand)
		
		this->WriteREX(0, Operand, REX)
		
		if (Opcode & 0xFF00) {
			this->WriteI8(((Opcode >> 8) & 0xFF) As i8)
		}
		
		this->WriteI8(Opcode & 0xFF)
	}
	
	define void WriteREXOpcodeModRM(i8 REX, i16 Opcode, i8 Mode, i8 Destination, i8 Source) {
		this->WriteREX(Destination, Source, REX)
		this->WriteI8(Opcode)
		this->WriteModRM(Mode, Destination, Source)
	}
	
	define void WriteREXBigOpcodeModRM(i16 OpcodeOne, i16 OpcodeTwo, i8 Mode, i8 Destination, i8 Source, i8 ExtraREX) {
		this->WriteREX(Destination, Source, ExtraREX)
		this->WriteI8(OpcodeOne)
		this->WriteI8(OpcodeTwo)
		this->WriteModRM(Mode, Destination, Source)
	}
	define void WriteREXOpcodeModRMSIB(i16 Opcode, i8 Mode, i8 Destination, i8 Scale, i8 Index, i8 Base, i8 ExtraREX) {
		if (this->RegisterRequiresREX(Index)) {
			ExtraREX := ExtraREX | REX_X
		}
		
		this->WriteREX(Destination, Base, ExtraREX)
		this->WriteI8(Opcode)
		this->WriteModRM(Mode, Destination, 4)
		this->WriteSIB(Scale, this->ClampRegisterNumber(Index), this->ClampRegisterNumber(Base))
	}
	
	define void WriteGenericInstruction(i8 Size, i16 Opcode) {
		i8 REX := 0
		
		if (Size = 1) {
			Opcode -= 1
		}
		else if (Size = 2) {
			this->WriteLegacySizePrefix()
		}
		else if (Size = 8) {
			REX |= REX_W
		}
		
		this->WriteREXOpcode(REX, Opcode)
	}
	
	define void WriteGenericInstructionRM(i8 Size, i16 Opcode, i8 Mode, i8 Destination, i8 Source) {
		this->WriteGenericInstruction(Size, Opcode)
		this->WriteModRM(Mode, Destination, Source)
	}
	define void WriteGenericInstructionMR(i8 Size, i16 Opcode, i8 Mode, i8 Destination, i8 Source) {
		this->WriteGenericInstructionRM(Size, Opcode, Mode, Source, Destination)
	}
	
	define void WriteGenericInstructionDisplacementRM(i8 Size, i16 Opcode, i8 Destination, i8 Source, i32 Displacement) {
		i8 DisplacementSize := GetNumberSize(Displacement)
		
		if (DisplacementSize = 1) {
			this->WriteGenericInstructionRM(Size, Opcode, MODE_PTOR_DISP8, Destination, Source)
			this->WriteI8(Displacement As i8)
		}
		else {
			this->WriteGenericInstructionRM(Size, Opcode, MODE_PTOR_DISP32, Destination, Source)
			this->WriteI32(Displacement)
		}
	}
	define void WriteGenericInstructionDisplacementMR(i8 Size, i16 Opcode, i8 Destination, i32 Displacement, i8 Source) {
		this->WriteGenericInstructionDisplacementRM(Size, Opcode, Source, Destination, Displacement)
	}
	
	
	; MOV r64, r/m64 (RM)
	; 8B /r
	define void Move_RX_RIX_DISPX(i8 Size, i8 Destination, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x8B, Destination, Base, Displacement)
	}
	define void Move_RX_RIX(i8 Size, i8 Destination, i8 Source) {
		this->WriteGenericInstructionRM(Size, 0x8B, MODE_PTOR, Destination, Source)
	}
	define void Move_RX_RX(i8 Size, i8 Destination, i8 Source) {
		this->WriteGenericInstructionRM(Size, 0x8B, MODE_RTOR, Destination, Source)
	}
	
	; MOV r/mX, rX (MR)
	; 89 /r
	define void Move_RIX_DISPX_RX(i8 Size, i8 Base, i32 Displacement, i8 Source) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x89, Base, Displacement, Source)
	}
	define void Move_RIX_RX(i8 Size, i8 Destination, i8 Source) {
		this->WriteGenericInstructionMR(Size, 0x89, MODE_PTOR, Destination, Source)
	}
	
	; MOV rX, immX
	; B0+ rb ib
	define void Move_R8_I8(i8 Destination, i8 Value) {
		this->WriteREXOpcode(REX_BASE, 0xB0, Destination)
		this->WriteI8(Value)
	}
	; B8+ rX iX
	define void Move_R16_I16(i8 Destination, i16 Value) {
		this->WriteLegacySizePrefix()
		this->WriteREXOpcode(0, 0xB8, Destination)
		this->WriteI16(Value)
	}
	define void Move_R32_I32(i8 Destination, i32 Value) {
		this->WriteREXOpcode(0, 0xB8, Destination)
		this->WriteI32(Value)
	}
	define void Move_R64_I64(i8 Destination, i64 Value) {
		this->WriteREXOpcode(REX_B, 0xB8, Destination)
		this->WriteI64(Value)
	}
	define void Move_RX_IX(i8 Size, i8 Destination, i64 Value) {
		if      (Size = 1) {   this->Move_R8_I8(Destination, Value As i8 ) }
		else if (Size = 2) { this->Move_R16_I16(Destination, Value As i16) }
		else if (Size = 4) { this->Move_R32_I32(Destination, Value As i32) }
		else if (Size = 8) { this->Move_R64_I64(Destination, Value As i64) }
	}
	
	; MOV r/mX, immX (MI)
	; C7 /0 iX
	define void Move_RIX_DISPX_IX(i8 Size, i8 Destination, i32 Displacement, i32 Value) {
		this->WriteGenericInstructionDisplacementMR(Size, 0xC7, Destination, Displacement, 0)
		
		if      (Size = 1) {  this->WriteI8(Value As i8 ) }
		else if (Size = 2) { this->WriteI16(Value As i16) }
		else if (Size = 4) { this->WriteI32(Value As i32) }
	}
	
	; XCHG rax, r64
	; REX.W + 90 + rd
	define void XChg_RAX_R64(i8 Target) {
		this->WriteREXOpcode(REX_W, 0x90, Target)
	}
	
	; XCHG rX, r/mX (rm)
	; 87 /r
	define void XChg_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x87, MODE_RTOR, Left, Right)
	}
	define void XChg_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x87, Left, RightBase, Displacement)
	}
	define void XChg_RIX_DISPX_RX(i8 Size, i8 LeftBase, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x87, Right, LeftBase, Displacement)
	}
	
	; ADD rX, r/mX (RM)
	; 03 /r
	define void Add_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x03, MODE_RTOR, Left, Right)
	}
	define void Add_RX_RIX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x03, MODE_PTOR, Left, Right)
	}
	define void Add_RX_RIX_DISPX(i8 Size, i8 Left, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x03, Left, Base, Displacement)
	}
	
	; ADD r/mX, rX (MR)
	; 01 /r
	define void Add_RIX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionMR(Size, 0x01, MODE_PTOR, Left, Right)
	}
	define void Add_RIX_DISPX_RX(i8 Size, i8 Base, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x01, Base, Displacement, Right)
	}
	
	; SUB rX, r/mX (RM)
	; 2B /r
	define void Sub_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x2B, MODE_RTOR, Left, Right)
	}
	define void Sub_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x2B, Left, RightBase, Displacement)
	}
	
	; SUB r/mX, rX (MR)
	; 29 /r
	define void Sub_RIX_DISPX_RX(i8 Size, i8 LeftBase, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x29, LeftBase, Displacement, Right)
	}
	
	; SUB r/mX, rX (MR)
	
	; SUB r/mX, imm8 (MI)
	define void Sub_RX_I8(i8 Size, i8 Target, i16 Value) {
		if (Size = 1) {
			; 81 /5 ib
			this->WriteGenericInstructionMR(1, 0x81, MODE_RTOR, Target, 5)
		}
		else {
			; 83 /5 ib
			this->WriteGenericInstructionMR(Size, 0x83, MODE_RTOR, Target, 5)
		}
		
		this->WriteI8(Value)
	}
	
	; SUB r/mX, imm32 (MR)
	; 81 /5 id
	define void Sub_RX_I32(i8 Size, i8 Target, i32 Value) {
		this->WriteGenericInstructionMR(Size, 0x81, MODE_RTOR, Target, 5)
		this->WriteI32(Value)
	}
	
	; CXX
	; 99
	define void CXX(i8 Size) {
		this->WriteGenericInstruction(Size, 0x99)
	}
	
	; IDIV rax, r/mX (M)
	; F7 /7
	define void IDiv_RAX_RX(i8 Size, i8 Operand) {
		this->WriteGenericInstructionMR(Size, 0xF7, MODE_RTOR, Operand, 7)
	}
	define void IDiv_RAX_RIX_DISPX(i8 Size, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementMR(Size, 0xF7, Base, Displacement, 7)
	}
	
	; IMUL rX, r/mX (RM)
	; 0F AF /r
	define void IMul_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x0FAF, MODE_RTOR, Left, Right)
	}
	define void IMul_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x0FAF, Left, RightBase, Displacement)
	}
	
	; NEG r/mX (M)
	; F7 /3
	define void Neg_RX(i8 Size, i8 Target) {
		this->WriteGenericInstructionMR(Size, 0xF7, MODE_RTOR, Target, 3)
	}
	define void Neg_RIX(i8 Size, i8 Target) {
		this->WriteGenericInstructionMR(Size, 0xF7, MODE_PTOR, Target, 3)
	}
	define void Neg_RIX_DISPX(i8 Size, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementMR(Size, 0xF7, Base, Displacement, 3)
	}
	
	; PUSH r64
	; 50+rd
	define void Push_R64(i8 Target) {
		this->WriteREXOpcode(0, 0x50, Target)
	}
	
	; POP r64
	; 58+rd
	define void Pop_R64(i8 Target) {
		this->WriteREXOpcode(0, 0x58, Target)
	}
	
	; LEAVE
	; C9
	define void Leave() {
		this->WriteI8(0xC9)
	}
	
	; RET
	; C3
	define void Ret() {
		this->WriteI8(0xC3)
	}
	
	; CMP rX, r/mX (RM)
	; 3B /r
	define void Cmp_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x3B, MODE_RTOR, Left, Right)
	}
	define void Cmp_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x3B, Left, RightBase, Displacement)
	}
	
	; CMP r/mX, rX (MR)
	; 39 /r
	define void Cmp_RIX_DISPX_RX(i8 Size, i8 LeftBase, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x39, LeftBase, Displacement, Right)
	}
	
	; CMP r/mX, imm8 (MI)
	define void Cmp_RX_I8(i8 Size, i8 Left, i8 Value) {
		if (Size = 1) {
			; 81 /7
			this->WriteGenericInstructionMR(Size, 0x81, MODE_RTOR, Left, 7)
		}
		else {
			; 83 /7
			this->WriteGenericInstructionMR(Size, 0x83, MODE_RTOR, Left, 7)
		}
		
		this->WriteI8(Value)
	}
	define void Cmp_RIX_DISPX_I8(i8 Size, i8 LeftBase, i32 Displacement, i8 Value) {
		if (Size = 1) {
			; 81 /7
			this->WriteGenericInstructionDisplacementMR(Size, 0x81, LeftBase, Displacement, 7)
		}
		else {
			; 83 /7
			this->WriteGenericInstructionDisplacementMR(Size, 0x83, LeftBase, Displacement, 7)
		}
		
		this->WriteI8(Value)
	}
	
	; TEST r/mX, rX (MR)
	; 85 /r
	define void Test_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionMR(Size, 0x85, MODE_RTOR, Left, Right)
	}
	
	; SETcc r/m8 (M)
	; 0F 9X
	define void SetE_R8 (i8 Target) { this->WriteGenericInstructionMR(4, 0x0F94, MODE_RTOR, Target, 0) }
	define void SetNE_R8(i8 Target) { this->WriteGenericInstructionMR(4, 0x0F95, MODE_RTOR, Target, 0) }
	define void SetL_R8 (i8 Target) { this->WriteGenericInstructionMR(4, 0x0F9C, MODE_RTOR, Target, 0) }
	define void SetLE_R8(i8 Target) { this->WriteGenericInstructionMR(4, 0x0F9E, MODE_RTOR, Target, 0) }
	define void SetG_R8 (i8 Target) { this->WriteGenericInstructionMR(4, 0x0F9F, MODE_RTOR, Target, 0) }
	define void SetGE_R8(i8 Target) { this->WriteGenericInstructionMR(4, 0x0F9D, MODE_RTOR, Target, 0) }
	
	define void SetE_RI8_DISPX (i8 Base, i32 Displacement) { this->WriteGenericInstructionDisplacementMR(4, 0x0F94, Base, Displacement, 0) }
	define void SetNE_RI8_DISPX(i8 Base, i32 Displacement) { this->WriteGenericInstructionDisplacementMR(4, 0x0F95, Base, Displacement, 0) }
	define void SetL_RI8_DISPX (i8 Base, i32 Displacement) { this->WriteGenericInstructionDisplacementMR(4, 0x0F9C, Base, Displacement, 0) }
	define void SetLE_RI8_DISPX(i8 Base, i32 Displacement) { this->WriteGenericInstructionDisplacementMR(4, 0x0F9E, Base, Displacement, 0) }
	define void SetG_RI8_DISPX (i8 Base, i32 Displacement) { this->WriteGenericInstructionDisplacementMR(4, 0x0F9F, Base, Displacement, 0) }
	define void SetGE_RI8_DISPX(i8 Base, i32 Displacement) { this->WriteGenericInstructionDisplacementMR(4, 0x0F9D, Base, Displacement, 0) }
	
	; AND rX, r/mX (RM)
	; 23 /r
	define void And_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x23, MODE_RTOR, Left, Right)
	}
	define void And_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x23, Left, RightBase, Displacement)
	}
	
	; AND r/mX, rX (MR)
	; 21 /r
	define void And_RIX_DISPX_RX(i8 Size, i8 LeftBase, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x21, LeftBase, Displacement, Right)
	}
	
	; XOR rX, r/mX (RM)
	; 33 /r
	define void Xor_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x33, MODE_RTOR, Left, Right)
	}
	define void Xor_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x33, Left, RightBase, Displacement)
	}
	
	; XOR r/mX, rX (MR)
	; 31 /r
	define void Xor_RIX_DISPX_RX(i8 Size, i8 LeftBase, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x31, LeftBase, Displacement, Right)
	}
	
	; OR rX, r/mX (RM)
	; 0B /r
	define void Or_RX_RX(i8 Size, i8 Left, i8 Right) {
		this->WriteGenericInstructionRM(Size, 0x0B, MODE_RTOR, Left, Right)
	}
	define void Or_RX_RIX_DISPX(i8 Size, i8 Left, i8 RightBase, i32 Displacement) {
		this->WriteGenericInstructionDisplacementRM(Size, 0x0B, Left, RightBase, Displacement)
	}
	
	; OR r/mX, rX (MR)
	; 09 /r
	define void Or_RIX_DISPX_RX(i8 Size, i8 LeftBase, i32 Displacement, i8 Right) {
		this->WriteGenericInstructionDisplacementMR(Size, 0x09, LeftBase, Displacement, Right)
	}
	
	; NOT r/mX (M)
	; F7 /2
	define void Not_RX(i8 Size, i8 Target) {
		this->WriteGenericInstructionMR(Size, 0xF7, MODE_RTOR, Target, 2)
	}
	define void Not_RIX_DISPX(i8 Size, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementMR(Size, 0xF7, Base, Displacement, 2)
	}
	
	; SAL r/mX, CL (M)
	; D3 /4
	define void SAL_RX_CL(i8 Size, i8 Target) {
		this->WriteGenericInstructionMR(Size, 0xD3, MODE_RTOR, Target, 4)
	}
	define void SAL_RIX_DISPX_CL(i8 Size, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementMR(Size, 0xD3, Base, Displacement, 4)
	}
	
	; SHR r/mX, CL (M)
	; D3 /5
	define void SHR_RX_CL(i8 Size, i8 Target) {
		this->WriteGenericInstructionMR(Size, 0xD3, MODE_RTOR, Target, 5)
	}
	define void SHR_RIX_DISPX_CL(i8 Size, i8 Base, i32 Displacement) {
		this->WriteGenericInstructionDisplacementMR(Size, 0xD3, Base, Displacement, 5)
	}
	
	; JMP rel32
	; E9 cd
	define void JMP_REL32(i32 Displacement) {
		this->WriteI8(0xE9)
		this->WriteI32(Displacement)
	}
	
	; JZ rel32
	; 0F 84
	define void JZ_REL32(i32 Displacement) {
		this->WriteREXOpcode(0, 0x0F84)
		this->WriteI32(Displacement)
	}
}