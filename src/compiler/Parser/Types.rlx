define Type MakeType(TypeInfo* BackingType, i16 PointerDepth) {
	/* Functions as GetType except with a TypeInfo passed directly instead of being found by name */
	
	Type NewType := TYPE_NONE
	
	NewType.BaseType := BackingType As i64
	NewType.PointerDepth := PointerDepth

	return NewType
}
define Type MakeType(i64 BackingType, i16 PointerDepth) {
	return MakeType(BackingType As TypeInfo*, PointerDepth)
}

struct FunctionPointerInfo {
	Type ReturnType
	Type* ParameterTypes
	i32 ParameterCount
	i8 IsVariadic
}

struct TypeInfo {
	ErrorContext* DefinedAt,
	SafeString* Name,
	
	union {
		HashMap Fields,
		FunctionPointerInfo FunctionPointer
	}
	
	HashMap Methods,
	HashMap StaticMethods,
	
	i16 Size,
	i8 IsStructType,
	i8 IsIncomplete,
	i8 IsBits,
	i8 IsBuiltin,
	i8 IsEnum,
	i8 IsFunctionPointer
	
	define Type AsNonPointer() {
		return MakeType(this, 0)
	}
	define Type AsPointer(i16 Depth) {
		return MakeType(this, Depth)
	}
	define i8 Is(TypeInfo* Other) {
		return this->Name = Other->Name
	}
}
struct ArrayTypeInfo {
	TypeInfo* BaseType
	i16 Length
	
	static ArrayTypeInfo* New(TypeInfo* Base, i16 Length) {
		ArrayTypeInfo* this := Alloc(#ArrayTypeInfo)
		
		this->BaseType := Base
		this->Length := Length
		
		return this
	}
}

declare TypeInfo* GetBaseType(Type)

define Type MakeArrayType(Type ElementType, i16 ArrayLength) {
	Type Result := TYPE_NONE
	
	Result.IsArray := true
	Result.BaseType := ArrayTypeInfo:New(GetBaseType(ElementType), ArrayLength) As i64
	Result.PointerDepth := ElementType.PointerDepth + 1 As i16
	
	return Result
}

define ArrayTypeInfo* GetArrayType(Type T) {
	return T.BaseType As ArrayTypeInfo*
}
define TypeInfo* GetBaseType(Type T) {
	if (T.IsArray) {
		return GetArrayType(T)->BaseType
	}
	
	return T.BaseType As TypeInfo*
}
define i16 GetTypeSize(Type T) {
	if (T.PointerDepth) {
		return 8
	}
	else {
		return GetBaseType(T)->Size
	}
}
define i16 GetTypeStorageSize(Type T) {
	i16 RegularSize := GetTypeSize(T)
	
	if (T.IsArray) {
		Type B := T
		
		B.PointerDepth -= 1
		
		return (GetTypeSize(B) * GetArrayType(T)->Length) As i16
	}
	
	return RegularSize
}
define i16 GetPointerDepth(Type T) {
	return T.PointerDepth
}

define i32 GetTypeStringLength(Type T) {
	return GetBaseType(T)->Name->Length + GetPointerDepth(T)
}
define i32 StringifyType(void* RawBuffer, Type T) {
	i8* Buffer := RawBuffer
	i32 Index := 0
	
	TypeInfo* Base := GetBaseType(T)
	
	if (Base->IsFunctionPointer) {
		FunctionPointerInfo* FunctionPointer := Base~>FunctionPointer
		
		Index := StringifyType(Buffer, FunctionPointer->ReturnType)
		Buffer[Index++] := '('
		
		for (i32 ParameterIndex := 0, ParameterIndex < FunctionPointer->ParameterCount, ParameterIndex++) {
			Type NextParameter := FunctionPointer->ParameterTypes[ParameterIndex]
			
			Index += StringifyType(&Buffer[Index], NextParameter)
			Buffer[Index++] := ','
			Buffer[Index++] := ' '
		}
		
		if (ParameterIndex != 0) {
			Index -= 2 ; Seek back over the trailing `, ` to overwrite it with `)\0`
		}
		
		Buffer[Index++] := ')'
	}
	else {
		SafeString* Name := Base->Name
		
		for (Index := 0, Index < Name->Length, Index += 1) {
			Buffer[Index] := Name->ASCIICharacterAt(Index)
		}
	}
	
	for (i32 Depth := 0, Depth < GetPointerDepth(T), Depth += 1) {
		Buffer[Index++] := '*'
	}
	
	Buffer[Index] := 0
	
	return Index
}

i8[100] PrintTypeBuffer

define void PrintType(Type TypeToPrint) {
	; Prints a type, including its pointer depth
	
	StringifyType(PrintTypeBuffer, TypeToPrint)
	
	Print("%s", PrintTypeBuffer)
}

define i8 TypeError(ASTNode* AtNode, Type Expected, i8* Message) {
	if !(AtNode) {
		return 1
	}
	
	ManualErrorMessagePrelude()
	
	Print("%s", Message)
	
	if (Expected As i64) != 0 {
		Print(", expected ")
		PrintType(Expected)
	}
	
	Print(", got ")
	PrintType(AtNode->ValueType)
	
	AtNode->Error(null)
	
	return 0
}

define i32 GetGenericRating(Type ForType) {
	TypeInfo* BaseType := GetBaseType(ForType)
	i16 PointerDepth := GetPointerDepth(ForType)
	
	i32 Result := -PointerDepth
	
	if !(BaseType->IsBuiltin) {
		Result += 10
	}
	
	return Result
}

define i8 CheckTypes(TypeInfo* VoidType, Type Source, Type Target, ASTNode* SourceNode) {
	if (SourceNode) {
		Source := SourceNode->ValueType
	}
	
	TypeInfo* SourceBase := GetBaseType(Source)
	TypeInfo* TargetBase := GetBaseType(Target)
	
	i16 SourceDepth := GetPointerDepth(Source)
	i16 TargetDepth := GetPointerDepth(Target)
	
	i16 SourceSize := GetTypeSize(Source)
	i16 TargetSize := GetTypeSize(Target)
	
	i8 SourceIsVoid := SourceBase->Is(VoidType)
	i8 TargetIsVoid := TargetBase->Is(VoidType)
	
	if (SourceDepth = TargetDepth) {
		if (SourceBase->Is(TargetBase)) {
			return 0
		}
		else if (TargetDepth = 1) {
			if (SourceIsVoid || TargetIsVoid) {
				return 0
			}
		}
		
		if (SourceBase->IsBuiltin && TargetBase->IsBuiltin) {
			if !(TargetDepth) {
				if (SourceSize <= TargetSize) {
					return 0
				}
			}
		}
		
		if (SourceBase->IsFunctionPointer && TargetBase->IsFunctionPointer) {
			FunctionPointerInfo* SourceFunctionPointer := SourceBase~>FunctionPointer
			FunctionPointerInfo* TargetFunctionPointer := TargetBase~>FunctionPointer
			
			if (CheckTypes(VoidType, SourceFunctionPointer->ReturnType, TargetFunctionPointer->ReturnType, null)) {
				return TypeError(SourceNode, Target, "Incompatible function pointer return types")
			}
			
			if (SourceFunctionPointer->ParameterCount != TargetFunctionPointer->ParameterCount) {
				return TypeError(SourceNode, Target, "Incompatible function pointer parameter counts")
			}
			
			for (i32 Index := 0, Index < SourceFunctionPointer->ParameterCount, Index++) {
				Type SourceParameterType := SourceFunctionPointer->ParameterTypes[Index]
				Type TargetParameterType := TargetFunctionPointer->ParameterTypes[Index]
				
				if (CheckTypes(VoidType, SourceParameterType, TargetParameterType, null)) {
					return TypeError(SourceNode, Target, "Incompatible function pointer parameter types")
				}
			}
			
			return 0
		}
		
		return TypeError(SourceNode, Target, "Incompatible types")
	}
	else if (SourceDepth && TargetIsVoid && TargetDepth = 1) {
		return 0
	}
	else if (SourceDepth || TargetDepth) {
		; Allow casting void* <> any function pointer
		
		if (SourceBase->IsFunctionPointer && TargetIsVoid && SourceDepth = 0 && TargetDepth = 1) {
			return 0
		}
		else if (TargetBase->IsFunctionPointer && SourceIsVoid && TargetDepth = 0 && SourceDepth = 1) {
			return 0
		}
		
		return TypeError(SourceNode, Target, "Incompatible pointer depths")
	}
	else if (SourceBase->IsStructType || TargetBase->IsStructType) {
		return TypeError(SourceNode, Target, "Incompatible struct type")
	}
	else if (TargetBase->IsBits || SourceBase->IsBits) {
		if (SourceSize > TargetSize) {
			return TypeError(SourceNode, Target, "Incompatible bits type size")
		}
		
		return 0
	}
	
	return 0
}

define i8 CheckTypeSignature(FunctionDefine* ForFunction, VariableInfo** AgainstParameters) {
	for (i32 ParameterIndex := 0, ParameterIndex < ForFunction->ParameterCount, ParameterIndex += 1) {
		Type ExpectedNext := ForFunction->Parameters[ParameterIndex]->Type
		Type ActualNext := AgainstParameters[ParameterIndex]->Type
		
		if (ActualNext != ExpectedNext) {
			return false
		}
	}
	
	return true
}