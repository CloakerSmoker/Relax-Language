define Type MakeType(TypeInfo* BackingType, i16 PointerDepth) {
	/* Functions as GetType except with a TypeInfo passed directly instead of being found by name */
	
	Type NewType := TYPE_NONE
	
	NewType.BaseType := BackingType As i64
	NewType.PointerDepth := PointerDepth

	return NewType
}
define Type MakeType(i64 BackingType, i16 PointerDepth) {
	return MakeType(BackingType As TypeInfo*, PointerDepth)
}

struct FunctionPointerInfo {
	Type ReturnType
	Type* ParameterTypes
	i32 ParameterCount
	i8 Attributes
}

enum TYPE_KIND {
	BUILTIN
	STRUCTURE
	BIT_FIELDS
	ENUMERATION
	FUNCTION_POINTER
	`INTERFACE`
}

struct TypeInfo {
	SourceContext* DefinedAt
	SafeString* Name
	QualifiedName* FullName
	
	union {
		HashMap Fields ; <StructField*>
		FunctionPointerInfo FunctionPointer
	}

	PointerArray* FieldsInOrder ; <StructField*>
	
	HashMap Methods
	HashMap StaticMethods

	union {
		InterfaceInfo* InterfaceInfo
		ClassInfo* ClassInfo
		
		struct {
			i32 EnumerationBase
			i32 EnumerationNamesOffset
		}
	}
	
	i16 Size
	TYPE_KIND Kind
	i8 IsIncomplete
	i8 IsClass
	i8 IsLinearEnumeration

/*
	i8 IsStructType,
	i8 IsBits,
	i8 IsBuiltin,
	i8 IsEnum,
	i8 IsFunctionPointer
*/
	
	define Type AsNonPointer() {
		return MakeType(this, 0)
	}
	define Type AsPointer(i16 Depth) {
		return MakeType(this, Depth)
	}
	define i8 Is(TypeInfo* Other) {
		return this->Name = Other->Name
	}
	define i8 Is(TYPE_KIND Kind) {
		return this->Kind = Kind
	}

	define void InitializeAggregate() {
		this~>Fields->Initialize()
		this->FieldsInOrder := PointerArray:New()
		
		this~>Methods->Initialize()
		this~>StaticMethods->Initialize()
	}

	i64 CachedTypeID

	define i64 GetTypeID() {
		if (this->CachedTypeID != 0) {
			return this->CachedTypeID
		}

		i8[100] Buffer
		i32 Length := FormatString(Buffer, 100, "%t", this->AsNonPointer())

		this->CachedTypeID := FNV1A(Buffer, Length)

		return this->CachedTypeID
	}
}
struct ArrayTypeInfo {
	TypeInfo* BaseType
	i16 Length
	
	static ArrayTypeInfo* New(TypeInfo* Base, i16 Length) {
		ArrayTypeInfo* this := Alloc(#ArrayTypeInfo)
		
		this->BaseType := Base
		this->Length := Length
		
		return this
	}
}

declare TypeInfo* GetBaseType(Type)

define Type MakeArrayType(Type ElementType, i16 ArrayLength) {
	Type Result := TYPE_NONE
	
	Result.IsArray := true
	Result.BaseType := ArrayTypeInfo:New(GetBaseType(ElementType), ArrayLength) As i64
	Result.PointerDepth := ElementType.PointerDepth + 1 As i16
	
	return Result
}

define ArrayTypeInfo* GetArrayType(Type T) {
	return T.BaseType As ArrayTypeInfo*
}
define TypeInfo* GetBaseType(Type T) {
	if (T.IsArray) {
		return GetArrayType(T)->BaseType
	}
	
	return T.BaseType As TypeInfo*
}
define i16 GetTypeSize(Type T) {
	if (T.PointerDepth) {
		return 8
	}
	else {
		return GetBaseType(T)->Size
	}
}
define i16 GetTypeStorageSize(Type T) {
	i16 RegularSize := GetTypeSize(T)
	
	if (T.IsArray) {
		Type B := T
		
		B.PointerDepth -= 1
		
		return (GetTypeSize(B) * GetArrayType(T)->Length) As i16
	}
	
	return RegularSize
}
define i16 GetPointerDepth(Type T) {
	return T.PointerDepth
}

struct InterfaceInfo {
	SafeString* Name

	PointerArray* Methods ; <FunctionDefine*>
	AVLTree* ImplementedBy ; <TypeInfo*>

	static self* New() {
		self* this := Alloc(#self)

		this->Methods := PointerArray:New()
		this->ImplementedBy := AVLTree:New(8)

		return this
	}
}

struct InterfaceImplementationInfo {
	SourceContext* Blame

	TypeInfo* ForType

	TypeInfo* ForInterface
	InterfaceInfo* ForInterfaceInfo

	PointerArray* Methods ; <FunctionDefine*>
	i32* StubLabels

	i32 VirtualFunctionTableLabel
	i32 SetupVirtualFunctionTableLabel

	i8 IsDerived

	static self* New(SourceContext* Blame, TypeInfo* ForType, TypeInfo* ForInterface) {
		self* this := Alloc(#self)

		this->Blame := Blame
		this->ForType := ForType
		this->ForInterface := ForInterface
		this->ForInterfaceInfo := ForInterface->InterfaceInfo

		this->Methods := PointerArray:New()
		this->StubLabels := Alloc(this->ForInterfaceInfo->Methods->Count() * #i32)

		return this
	}
}

struct ClassInfo {
	PointerArray* InterfacesInOrder ; <InterfaceImplementationInfo*>
	AVLTree* Interfaces ; <TypeInfo*, InterfaceImplementationInfo*>

	InterfaceImplementationInfo* IAnyImplementation

	static self* New() {
		self* this := Alloc(#self)

		this->InterfacesInOrder := PointerArray:New()
		this->Interfaces := AVLTree:New(#InterfaceImplementationInfo*)

		return this
	}
}

struct TypeNamespace {
	SourceContext* DefinedAt
	QualifiedName* Name

	TypeNamespace* Parent

	AVLTree* Children ; <FNV1A(i8*), TypeNamespace*>
	AVLTree* Entries ; <FNV1A(i8*), TypeInfo*>

	static self* NewRoot() {
		self* this := Alloc(#self)

		this->Name := QualifiedName:New()
		this->Name->Anchored := true

		this->Children := AVLTree:New(#TypeNamespace*)
		this->Entries := AVLTree:New(#TypeInfo*)

		return this
	}

	static self* New(TypeNamespace* Parent, Token* Name) {
		self* this := Alloc(#self)

		this->Name := Parent->Name->Clone()->Push(Name)
		this->DefinedAt := Name~>Context

		this->Parent := Parent

		this->Children := AVLTree:New(#TypeNamespace*)
		this->Entries := AVLTree:New(#TypeInfo*)

		return this
	}

	define TypeInfo* LookupEntry(Token* Name) {
		TypeInfo* Local := this->Entries->GetPointer(Name->StringValue->Hash())

		if (Local) {
			return Local
		}
		else if (this->Parent != null) {
			return this->Parent->LookupEntry(Name)
		}
		else {
			return null
		}
	}

	define TypeNamespace* FindChild(Token* Name) {
		i64 NameHash := Name->StringValue->Hash()
		TypeNamespace* Child := this->Children->GetPointer(NameHash)

		if (Child) {
			return Child
		}
		else if (this->Parent != null) {
			return this->Parent->FindChild(Name)
		}
		else {
			return null
		}
	}
	
	define void CheckDuplicates(Token* Name) {
		TypeInfo* DuplicateType := this->LookupEntry(Name)

		if (DuplicateType) {
			Name~>Context->Notify(NOTIFY_ERROR, "Name already defined")
			DuplicateType->DefinedAt->Notify(NOTIFY_FATAL, "Previous definition")
		}

		TypeNamespace* DuplicateChild := this->FindChild(Name)

		if (DuplicateChild) {
			Name~>Context->Notify(NOTIFY_ERROR, "Name already defined")
			DuplicateChild->DefinedAt->Notify(NOTIFY_FATAL, "Previous definition")
		}
	}

	define TypeNamespace* AddChild(Token* Name) {
		this->CheckDuplicates(Name)

		TypeNamespace* Child := self:New(this, Name)

		this->Children->InsertPointer(Name->StringValue->Hash(), Child)

		return Child
	}

	define void DefineEntry(Token* Name, TypeInfo* Value) {
		this->CheckDuplicates(Name)

		this->Entries->InsertPointer(Name->StringValue->Hash(), Value)
	}

	define void DefineEntry(SafeString* Name, TypeInfo* Value) {
		this->Entries->InsertPointer(Name->Hash(), Value)
	}

	define void DefineEntry(i8* Name, TypeInfo* Value) {
		this->Entries->InsertPointer(FNV1A(Name), Value)
	}
	
	define void DeleteEntry(i8* Name) {
		this->Entries->Remove(FNV1A(Name))
	}

	static void Indent(i32 Depth) {
		for (i32 Index := 0, Index < Depth, Index++) {
			Print("\t")
		}
	}

	define void Dump(i32 Depth) {
		self:Indent(Depth)

		if (this->Parent) {
			Token* Name := this->Name->Parts->Last()
			Print("%s:\n", Name->StringValue->Buffer)
		}
		else {
			Print("<root>:\n")
		}

		i32 Count := this->Entries->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			self:Indent(Depth + 1)

			TypeInfo* Info := this->Entries->PointerAt(Index)

			if (Info->Is(TYPE_KIND_BIT_FIELDS)) {
				Print("bits")
			}
			else if (Info->Is(TYPE_KIND_BUILTIN)) {
				Print("builtin")
			}
			else if (Info->Is(TYPE_KIND_ENUMERATION)) {
				Print("enum")
			}
			else if (Info->Is(TYPE_KIND_STRUCTURE)) {
				Print("struct")
			}

			Print(" %s\n", Info->Name->Buffer)
		}

		i32 Count := this->Children->Count()

		for (i32 Index := 0, Index < Count, Index++) {
			TypeNamespace* Child := this->Children->PointerAt(Index)

			Child->Dump(Depth + 1)
		}
	}
}

define i32 StringifyType(void* RawBuffer, Type T) {
	i8* Buffer := RawBuffer
	i32 Index := 0
	
	TypeInfo* Base := GetBaseType(T)
	
	if (Base->Is(TYPE_KIND_FUNCTION_POINTER)) {
		FunctionPointerInfo* FunctionPointer := Base~>FunctionPointer
		
		if (FunctionPointer->Attributes & FUNCTION_ATTRIBUTE_USE_X64) {
			Buffer[Index++] := '('
		}

		Buffer[Index++] := '('
		Index += StringifyType(&Buffer[Index], FunctionPointer->ReturnType)
		Buffer[Index++] := ')'
		Buffer[Index++] := '('
		
		for (i32 ParameterIndex := 0, ParameterIndex < FunctionPointer->ParameterCount, ParameterIndex++) {
			Type NextParameter := FunctionPointer->ParameterTypes[ParameterIndex]
			
			Index += StringifyType(&Buffer[Index], NextParameter)
			Buffer[Index++] := ','
			Buffer[Index++] := ' '
		}
		
		if (ParameterIndex != 0) {
			Index -= 2 ; Seek back over the trailing `, ` to overwrite it with `)\0`
		}
		
		Buffer[Index++] := ')'
		
		if (FunctionPointer->Attributes & FUNCTION_ATTRIBUTE_USE_X64) {
			Buffer[Index++] := 'x'
			Buffer[Index++] := '6'
			Buffer[Index++] := '4'
			Buffer[Index++] := ')'
		}
	}
	else {
		SafeString* Name := Base->Name
		
		for (Index := 0, Index < Name->Length, Index += 1) {
			Buffer[Index] := Name->ASCIICharacterAt(Index)
		}
	}
	
	for (i32 Depth := 0, Depth < GetPointerDepth(T), Depth += 1) {
		Buffer[Index++] := '*'
	}
	
	Buffer[Index] := 0

	;Print("ST = %s\n", Buffer)
	
	return Index
}

define i32 GetTypeStringLength(Type T) {
	i8[100] Buffer

	return StringifyType(Buffer, T)
}

define void DoTypePrint(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	Type T := Parameters[*ParameterIndex] As Type
	
	i8[100] Buffer
	i32 Length := StringifyType(Buffer, T)

	for (i32 Index := 0, Index < Length, Index++) {
		this->Print("%c", Buffer[Index])
	}
	
	*ParameterIndex += 1
}

PrintFormatPrototype TypeFormatPrototype {
	Name: "t",
	Format: &DoTypePrint
}

i32 TYPE_FORMAT_PROTOTYPE_ID := AddPrintFormat(&TypeFormatPrototype)

define i8 TypeIsCallable(Type T) {
	return GetPointerDepth(T) = 0 && GetBaseType(T)->Is(TYPE_KIND_FUNCTION_POINTER)
}

i8[100] PrintTypeBuffer

define void PrintType(Type TypeToPrint) {
	; Prints a type, including its pointer depth
	
	StringifyType(PrintTypeBuffer, TypeToPrint)
	
	Print("%t", TypeToPrint)
}

define i8 TypeError(ASTNode* AtNode, Type Expected, i8* Message) {
	if !(AtNode) {
		return 1
	}
	
	if (Expected As i64) != 0 {
		AtNode~>Context->Error("%s, expected %t, got %t", Message, Expected, AtNode->ValueType)
	}
	else {
		AtNode~>Context->Error("%s, got %t", Message, AtNode->ValueType)
	}
	
	return 0
}

define i32 GetGenericRating(Type ForType) {
	TypeInfo* BaseType := GetBaseType(ForType)
	i16 PointerDepth := GetPointerDepth(ForType)
	
	i32 Result := -PointerDepth
	
	if !(BaseType->Is(TYPE_KIND_BUILTIN)) {
		Result += 10
	}
	
	return Result
}

define i8 CheckTypes(TypeInfo* VoidType, Type Source, Type Target, ASTNode* SourceNode) {
	if (SourceNode) {
		Source := SourceNode->ValueType
	}
	
	TypeInfo* SourceBase := GetBaseType(Source)
	TypeInfo* TargetBase := GetBaseType(Target)
	
	i16 SourceDepth := GetPointerDepth(Source)
	i16 TargetDepth := GetPointerDepth(Target)
	
	i16 SourceSize := GetTypeSize(Source)
	i16 TargetSize := GetTypeSize(Target)
	
	i8 SourceIsVoid := SourceBase->Is(VoidType)
	i8 TargetIsVoid := TargetBase->Is(VoidType)
	
	if (SourceDepth = TargetDepth) {
		if (SourceBase->Is(TargetBase)) {
			return 0
		}
		else if (TargetDepth = 1) {
			if (SourceIsVoid || TargetIsVoid) {
				return 0
			}
		}
		
		if (SourceBase->Is(TYPE_KIND_BUILTIN) && TargetBase->Is(TYPE_KIND_BUILTIN)) {
			if !(TargetDepth) {
				if (SourceSize <= TargetSize) {
					return 0
				}
			}
		}
		
		if (SourceBase->Is(TYPE_KIND_FUNCTION_POINTER) && TargetBase->Is(TYPE_KIND_FUNCTION_POINTER)) {
			FunctionPointerInfo* SourceFunctionPointer := SourceBase~>FunctionPointer
			FunctionPointerInfo* TargetFunctionPointer := TargetBase~>FunctionPointer
			
			if (CheckTypes(VoidType, SourceFunctionPointer->ReturnType, TargetFunctionPointer->ReturnType, null)) {
				return TypeError(SourceNode, Target, "Incompatible function pointer return types")
			}
			
			if (SourceFunctionPointer->ParameterCount != TargetFunctionPointer->ParameterCount) {
				return TypeError(SourceNode, Target, "Incompatible function pointer parameter counts")
			}
			
			for (i32 Index := 0, Index < SourceFunctionPointer->ParameterCount, Index++) {
				Type SourceParameterType := SourceFunctionPointer->ParameterTypes[Index]
				Type TargetParameterType := TargetFunctionPointer->ParameterTypes[Index]
				
				if (CheckTypes(VoidType, SourceParameterType, TargetParameterType, null)) {
					return TypeError(SourceNode, Target, "Incompatible function pointer parameter types")
				}
			}
			
			return 0
		}

		TypeInfo* Left := TargetBase
		TypeInfo* Right := SourceBase

		if (TargetBase->Is(TYPE_KIND_INTERFACE)) {
			Left := SourceBase
			Right := TargetBase
		}

		;Print("%t == %t?\n", Left, Right)
		;Print("%i, %i, %i\n", Left->Kind, Left->IsClass, Right->Kind)

		if (Left->Is(TYPE_KIND_STRUCTURE) && Left->IsClass && Right->Is(TYPE_KIND_INTERFACE)) {
			;Print("Class -> Interface\n")

			;Left->ClassInfo->Interfaces->Print()

			if (Left->ClassInfo->Interfaces->Has(Right As i64)) {
				return 0
			}
		}

		return TypeError(SourceNode, Target, "Incompatible types")
	}
	else if (SourceDepth && TargetIsVoid && TargetDepth = 1) {
		return 0
	}
	else if (SourceDepth || TargetDepth) {
		; Allow casting void* <> any function pointer
		
		if (SourceBase->Is(TYPE_KIND_FUNCTION_POINTER) && TargetIsVoid && SourceDepth = 0 && TargetDepth = 1) {
			return 0
		}
		else if (TargetBase->Is(TYPE_KIND_FUNCTION_POINTER) && SourceIsVoid && TargetDepth = 0 && SourceDepth = 1) {
			return 0
		}
		
		return TypeError(SourceNode, Target, "Incompatible pointer depths")
	}
	else if (SourceBase->Is(TYPE_KIND_STRUCTURE) || TargetBase->Is(TYPE_KIND_STRUCTURE)) {
		return TypeError(SourceNode, Target, "Incompatible struct type")
	}
	else if (TargetBase->Is(TYPE_KIND_BIT_FIELDS) || SourceBase->Is(TYPE_KIND_BIT_FIELDS)) {
		if (SourceSize > TargetSize) {
			return TypeError(SourceNode, Target, "Incompatible bits type size")
		}
		
		return 0
	}
	
	return 0
}

define i8 AreTypesEqual(Type Left, Type Right) {
	if (GetPointerDepth(Left) != GetPointerDepth(Right)) {
		return false
	}

	TypeInfo* LeftBase := GetBaseType(Left)
	TypeInfo* RightBase := GetBaseType(Right)

	if (LeftBase->Is(TYPE_KIND_FUNCTION_POINTER) && RightBase->Is(TYPE_KIND_FUNCTION_POINTER)) {
		;Print("fptr equal? %t == %t ?\n", Left, Right)
	
		FunctionPointerInfo* LeftPointer := LeftBase~>FunctionPointer
		FunctionPointerInfo* RightPointer := RightBase~>FunctionPointer

		if (LeftPointer->Attributes != RightPointer->Attributes) {
			return false
		}

		if !(AreTypesEqual(LeftPointer->ReturnType, RightPointer->ReturnType)) {
			return false
		}

		if (LeftPointer->ParameterCount != RightPointer->ParameterCount) {
			return false
		}

		for (i32 ParameterIndex := 0, ParameterIndex < LeftPointer->ParameterCount, ParameterIndex++) {
			Type LeftParameter := LeftPointer->ParameterTypes[ParameterIndex]
			Type RightParameter := RightPointer->ParameterTypes[ParameterIndex]
			
			if !(AreTypesEqual(LeftParameter, RightParameter)) {
				return false
			}
		}

		return true
	}

	return Left = Right
}

define i8 CheckTypeSignature(FunctionDefine* ForFunction, VariableInfo** AgainstParameters) {
	for (i32 ParameterIndex := 0, ParameterIndex < ForFunction->ParameterCount, ParameterIndex += 1) {
		Type ExpectedNext := ForFunction->Parameters[ParameterIndex]->Type
		Type ActualNext := AgainstParameters[ParameterIndex]->Type
		
		if !(AreTypesEqual(ActualNext, ExpectedNext)) {
			return false
		}
	}
	
	return true
}