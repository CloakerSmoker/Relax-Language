; Precedence/expression parsing helpers region

i8 NONE_ASSOCIATIVE := 0
i8 LEFT_ASSOCIATIVE := 1
i8 RIGHT_ASSOCIATIVE := 2

define i8 GetOperatorPrecedence(Token* ForOperator) {
	; Gets the precedence of a given operator
	
	i8 Operator := (ForOperator->Value) As i8
	
	if (Operator >= PRECEDENCE_12) {
		return 12
	}
	else if (Operator >= PRECEDENCE_11) {
		return 11
	}
	else if (Operator >= PRECEDENCE_10) {
		return 10
	}
	else if (Operator >= PRECEDENCE_9) {
		return 9
	}
	else if (Operator >= PRECEDENCE_8) {
		return 8
	}
	else if (Operator >= PRECEDENCE_7) {
		return 7
	}
	else if (Operator >= PRECEDENCE_6) {
		return 6
	}
	else if (Operator >= PRECEDENCE_5) {
		return 5
	}
	else if (Operator >= PRECEDENCE_4) {
		return 4
	}
	else if (Operator >= PRECEDENCE_3) {
		return 3
	}
	else if (Operator >= PRECEDENCE_2) {
		return 2
	}
	else if (Operator >= PRECEDENCE_1) {
		return 1
	}
	else {
		return 0
	}
}

define i8 GetUnaryOperatorPrecedence(Token* ForOperator) {
	; Returns the precedence of an operator when it is used as a prefix/unary operator
	
	i8 Operator := (ForOperator->Value) As i8
	
	if (Operator = OPERATOR_STAR) {
		return 10
	}
	else if (Operator = OPERATOR_AND) {
		return 10
	}
	else if (Operator = OPERATOR_BANG) {
		return 10
	}
	else if (Operator = OPERATOR_MINUS || Operator = OPERATOR_TILDE) {
		return 10
	}
	else if (Operator = OPERATOR_MINUS_MINUS || Operator = OPERATOR_PLUS_PLUS) {
		return 10
	}
	else if (Operator = OPERATOR_POUND) {
		return 12
	}
	
	return 0 ; Returns 0 when the operator is not a unary operator
}

define i8 IsPrefixOperator(Token* ForOperator) {
	; Used to determine if an operator is a unary operator
	
	return GetUnaryOperatorPrecedence(ForOperator) != 0
}

define i8 GetOperatorAssociation(Token* ForOperator) {
	; Returns RIGHT_ASSOCIATIVE/LEFT_ASSOCIATIVE for the operator passed
	
	i8 Precedence := GetOperatorPrecedence(ForOperator)
	
	if (Precedence = 1 || Precedence = 3) {
		return RIGHT_ASSOCIATIVE
	}
	else {
		return LEFT_ASSOCIATIVE
	}
}

; EndRegion

; AST node type values region

i8 NODE_TYPE_NONE := 0
i8 NODE_TYPE_TOKEN := 1

i8 NODE_TYPE_UNARY := 2
i8 NODE_TYPE_BINARY := 3
i8 NODE_TYPE_CALL := 4

i8 NODE_TYPE_DEFINE := 6
i8 NODE_TYPE_DLLIMPORT := 7

i8 NODE_TYPE_IF := 8

i8 NODE_TYPE_FOR := 9
i8 NODE_TYPE_WHILE := 10
i8 NODE_TYPE_LOOP := 11
i8 NODE_TYPE_CONTINUEBREAK := 12

i8 NODE_TYPE_RETURN := 13
i8 NODE_TYPE_EXPRESSION := 14

i8 NODE_TYPE_VARIABLE := 15
i8 NODE_TYPE_INTEGER := 16
i8 NODE_TYPE_STRING := 17

i8 NODE_TYPE_TYPE := 18 /* For when an expression has an operand which is a literal type (like with 'as') */
i8 NODE_TYPE_STRUCT_ACCESS := 19
i8 NODE_TYPE_IDENTIFIER := 20

i8 NODE_TYPE_ASSEMBLY := 21

; Dedicated zero node type, to ensure that the actual ValueType of a zero (inside of a NODE_TYPE_INTEGER) 
;  doesn't get optimized into `i8`, since that's the smallest type that could hold `0`.
i8 NODE_TYPE_ZERO := 22

i8 NODE_TYPE_TRY := 23

; Since type sizes can change at parse-time inside of struct methods, the actually resolution
;  of a type's size needs to be deferred until compile-time
i8 NODE_TYPE_GET_TYPE_SIZE := 24

i8 NODE_TYPE_EXPRESSION_BLOCK := 25
i8 NODE_TYPE_BLOCK := 26

i8 NODE_TYPE_CAST := 27

; EndRegion

; AST node structs region

; Unary

struct UnaryExpression {
	Token* Operator,
	ASTNode* Operand
}

; Binary

struct BinaryExpression {
	ASTNode* Left,
	Token* Operator,
	ASTNode* Right
}

; Struct Access

struct StructField {
	ErrorContext* DefinedAt,
	SafeString* Name,
	Type ValueType,
	
	union {
		i32 Extra
		i32 DWARFTypeOffset
	}
	
	union {
		i16 Offset,
		i32 EnumValue
	}
	
	i8 BitStartIndex,
	i8 BitEndIndex
}

struct StructAccessExpression {
	ASTNode* Left,
	Token* Operator,
	StructField* TargetField
}

; Function Call

i8 BUILTIN_NONE := 0
i8 BUILTIN_SYSCALL := 1
i8 BUILTIN_BREAKPOINT := 2
i8 BUILTIN_FUNCTION_POINTER := 3

struct CallExpression {
	union {
		FunctionDefine* TargetFunction,
		ASTNode* CallToFunctionPointer
	}
	ASTNode** Parameters,
	i32 ParameterCount,
	i8 BuiltinID
}

; Blocks

struct CodeBlock {
	ASTNode** Statements,
	i16 StatementCount
	i8 HasUnconditionalReturn
}

; Misc Control Flow Statements

struct IfGroup {
	ASTNode** Conditions,
	CodeBlock** Bodies,
	CodeBlock* ElseBranch,
	i16 BranchCount
}

struct ForLoop {
	ASTNode* Initializer,
	ASTNode* Condition,
	ASTNode* Step,
	CodeBlock* Body
}

struct WhileLoop {
	ASTNode* Condition,
	CodeBlock* Body
}

struct TryCatch {
	CodeBlock* Body,
	CodeBlock* CatchBody,
	VariableInfo* CatchCodeVariable
}

; EndRegion

; Assembly Region

; Operand type flags, R = register, M = register indirect or SIB (with a disp on either)

i8 OP_M_OFFSET := 0
i32 OP_M8 := 0x1
i32 OP_M16 := 0x2
i32 OP_M32 := 0x4
i32 OP_M64 := 0x8

i8 OP_R_OFFSET := 4
i32 OP_R8 := 0x10
i32 OP_R16 := 0x20
i32 OP_R32 := 0x40
i32 OP_R64 := 0x80

i8 OP_I_OFFSET := 8
i32 OP_I8 := 0x100
i32 OP_I16 := 0x200
i32 OP_I32 := 0x400
i32 OP_I64 := 0x800
i32 OP_LABEL := 0x1000

i32 OP_M := OP_M8 | OP_M16 | OP_M32 | OP_M64
i32 OP_R := OP_R8 | OP_R16 | OP_R32 | OP_R64
i32 OP_HR := OP_R16 | OP_R32 | OP_R64

; Prepacked operand types

i32 O_M := OP_R | OP_M 				; Register or memory reference
i32 O_RM := OP_R | (O_M << 16)		; RM encoding
i32 O_MR := O_M | (OP_R << 16)		; MR encoding
i32 O_I := OP_I8 | OP_I16 | OP_I32 	; Imm8,Imm16,Imm32 encoding
i32 O_MI := O_M | (O_I << 16) 		; MI encoding
i32 O_L := OP_LABEL					; rel32 encoding, references a label

i32 E_NO_RM := 0x1				; The instruction does not use the ModRM byte
i32 E_RM_IS_OP1 := 0x2			; The RM field of the ModRM byte encodes the first operand
i32 E_RM_IS_OP2 := 0x4			; The RM field of the ModRM byte encodes the second operand 
i32 E_OP_EXT := 0x8				; The Reg field of the ModRM byte is an opcode extension contained in Instruction.Extra
i32 E_IMM8 := 0x10				; Encode a 8 bit immediate value
i32 E_IMM32 := 0x20				; Encode a 32 bit immediate value
i32 E_IMM64 := 0x40				; Encode a 64 bit immediate value
i32 E_REG_IN_OPCODE := 0x80		; Encode the register operand in the opcode
i32 E_DIF_SIZES := 0x100 		; Allow two different register sizes to be used
i32 E_BYTE_OPCODE_N1 := 0x200 	; The byte opcode for this instruction is not the regular opcode minus 1
i32 E_IMM_X := 0x400			; The immediate operand is the size of the operand
i32 E_LABEL := 0x800			; The operand is a label
i32 E_2_BYTE_OPCODE := 0x1000 	; The instruction has a two byte opcode
i32 E_REX_W := 0x2000			; The instruction needs REX.W
i32 E_NEEDS_66 := 0x4000		; The instruction needs the 0x66 prefix

struct Instruction {
	union {
		i8[2] Opcode
		i16 PackedOpcode
	}
	
	i32 OperandMask
	
	i16 Flags
	i16 Extra
	
	i8 NameLength
	i8[0] Name
	
	define Instruction* Next() {
		i32 Size := this->NameLength + 1 + #Instruction
		
		return this + Size
	}
}

struct InstructionListEntry {
	Instruction Instruction
	InstructionListEntry* Next
}

struct SIBInfo {
	i8 BaseRegister,
	i8 IndexRegister,
	i8 Scale
}

struct InstructionOperand {
	ErrorContext Context,
	
	i32 Type,
	i32 Size,
	i8 HasSIB,
	i8 ReferencesFunction,
	i8 DispSize,
	
	union {
		i8 RegisterNumber,
		SIBInfo SIBValue
	},
	
	union {
		i32 DispValue,
		i64 IntegerValue,
		i32 LabelNumber,
		FunctionDefine* FunctionReference
	}
	
	define void Error(i8* Message) {
		this~>Context->Error(Message)
	}
	define void Warn(i8* Message) {
		this~>Context->Warn(Message)
	}
}

struct AssemblyBlock {
	i32 InstructionCount,
	InstructionNode** Instructions,
	HashMap Labels
	
	ASTNode*[16] RegisterValues
}

i32 SHIM_SIZEOF_ASSEMBLYBLOCK := 8 + 8 + #HashMap + 16 * 8

i8 INSTRUCTION_REGULAR := 0
i8 INSTRUCTION_LABEL := 1
i8 INSTRUCTION_LABEL_INCOMPLETE := 2

struct InstructionNode {
	ErrorContext Context,
	i8 Type,
	
	union {
		Instruction* Base,
		SafeString* LabelName
	},
	
	union {
		InstructionOperand** Operands,
		i32 LabelNumber
	}
	
	define void Error(i8* Message) {
		this~>Context->Error(Message)
	}
	define void Warn(i8* Message) {
		this~>Context->Warn(Message)
	}
}

; EndRegion

; Function Definition Region

i8 FUNCTION_IS_METHOD := 1
i8 FUNCTION_IS_STATIC_METHOD := 2

i8 FUNCTION_ATTRIBUTE_USE_X64 := 1
i8 FUNCTION_ATTRIBUTE_ASSEMBY := 2
i8 FUNCTION_ATTRIBUTE_VARIADIC := 4 

declare i32 GetTypeStringLength(Type)
declare void StringifyType(void*, Type)
declare void PrintType(Type)

struct FunctionDefine {
	ErrorContext Context,
	
	FunctionDefine* Next,
	SafeString* Name,
	
	i16 ParameterCount,
	VariableInfo** Parameters,
	
	VariableHashMap Locals,
	Type ReturnType,
	
	i8 IsImported,
	
	union {
		CodeBlock* Body,
		AssemblyBlock* AssemblyBody,
		SafeString* ImportFileName
	},
	union {
		i8* StringBuffer,
		void* ConstantsBuffer,
		SafeString* ImportFunctionName
	},
	
	SafeString* MethodOfTypeName,
	
	i8 Attributes,
	i8 HasFullDefinition,
	i32 LabelNumber,
	
	union {
		i32 StringBufferSize,
		i32 ConstantBufferSize
	}
	
	i32 CallCount,
	i8 UsesGlobals,
	i8 IsMethod,
	
	i32 CodeOffset,
	
	i8 TempValue
	
	
	define i32 GetStringLength() {
		i32 Length := this->Name->Length + 2 + 1
		
		if (this->MethodOfTypeName) {
			Length += this->MethodOfTypeName->Length + 1
		}
		
		for (i32 Index := 0, Index < this->ParameterCount, Index += 1) {
			if (Index = 0 && this->IsMethod = FUNCTION_IS_METHOD) {
				; Skip the `this` parameter
				
				continue
			}
			
			VariableInfo* NextParameter := this->Parameters[Index]
			
			if (NextParameter->IsVariadic) {
				Length += 3
			}
			else {
				Length += GetTypeStringLength(NextParameter->Type)
			}
			
			if (Index + 1 != this->ParameterCount) {
				Length += 2
			}
		}
		
		return Length
	}
	define void StringifyInto(void* IntoRawBuffer, i8 StaticMethodSeperatorCharacter) {
		i8* Buffer := IntoRawBuffer
		i32 Offset := 0
		
		if (this->MethodOfTypeName) {
			i32 MethodOfTypeNameLength := this->MethodOfTypeName->Length
			
			for (i32 MethodTypeNameIndex := 0, MethodTypeNameIndex < MethodOfTypeNameLength, MethodTypeNameIndex += 1) {
				Buffer[MethodTypeNameIndex] := this->MethodOfTypeName->ASCIICharacterAt(MethodTypeNameIndex)
			}
			
			Offset += MethodOfTypeNameLength
		}
		
		if (this->IsMethod) {
			if (this->IsMethod = FUNCTION_IS_STATIC_METHOD) {
				Buffer[Offset] := StaticMethodSeperatorCharacter
			}
			else {
				Buffer[Offset] := '.'
			}
			
			Offset += 1
		}
		
		i32 NameLength := this->Name->Length
		
		for (i32 NameIndex := 0, NameIndex < NameLength, NameIndex += 1) {
			Buffer[Offset + NameIndex] := this->Name->ASCIICharacterAt(NameIndex)
		}
		
		Offset += NameLength
		
		Buffer[Offset] := '('
		Offset += 1
		
		for (i32 ParameterIndex := 0, ParameterIndex < this->ParameterCount, ParameterIndex += 1) {
			if (ParameterIndex = 0 && this->IsMethod = FUNCTION_IS_METHOD) {
				; Skip the `this` parameter (but only if we're dealing with a plain method)
				
				continue
			}
			
			VariableInfo* NextParameter := this->Parameters[ParameterIndex]
			
			if (NextParameter->IsVariadic) {
				MoveMemory(&Buffer[Offset], "...", 3)
				Offset += 3
			}
			else {
				Type ParameterType := NextParameter->Type
			
				StringifyType(&Buffer[Offset], ParameterType)
				Offset += GetTypeStringLength(ParameterType)
			}
			
			if (ParameterIndex + 1 < this->ParameterCount) {
				Buffer[Offset] := ','
				Buffer[Offset + 1] := ' '
				Offset += 2
			}
		}
		
		Buffer[Offset] := ')'
		Offset += 1
		
		Buffer[Offset] := 0
		
		;Print("%s\n", Buffer)
	}
	define void StringifyInto(void* IntoRawBuffer) {
		this->StringifyInto(IntoRawBuffer, ':')
	}
}

; EndRegion

; Actual ASTNode struct region

struct ASTNode {	
	ErrorContext Context,
	
	union {
		void* TrueNode,
		
		UnaryExpression* UnaryNode,
		BinaryExpression* BinaryNode,
		CallExpression* CallNode,
		StructAccessExpression* AccessNode,
		
		IfGroup* IfNode,
		ForLoop* ForNode,
		WhileLoop* WhileNode,
		CodeBlock* LoopBody,
		i8 IsContinue,
		
		FunctionDefine* DefineNode,
		
		ASTNode* ReturnExpression,
		
		ASTNode* ExpressionStatement,
		
		SafeString* StringValue,
		VariableInfo* VariableValue,
		i64 IntegerValue,
		Type TypeValue,
		i32 StringOffsetValue,
		
		AssemblyBlock* AssemblyValue,
		TryCatch* TryNode,
		
		CodeBlock* BlockValue
		
		ASTNode* CastFromValue
	},
	
	i32 LastVisitor
	Type ValueType
	i8 NodeType
	
	static ASTNode* New(i8 NewNodeType, void* NewNodeTrueNode, Type NewNodeValueType) {
		ASTNode* this := Alloc(#ASTNode)
		
		this->NodeType := NewNodeType
		this->TrueNode := NewNodeTrueNode
		this->ValueType := NewNodeValueType
		
		return this
	}
	static ASTNode* New(i8 NewNodeType, i64 NewNodeTrueNode, Type NewNodeValueType) {
		return ASTNode:New(NewNodeType, NewNodeTrueNode As void*, NewNodeValueType)
	}
	static ASTNode* New(i8 NewNodeType, void* NewNodeTrueNode) {
		return ASTNode:New(NewNodeType, NewNodeTrueNode, TYPE_NONE)
	}
	static ASTNode* New(i8 NewNodeType, i64 NewNodeTrueNode) {
		return ASTNode:New(NewNodeType, NewNodeTrueNode As void*, TYPE_NONE)
	}
	
	static ASTNode* NewCallNode(ASTNode** Parameters, i32 ParameterCount, CallExpression** OutResult, ErrorContext* StartContext, ErrorContext* EndContext) {
		CallExpression* Result := Alloc(#CallExpression) As CallExpression*
		Result->Parameters := Parameters
		Result->ParameterCount := ParameterCount
		
		*OutResult := Result
		
		ASTNode* ResultNode := ASTNode:New(NODE_TYPE_CALL, Result, TYPE_NONE)
		
		ResultNode~>Context->Clone(StartContext)->Merge(EndContext)
		
		return ResultNode
	}
	
	define i8 IsStorageValue() {
		;this~>Context->Warn("ISV")
		
		if (this->NodeType = NODE_TYPE_UNARY) {
			return this->UnaryNode->Operator->Value = OPERATOR_STAR
		}
		else if (this->NodeType = NODE_TYPE_BINARY) {
			return this->BinaryNode->Operator->Value = OPERATOR_OPEN_BRACKET
		}
		else if (this->NodeType = NODE_TYPE_STRUCT_ACCESS) {
			return this->AccessNode->Operator->Value != OPERATOR_TILDE_GREATER
		}
		else {
			return this->NodeType = NODE_TYPE_VARIABLE
		}
	}
	
	define void Error(i8* Message) {
		this~>Context->Error(Message)
	}
	define void Warn(i8* Message) {
		this~>Context->Warn(Message)
	}
	
	define void Free() {
		Free(this)
	}
}

; EndRegion

; ASTVisitor region

i32 NextASTVisitorID := 1

struct ASTVisitor {
	void*(ASTVisitor*, ASTNode*) VisitFunction
	void*(ASTVisitor*, CodeBlock*) BlockVisitFunction
	i64 State
	i32 NodeTypeMask
	i32 ID
	
	static ASTVisitor* New(void*(ASTVisitor*, ASTNode*) VisitFunction) {
		ASTVisitor* this := Alloc(#ASTVisitor)
		
		this->VisitFunction := VisitFunction
		this->ID := NextASTVisitorID
		
		NextASTVisitorID += 1
		
		return this
	}
	
	define i32 IsTypeAllowed(i8 NodeType) {
		return !!(this->NodeTypeMask & (1 << NodeType))
	}
	define void AllowType(i8 NodeType) {
		this->NodeTypeMask := this->NodeTypeMask | (1 << NodeType)
	}
	
	define void SetState(i64 State) {
		this->State := State
	}
	define i64 GetState() {
		return this->State
	}
	
	define void SetVisitFunction(void* Function) {
		this->VisitFunction := Function
	}
	define void SetBlockVisitFunction(void* Function) {
		this->BlockVisitFunction := Function
	}
	
	declare void VisitNodes(...),
	declare void RawVisitNodes(i64, ASTNode**),
	
	define void RawVisitBlocks(i64 Count, CodeBlock** Blocks) {
		for (i32 Index := 0, Index < Count, Index += 1) {
			CodeBlock* Next := Blocks[Index]
			
			this->RawVisitNodes(Next->StatementCount, Next->Statements)

			if (this->BlockVisitFunction != null) {
				this->BlockVisitFunction(Next)
			}
		}
	}
	define void VisitBlocks(... Blocks) {
		this->RawVisitBlocks(Blocks[0], (Blocks + 8) As CodeBlock**)
	}
	define void VisitChildren(ASTNode* Node) {
		Node->LastVisitor := this->ID
		
		i8 NodeType := Node->NodeType
		
		if (NodeType = NODE_TYPE_UNARY) {
			this->VisitNodes(Node->UnaryNode->Operand)
		}
		else if (NodeType = NODE_TYPE_BINARY) {
			this->VisitNodes(Node->BinaryNode->Left, Node->BinaryNode->Right)
		}
		else if (NodeType = NODE_TYPE_CALL) {
			this->RawVisitNodes(Node->CallNode->ParameterCount, Node->CallNode->Parameters)
		}
		else if (NodeType = NODE_TYPE_STRUCT_ACCESS) {
			this->VisitNodes(Node->AccessNode->Left)
		}
		else if (NodeType = NODE_TYPE_IF) {
			this->RawVisitNodes(Node->IfNode->BranchCount, Node->IfNode->Conditions)
			this->RawVisitBlocks(Node->IfNode->BranchCount, Node->IfNode->Bodies)
			
			if (Node->IfNode->ElseBranch) {
				this->VisitBlocks(Node->IfNode->ElseBranch)
			}
		}
		else if (NodeType = NODE_TYPE_WHILE) {
			this->VisitNodes(Node->WhileNode->Condition)
			this->VisitBlocks(Node->WhileNode->Body)
		}
		else if (NodeType = NODE_TYPE_FOR) {
			this->VisitNodes(Node->ForNode->Initializer, Node->ForNode->Condition, Node->ForNode->Step)
			this->VisitBlocks(Node->ForNode->Body)
		}
		else if (NodeType = NODE_TYPE_LOOP) {
			this->VisitBlocks(Node->LoopBody)
		}
		else if (NodeType = NODE_TYPE_RETURN) {
			this->VisitNodes(Node->ReturnExpression)
		}
		else if (NodeType = NODE_TYPE_EXPRESSION) {
			this->VisitNodes(Node->ExpressionStatement)
		}
		else if (NodeType = NODE_TYPE_EXPRESSION_BLOCK) {
			this->VisitBlocks(Node->BlockValue)
		}
		else if (NodeType = NODE_TYPE_TRY) {
			this->VisitBlocks(Node->TryNode->Body)
			
			if (Node->TryNode->CatchBody) {
				this->VisitBlocks(Node->TryNode->CatchBody)
			}
		}
	}
	
	define void RawVisitNodes(i64 Count, ASTNode** Nodes) {
		for (i32 Index := 0, Index < Count, Index += 1) {
			ASTNode* Node := Nodes[Index]
			
			if (Node->LastVisitor = this->ID) {
				continue
			}
			
			Node->LastVisitor := this->ID
			
			if (this->IsTypeAllowed(Node->NodeType)) {
				this->VisitFunction(Node)
			}
			else {
				this->VisitChildren(Node)
			}
		}
	}
	define void VisitNodes(... Nodes) {
		this->RawVisitNodes(Nodes[0], (Nodes + 8) As ASTNode**)
	}
}

; EndRegion
