i32 NextASTVisitorID := 1

struct ASTVisitor {
	void*(ASTVisitor*, ASTNode*) VisitFunction
	void*(ASTVisitor*, CodeBlock*) BlockVisitFunction
	void*(ASTVisitor*, FunctionDefine*) FunctionVisitFunction

	ParserState* Parser
	i64 State
	i32 NodeTypeMask
	i32 ID
	
	static ASTVisitor* New(ParserState* Parser, void*(ASTVisitor*, ASTNode*) VisitFunction) {
		ASTVisitor* this := Alloc(#ASTVisitor)
		
		this->VisitFunction := VisitFunction
		this->Parser := Parser

		this->ID := NextASTVisitorID++
		
		return this
	}
	
	define i32 IsTypeAllowed(i8 NodeType) {
		return !!(this->NodeTypeMask & (1 << NodeType))
	}
	define void AllowType(i8 NodeType) {
		this->NodeTypeMask := this->NodeTypeMask | (1 << NodeType)
	}
	
	define void SetState(i64 State) {
		this->State := State
	}
	define i64 GetState() {
		return this->State
	}
	
	define void SetVisitFunction(void* Function) {
		this->VisitFunction := Function
	}
	define void SetBlockVisitFunction(void* Function) {
		this->BlockVisitFunction := Function
	}
	define void SetFunctionVisitor(void* Function) {
		this->FunctionVisitFunction := Function
	}

	declare void VisitAssembly(AssemblyBlock*)
	
	declare void VisitNodes(...)
	declare void RawVisitNodes(i64, ASTNode**)
	
	define void RawVisitBlocks(i64 Count, CodeBlock** Blocks) {
		for (i32 Index := 0, Index < Count, Index += 1) {
			CodeBlock* Next := Blocks[Index]
			
			this->RawVisitNodes(Next->StatementCount, Next->Statements)

			if (this->BlockVisitFunction != null) {
				this->BlockVisitFunction(Next)
			}
		}
	}
	define void VisitBlocks(... Blocks) {
		this->RawVisitBlocks(Blocks[0], (Blocks + 8) As CodeBlock**)
	}
	define void VisitChildren(ASTNode* Node) {
		Node->LastVisitor := this->ID
		
		i8 NodeType := Node->NodeType
		
		if (NodeType = NODE_TYPE_UNARY) {
			if (this->FunctionVisitFunction != null) {
				if (Node->UnaryNode->Operator->IntegerValue = OPERATOR_AND) {
					if (Node->UnaryNode->Operand->NodeType = NODE_TYPE_DEFINE) {
						this->FunctionVisitFunction(this, Node->UnaryNode->Operand->DefineNode)
					}
				}
			}

			this->VisitNodes(Node->UnaryNode->Operand)
		}
		else if (NodeType = NODE_TYPE_BINARY) {
			this->VisitNodes(Node->BinaryNode->Left, Node->BinaryNode->Right)
		}
		else if (NodeType = NODE_TYPE_CALL) {
			if (this->FunctionVisitFunction != null) {
				if (Node->CallNode->BuiltinID = BUILTIN_NONE) {
					this->FunctionVisitFunction(this, Node->CallNode->TargetFunction)
				}
			}

			this->RawVisitNodes(Node->CallNode->ParameterCount, Node->CallNode->Parameters)
		}
		else if (NodeType = NODE_TYPE_STRUCT_ACCESS) {
			this->VisitNodes(Node->AccessNode->Left)
		}
		else if (NodeType = NODE_TYPE_IF) {
			this->RawVisitNodes(Node->IfNode->BranchCount, Node->IfNode->Conditions)
			this->RawVisitBlocks(Node->IfNode->BranchCount, Node->IfNode->Bodies)
			
			if (Node->IfNode->ElseBranch) {
				this->VisitBlocks(Node->IfNode->ElseBranch)
			}
		}
		else if (NodeType = NODE_TYPE_WHILE) {
			this->VisitNodes(Node->WhileNode->Condition)
			this->VisitBlocks(Node->WhileNode->Body)
		}
		else if (NodeType = NODE_TYPE_FOR) {
			this->VisitNodes(Node->ForNode->Initializer, Node->ForNode->Condition, Node->ForNode->Step)
			this->VisitBlocks(Node->ForNode->Body)
		}
		else if (NodeType = NODE_TYPE_LOOP) {
			this->VisitBlocks(Node->LoopBody)
		}
		else if (NodeType = NODE_TYPE_RETURN) {
			this->VisitNodes(Node->ReturnExpression)
		}
		else if (NodeType = NODE_TYPE_EXPRESSION) {
			this->VisitNodes(Node->ExpressionStatement)
		}
		else if (NodeType = NODE_TYPE_EXPRESSION_BLOCK) {
			this->VisitBlocks(Node->BlockValue)
		}
		else if (NodeType = NODE_TYPE_TRY) {
			this->VisitBlocks(Node->TryNode->Body)
			
			if (Node->TryNode->CatchBody) {
				this->VisitBlocks(Node->TryNode->CatchBody)
			}
		}
		else if (NodeType = NODE_TYPE_ASSEMBLY) {
			this->VisitAssembly(Node->AssemblyValue)
		}
	}
	
	define void RawVisitNodes(i64 Count, ASTNode** Nodes) {
		for (i32 Index := 0, Index < Count, Index += 1) {
			ASTNode* Node := Nodes[Index]
			
			if (Node->LastVisitor = this->ID) {
				continue
			}
			
			Node->LastVisitor := this->ID
			
			if (this->IsTypeAllowed(Node->NodeType)) {
				this->VisitFunction(Node)
			}
			else {
				this->VisitChildren(Node)
			}
		}
	}
	define void VisitNodes(... Nodes) {
		this->RawVisitNodes(Nodes[0], (Nodes + 8) As ASTNode**)
	}

	declare void VisitFunctionDefinition(FunctionDefine*)

	define void VisitAssembly(AssemblyBlock* Target) {
		for (i32 InstructionIndex := 0, InstructionIndex < Target->InstructionCount, InstructionIndex += 1) {
			InstructionNode* NextInstruction := Target->Instructions[InstructionIndex]
			
			if (NextInstruction->Type = INSTRUCTION_REGULAR) {
				for (i32 OperandIndex := 0, OperandIndex < 2, OperandIndex += 1) {
					InstructionOperand* NextOperand := NextInstruction->Operands[OperandIndex]
					
					if (NextOperand != null && NextOperand->ReferencesFunction) {
						if (this->FunctionVisitFunction != null) {
							this->FunctionVisitFunction(this, NextOperand->FunctionReference)
						}
					}
				}
			}
		}
	}

	define void VisitFunctionDefinition(FunctionDefine* Target) {
        if (Target->LastVisitor = this->ID) {
            return
        }

        Target->LastVisitor := this->ID

		if (Target->IsImported) {
			return
		}
		else if (Target->Attributes & FUNCTION_ATTRIBUTE_ASSEMBY) {
			this->VisitAssembly(Target->AssemblyBody)
		}
		else if !(Target->HasFullDefinition) {
			if (Target->IsMethod = FUNCTION_IS_DERIVED_METHOD) {
				if (this->FunctionVisitFunction != null) {
					; When we derive IAllocate, we are indirectly calling
					;  `AllocateInstance` and `DeleteInstance` without reflecting
					;   this relationship in the call graph.
					; To ensure that `(Allocate|Delete)Instance` aren't eliminated
					;  and that the functions they depend on aren't eliminated, we
					;   need to manually "fix" the call graph here by visiting the
					;    "true" targets of `IAllocate` instead of the derived targets.

					if (Target->DerivedImplementationInfo->ForInterface = this->Parser->IAllocateType) {
						if (Target->DerivedMethodIndex = 0) {
							this->FunctionVisitFunction(this, this->Parser->Allocator)
						}
						else if (Target->DerivedMethodIndex = 1) {
							this->FunctionVisitFunction(this, this->Parser->Deleter)
						}
					}
				}
			}
			else if (Target->IsMethod = FUNCTION_IS_INTERFACE_METHOD) {
				if (this->FunctionVisitFunction != null) {
					; When we're visiting a call to an interface method:
					;  Visit all possible implementations of the method, since it is
					;   way too hard to actually figure out where the call ends up.

					TypeInfo* InterfaceType := Target->MethodOfType
					InterfaceInfo* Info := InterfaceType->InterfaceInfo

					i32 ImplementerCount := Info->ImplementedBy->Count()

					for (i32 Index := 0, Index < ImplementerCount, Index++) {
						TypeInfo* Implementer := Info->ImplementedBy->PointerAt(Index)
						ClassInfo* ImplementerClass := Implementer->ClassInfo

						InterfaceImplementationInfo* Implementation := ImplementerClass->Interfaces->GetPointer(InterfaceType As i64)

						FunctionDefine* ImplementationMethod := Implementation->Methods->At(Target->VirtualFunctionTableSlot)
						
						this->FunctionVisitFunction(this, ImplementationMethod)
					}
				}
			}
			else {
				Target~>Context->Error("Function is declared but never defined")
			}
		}
		else {
			this->VisitBlocks(Target->Body)
		}
	}

	define void VisitProgramRoot() {
		this->VisitFunctionDefinition(this->Parser->MainFunction)
		this->RawVisitNodes(GetArrayLength(this->Parser->GlobalDefaults), this->Parser->GlobalDefaults)
	}
}
