
#Require "./src/compiler/Parser/ASTVisitor.rlx"

define void CountReferencesVisitFunction(ASTVisitor* Visitor, FunctionDefine* Target) {
	Target->CallCount += 1
	
	Visitor->VisitFunctionDefinition(Target)
}

define i8 IsAssignment(Token* OperatorToken) {
	i8 Operator := OperatorToken->Value As i8
	
	return (OPERATOR_FIRST_ASSIGNMENT <= Operator && Operator <= OPERATOR_LAST_ASSIGNMENT)
}

define void* CountReferencesVisit(ASTVisitor* Visitor, ASTNode* Node) {
	i8 NodeType := Node->NodeType
	
	if (NodeType = NODE_TYPE_UNARY) {
		UnaryExpression* UnaryNode := Node->UnaryNode
		ASTNode* Operand := UnaryNode->Operand
		
		i8 Operator := UnaryNode->Operator->IntegerValue As i8
		i8 IsIncrementDecrement := Operator = OPERATOR_PLUS_PLUS_RIGHT || Operator = OPERATOR_MINUS_MINUS_RIGHT || Operator = OPERATOR_MINUS_MINUS_LEFT || Operator = OPERATOR_PLUS_PLUS_LEFT
	
		if (IsIncrementDecrement) {
			if (Operand->NodeType = NODE_TYPE_VARIABLE) {
				Operand->VariableValue->SetCount += 1
			}
		}
		
		Visitor->VisitChildren(Node)
	}
	else if (NodeType = NODE_TYPE_BINARY) {
		ASTNode* Left := Node->BinaryNode->Left
		ASTNode* Right := Node->BinaryNode->Right
		Token* BinaryOperator := Node->BinaryNode->Operator
		
		if (Left->NodeType = NODE_TYPE_VARIABLE && IsAssignment(BinaryOperator)) {
			VariableInfo* LeftVariable := Left->VariableValue
			
			if (BinaryOperator->Value != OPERATOR_COLON_EQUAL) {
				LeftVariable->GetCount += 1
			}
			
			LeftVariable->SetCount += 1
			LeftVariable->LastValue := Right
			
			if (Right->NodeType = NODE_TYPE_CALL) {
				LeftVariable->SetCount += 1
			}
		}
		
		Visitor->VisitChildren(Node)
	}
	else if (NodeType = NODE_TYPE_VARIABLE) {
		Node->VariableValue->GetCount += 1
	}

	return null
}

define void CountReferences(ParserState* Parser) {
	ASTVisitor* Visitor := ASTVisitor:New(Parser, &CountReferencesVisit)

	Visitor->SetFunctionVisitor(&CountReferencesVisitFunction)
	
	Visitor->AllowType(NODE_TYPE_UNARY)
	Visitor->AllowType(NODE_TYPE_BINARY)
	Visitor->AllowType(NODE_TYPE_VARIABLE)
	
	Visitor->VisitProgramRoot()

	Parser->MainFunction->CallCount += 1
	
	Free(Visitor)
}

define void* NodeHasSideEffectsVisitor(ASTVisitor* Visitor, ASTNode* Node) {
	i8 NodeType := Node->NodeType
	
	if (NodeType = NODE_TYPE_CALL || NodeType = NODE_TYPE_STRUCT_ACCESS) {
		Visitor->SetState(true)
	}
	else if (NodeType = NODE_TYPE_UNARY) {
		UnaryExpression* UnaryNode := Node->UnaryNode
		ASTNode* Operand := UnaryNode->Operand
		
		if (UnaryNode->Operator->Value = OPERATOR_STAR) {
			Visitor->SetState(true)
		}
		
		Visitor->VisitNodes(Operand)
	}
	else if (NodeType = NODE_TYPE_BINARY) {
		ASTNode* Left := Node->BinaryNode->Left
		ASTNode* Right := Node->BinaryNode->Right
		
		i8 Operator := Node->BinaryNode->Operator->IntegerValue As i8
		
		if (Operator = OPERATOR_OPEN_BRACKET) {
			Visitor->SetState(true)
		}
		
		Visitor->VisitChildren(Node)
	}
	else if (NodeType = NODE_TYPE_STRING) {
		Visitor->SetState(true)
	}
	else if (NodeType = NODE_TYPE_VARIABLE && !Node->VariableValue->IsGlobal) {
		Visitor->SetState(true)
	}

	return null
}

define i8 NodeHasSideEffects(ASTNode* Node) {
	ASTVisitor* Visitor := ASTVisitor:New(null, &NodeHasSideEffectsVisitor)
	
	Visitor->AllowType(NODE_TYPE_CALL)
	Visitor->AllowType(NODE_TYPE_UNARY)
	Visitor->AllowType(NODE_TYPE_BINARY)
	Visitor->AllowType(NODE_TYPE_STRUCT_ACCESS)
	Visitor->AllowType(NODE_TYPE_STRING)
	Visitor->AllowType(NODE_TYPE_VARIABLE)
	
	Visitor->VisitNodes(Node)
	
	i8 Result := Visitor->GetState() As i8
	
	Free(Visitor)
	
	return Result
}

define void EliminateGlobals(ParserState* Parser) {
	; This will go through each global variable, and check if it is actually a global variable, or just
	;  a fake `#define` consant. It will also re-pack any real globals, and determine how much space
	;   is actually needed for globals, after any constants have been eliminated.
	
	; Constant globals are eliminated by `CompileGetVariableValue` which will inline the variable's 
	;  default value instead of actually reading the value out of memory.
	; Additionally, constant globals aren't even assigned, as `CompileFunction` (when compiling main)
	;  will ensure each global is not eliminated before compiling the global's default value assignment
	
	; TODO: Move the actual value inlining into this file, so consant folding (when implemented) works
	;  for inlined constant globals
	
	VariableHashMap* Globals := Parser~>Globals
	
	HashMap* RawGlobals := Globals->Map
	
	void* Elements := RawGlobals->Elements
	i32 MaxIndex := RawGlobals->BufferMaxCount As i32
	
	i32 NewNextOffset := 0
	
	; Walk the global hashmap
	
	for (i32 ElementIndex := 0, ElementIndex < MaxIndex, ElementIndex += 1) {
		if (Elements[ElementIndex]) {
			HashMapElement* FoundElement := Elements[ElementIndex] As HashMapElement*
			
			while (FoundElement) {
				VariableInfo* NextGlobal := FoundElement->Value

				if (NextGlobal->IsExternal) {
					FoundElement := FoundElement->NextElement
					continue
				}
				
				; If a global is only set once, and has a default value, and the default value has no
				;  side-effects, then it can safely be optimized away.
				
				ASTNode* LastValue := NextGlobal->LastValue
				
				if (NextGlobal->SetCount = 1 && LastValue != null) {
					if !(NodeHasSideEffects(LastValue)) {
						NextGlobal->IsGlobal := GLOBAL_IS_OPTIMIZED_AWAY
					}
				}
				
				; If this variable is not being optimized away, then give it a new offset based on
				;  any other real globals, and update the offset of the next real global to be after
				;   this one.
				
				if (NextGlobal->IsGlobal != GLOBAL_IS_OPTIMIZED_AWAY) {
					NextGlobal->StackOffset := NewNextOffset
					
					i16 NextGlobalSize := GetTypeStorageSize(NextGlobal->Type)
					
					if (NextGlobalSize <= 8) {
						NewNextOffset += 8
					}
					else {
						i16 RoundedSize := RoundTo(NextGlobalSize, 8) As i16
						
						NewNextOffset += RoundedSize + 8
					}
				}
				
				FoundElement := FoundElement->NextElement
			}
		}
	}
	
	; Update how much space is needed for globals, excluding any eliminated globals.
	
	Globals->NextOffset := NewNextOffset
}

define void FoldConstantsBlockVisitor(ASTVisitor* Visitor, CodeBlock* Target) {
	; Remove any NODE_TYPE_NONEs from the block, and repack contained nodes as a linear array of non-none nodes
	; Effectively translating the block to exactly what it will be compiled as, allowing for us to optimize based on
	;  the number of nodes inside of a block without worrying about them being NODE_TYPE_NONEs.
	
	i16 NewIndex := 0
	
	for (i32 Index := 0, Index < Target->StatementCount, Index++) {
		ASTNode* Next := Target->Statements[Index]
		
		if (Next->NodeType != NODE_TYPE_NONE) {
			Target->Statements[NewIndex++] := Next
		}
	}
	
	Target->StatementCount := NewIndex
}

define ASTNode* FoldConstantsVisitor(ASTVisitor* Visitor, ASTNode* Root) {
	if (Root->NodeType = NODE_TYPE_BINARY) {
		if (IsAssignment(Root->BinaryNode->Operator)) {
			Visitor->VisitNodes(Root->BinaryNode->Right)
		}
		else {
			ASTNode* Left := FoldConstantsVisitor(Visitor, Root->BinaryNode->Left)
			ASTNode* Right := FoldConstantsVisitor(Visitor, Root->BinaryNode->Right)
			
			i8 BinaryOperator := Root->BinaryNode->Operator->IntegerValue As i8
			
			if (Left->NodeType = NODE_TYPE_INTEGER && Right->NodeType = NODE_TYPE_INTEGER) {
				Root->NodeType := NODE_TYPE_INTEGER
				
				i64 LeftValue := Left->IntegerValue
				i64 RightValue := Right->IntegerValue
				i8 RightByteValue := RightValue As i8
				
				i64 ResultValue := 0
				
				if 		(BinaryOperator = OPERATOR_PLUS) 			{ ResultValue := LeftValue +  RightValue }
				else if (BinaryOperator = OPERATOR_MINUS) 			{ ResultValue := LeftValue -  RightValue }
				else if (BinaryOperator = OPERATOR_STAR) 			{ ResultValue := LeftValue *  RightValue }
				else if (BinaryOperator = OPERATOR_SLASH) 			{ ResultValue := LeftValue /  RightValue }
				else if (BinaryOperator = OPERATOR_PERCENT)			{ ResultValue := LeftValue %  RightValue }
				else if (BinaryOperator = OPERATOR_EQUAL)			{ ResultValue := LeftValue =  RightValue }
				else if (BinaryOperator = OPERATOR_BANG_EQUAL)		{ ResultValue := LeftValue != RightValue }
				else if (BinaryOperator = OPERATOR_LESS)			{ ResultValue := LeftValue <  RightValue }
				else if (BinaryOperator = OPERATOR_LESS_EQAUL)		{ ResultValue := LeftValue <= RightValue }
				else if (BinaryOperator = OPERATOR_GREATER)			{ ResultValue := LeftValue >  RightValue }
				else if (BinaryOperator = OPERATOR_GREATER_EQAUL)	{ ResultValue := LeftValue >= RightValue }
				else if (BinaryOperator = OPERATOR_XOR)				{ ResultValue := LeftValue ^  RightValue }
				else if (BinaryOperator = OPERATOR_AND)				{ ResultValue := LeftValue &  RightValue }
				else if (BinaryOperator = OPERATOR_OR)				{ ResultValue := LeftValue |  RightValue }
				else if (BinaryOperator = OPERATOR_LOGICAL_AND)		{ ResultValue := LeftValue && RightValue }
				else if (BinaryOperator = OPERATOR_LOGICAL_OR)		{ ResultValue := LeftValue || RightValue }
				else if (BinaryOperator = OPERATOR_LESS_LESS)		{ ResultValue := LeftValue << RightByteValue }
				else if (BinaryOperator = OPERATOR_GREATER_GREATER)	{ ResultValue := LeftValue >> RightByteValue }
				
				Root->IntegerValue := ResultValue
			}
		}
	}
	else if (Root->NodeType = NODE_TYPE_UNARY) {
		ASTNode* Operand := FoldConstantsVisitor(Visitor, Root->UnaryNode->Operand)
		
		i8 UnaryOperator := Root->UnaryNode->Operator->IntegerValue As i8
		
		if (Operand->NodeType = NODE_TYPE_INTEGER) {
			Root->NodeType := NODE_TYPE_INTEGER
			
			if 		(UnaryOperator = OPERATOR_MINUS) { Root->IntegerValue := -Operand->IntegerValue }
			else if (UnaryOperator = OPERATOR_TILDE) { Root->IntegerValue := ~Operand->IntegerValue }
			else if (UnaryOperator = OPERATOR_BANG)  { Root->IntegerValue := !Operand->IntegerValue }
		}
		else {
			Visitor->VisitChildren(Root)
		}
	}
	else if (Root->NodeType = NODE_TYPE_VARIABLE) {
		VariableInfo* RootVariable := Root->VariableValue
		
		if (RootVariable->IsGlobal = GLOBAL_IS_OPTIMIZED_AWAY) {
			ASTNode* LastValue := RootVariable->LastValue
			
			Root->IntegerValue := LastValue->IntegerValue
			Root->NodeType := LastValue->NodeType
		}
	}
	else if (Root->NodeType = NODE_TYPE_GET_TYPE_SIZE) {
		Root->NodeType := NODE_TYPE_INTEGER
		Root->IntegerValue := GetTypeStorageSize(Root->TypeValue)
	}
	else if (Root->NodeType = NODE_TYPE_CALL) {
		CallExpression* CallNode := Root->CallNode
		
		if (CallNode->BuiltinID = BUILTIN_NONE) {
			FunctionDefine* TargetFunction := CallNode->TargetFunction

			if (TargetFunction->Attributes & FUNCTION_ATTRIBUTE_ASSEMBY) {
				; Dummy branch
			}
			else if (TargetFunction->IsImported) {
				; Dummy branch
			}
			else if (TargetFunction->IsMethod = FUNCTION_IS_INTERFACE_METHOD || TargetFunction->IsMethod = FUNCTION_IS_DERIVED_METHOD) {
				; Dummy, again
			}
			else if (TargetFunction->Body->StatementCount = 0) {
				; A call to an empty function
				
				ASTNode** NewParameters := Alloc(CallNode->ParameterCount * #ASTNode*)
				i16 NewParametersIndex := 0
				
				; Remove all parameters that do not have side-effects
				
				for (i32 ParameterIndex := 0, ParameterIndex < CallNode->ParameterCount, ParameterIndex++) {
					ASTNode* NextParameter := CallNode->Parameters[ParameterIndex]
					
					if (NodeHasSideEffects(NextParameter)) {
						NewParameters[NewParametersIndex++] := NextParameter
					}
				}
				
				TargetFunction->CallCount -= 1
				
				if (NewParametersIndex = 0) {
					; If all parameters had no side-effects, remove the node as a whole
					
					Root->NodeType := NODE_TYPE_NONE
				}
				else {
					; If some parameters had side-effects, build a NODE_TYPE_EXPRESSION_BLOCK which will evaluate
					;  just the ones with side-effects, without actually calling the target function
					
					CodeBlock* ParametersBlock := Alloc(#CodeBlock)
					
					ParametersBlock->StatementCount := NewParametersIndex As i16
					ParametersBlock->Statements := NewParameters
					
					Root->NodeType := NODE_TYPE_EXPRESSION_BLOCK
					Root->BlockValue := ParametersBlock
				}
			}
			else {
				Visitor->VisitBlocks(TargetFunction->Body)
			}
		}
		
		Visitor->RawVisitNodes(CallNode->ParameterCount, CallNode->Parameters)
	}
	else if (Root->NodeType = NODE_TYPE_IF) {
		Visitor->VisitChildren(Root)
		
		IfGroup* IfNode := Root->IfNode
		
		ASTNode** NewConditions := Alloc(IfNode->BranchCount * #ASTNode*)
		CodeBlock** NewBodies := Alloc(IfNode->BranchCount * #CodeBlock*)
		
		i16 NewBranchIndex := 0
		
		for (i32 BranchIndex := 0, BranchIndex < IfNode->BranchCount, BranchIndex += 1) {
			ASTNode* Condition := FoldConstantsVisitor(Visitor, IfNode->Conditions[BranchIndex])
			CodeBlock* Body := IfNode->Bodies[BranchIndex]
			
			if (Condition->NodeType = NODE_TYPE_INTEGER) {
				i64 ConditionValue := Condition->IntegerValue
				
				if (ConditionValue = 0) {
					; Constant false condition, skip branch entirely
					
					continue
				}
				else {
					; Constant true condition
					
					if (BranchIndex = 0) {
						; If this is the first branch, delete the if statement as a whole and just replace it with
						;  the body of the branch
						
						Root->NodeType := NODE_TYPE_BLOCK
						Root->BlockValue := Body
					}
					
					; Since this is the final branch (and will always be taken if reached), we can remove any `else` branch
					;  and stop processing any more branches
					
					IfNode->ElseBranch := null
					
					NewConditions[NewBranchIndex] := Condition
					NewBodies[NewBranchIndex++] := Body
					
					break
				}
			}
			
			NewConditions[NewBranchIndex] := Condition
			NewBodies[NewBranchIndex++] := Body
		}
		
		if (Root->NodeType = NODE_TYPE_BLOCK) {
			; This node has been replaced with the body of a constant true branch, free all if-related buffers
			
			Free(IfNode->Conditions)
			Free(IfNode->Bodies)
			Free(NewConditions)
			Free(NewBodies)
		}
		else if (NewBranchIndex = 0 && IfNode->ElseBranch = null) {
			; This node only contained constant false conditions (which were removed), delete the node as a whole
			
			Free(NewConditions)
			Free(NewBodies)
			
			Root->NodeType := NODE_TYPE_NONE
		}
		else {
			; This node still contains at least one brach with a non-constant condition, free the old buffers
			;  and replace them with the new buffers (which don't contain any dead branches)
			
			Free(IfNode->Conditions)
			Free(IfNode->Bodies)
			
			IfNode->BranchCount := NewBranchIndex
			IfNode->Conditions := NewConditions
			IfNode->Bodies := NewBodies
		}
	}
	
	return Root
}

define void FoldConstants(ParserState* Parser) {
	ASTVisitor* Visitor := ASTVisitor:New(Parser, &FoldConstantsVisitor)
	
	Visitor->SetBlockVisitFunction(&FoldConstantsBlockVisitor)
	
	Visitor->AllowType(NODE_TYPE_BINARY)
	Visitor->AllowType(NODE_TYPE_UNARY)
	Visitor->AllowType(NODE_TYPE_VARIABLE)
	Visitor->AllowType(NODE_TYPE_GET_TYPE_SIZE)
	Visitor->AllowType(NODE_TYPE_CALL)
	Visitor->AllowType(NODE_TYPE_IF)

	Visitor->VisitProgramRoot()
	
	Free(Visitor)
}

define i8 TypesNeedDynamicCast(Type LeftType, Type RightType) {
	TypeInfo* LeftTypeInfo := GetBaseType(LeftType)
	TypeInfo* RightTypeInfo := GetBaseType(RightType)

	if (GetPointerDepth(LeftType) != 1 || GetPointerDepth(RightType) != 1) {
		return false
	}

	i8 LeftIsClass := LeftTypeInfo->IsClass
	i8 LeftIsInterface := LeftTypeInfo->Is(TYPE_KIND_INTERFACE)

	i8 RightIsClass := RightTypeInfo->IsClass
	i8 RightIsInterface := RightTypeInfo->Is(TYPE_KIND_INTERFACE)

	if (LeftIsClass && RightIsInterface) || (LeftIsInterface && RightIsClass) {
		return true
	}
	else {
		return false
	}
}

define void InsertClassInterfaceCastsVisitFunction(ASTVisitor* Visitor, FunctionDefine* Function) {
	Visitor->VisitFunctionDefinition(Function)
}

define void* InsertClassInterfaceCastsVisitNode(ASTVisitor* Visitor, ASTNode* Root) {
	Visitor->VisitChildren(Root)

	; Dynamic casts only need to be inserted at:
	;  Call points: 
	;   define void TakesInterface(IWhatever*)
	;   TakesInterface(ClassImplementingIWhatever)
	;  Assignments:
	;   IWhatever* whatever
	;   whatever := ClassImplementingIWhatever
	;  Excplict casts:
	;   (ClassImplementingIWhatever As IWhatever*)
	;
	; All examples are bidirectional (up/down casts)
	; All instances have already been type checked

	;Root->Warn("Visited")

	if (Root->NodeType = NODE_TYPE_CALL) {
		CallExpression* Call := Root->CallNode

		if (Call->BuiltinID = BUILTIN_FUNCTION_POINTER) {
			Type FunctionPointerType := Call->CallToFunctionPointer->ValueType
			FunctionPointerInfo* Info := GetBaseType(FunctionPointerType)~>FunctionPointer

			for (i32 Index := 0, Index < Info->ParameterCount, Index++) {
				ASTNode* ProvidedParameter := Call->Parameters[Index]
				Type ProvidedType := ProvidedParameter->ValueType
				Type ExpectedType := Info->ParameterTypes[Index]

				if (TypesNeedDynamicCast(ProvidedType, ExpectedType)) {
					ASTNode* Cast := ASTNode:New(NODE_TYPE_DYNAMIC_CAST, ProvidedParameter, ExpectedType)
					Cast~>Context->Clone(ProvidedParameter~>Context)
					Call->Parameters[Index] := Cast
				}
			}
		}
		else if (Call->BuiltinID = BUILTIN_NONE) {
			FunctionDefine* Function := Call->TargetFunction
			i32 ParameterCount := Function->ParameterCount

			if (Function->Attributes & FUNCTION_ATTRIBUTE_VARIADIC) {
				ParameterCount -= 1
			}

			i32 FirstParameter := 0

			if (Function->IsMethod && Function->IsMethod != FUNCTION_IS_STATIC_METHOD) {
				; Skip `this`
				FirstParameter := 1
			}

			for (i32 Index := 0, Index < ParameterCount, Index++) {
				ASTNode* ProvidedParameter := Call->Parameters[Index]
				Type ProvidedType := ProvidedParameter->ValueType
				Type ExpectedType := Function->Parameters[Index]->Type

				if (TypesNeedDynamicCast(ProvidedType, ExpectedType)) {
					ASTNode* Cast := ASTNode:New(NODE_TYPE_DYNAMIC_CAST, ProvidedParameter, ExpectedType)
					Cast~>Context->Clone(ProvidedParameter~>Context)
					Call->Parameters[Index] := Cast
				}
			}

			Visitor->VisitFunctionDefinition(Function)
		}
	}
	else if (Root->NodeType = NODE_TYPE_BINARY) {
		BinaryExpression* Binary := Root->BinaryNode

		Type LeftType := Binary->Left->ValueType
		Type RightType := Binary->Right->ValueType

		i8 Operator := Binary->Operator->Value As i8

		if (Operator != OPERATOR_COLON_EQUAL && Operator != OPERATOR_AS) {
			return null
		}

		if (TypesNeedDynamicCast(LeftType, RightType)) {
			Type TargetType := TYPE_NONE
			ASTNode** pValueNode := null

			if (Operator = OPERATOR_COLON_EQUAL) {
				TargetType := LeftType
				pValueNode := Binary~>Right
			}
			else if (Operator = OPERATOR_AS) {
				TargetType := RightType
				pValueNode := Binary~>Left
			}

			ASTNode* Cast := ASTNode:New(NODE_TYPE_DYNAMIC_CAST, *pValueNode, TargetType)

			Cast~>Context->Clone((*pValueNode)~>Context)

			*pValueNode := Cast
		}
	}

	return null
}

define void InsertClassInterfaceCasts(ParserState* Parser) {
	ASTVisitor* Visitor := ASTVisitor:New(Parser, &InsertClassInterfaceCastsVisitNode)

	Visitor->SetFunctionVisitor(&InsertClassInterfaceCastsVisitFunction)
	
	Visitor->AllowType(NODE_TYPE_BINARY)
	Visitor->AllowType(NODE_TYPE_CALL)
	
	Visitor->VisitProgramRoot()
	
	Free(Visitor)
}