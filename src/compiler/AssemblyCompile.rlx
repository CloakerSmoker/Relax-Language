define void PushIX(CompilerState* Compiler, i64 Number, i8 Size) {
	if (Size = 1) {PushByte(Compiler, Number As i8)}
	else if (Size = 2) {PushI16(Compiler, Number As i16)}
	else if (Size = 4) {PushI32(Compiler, Number As i32)}
	else {PushI64(Compiler, Number)}
}
define void PushOpcode(CompilerState* Compiler, Instruction* I) {
	if (I->Flags & E_2_BYTE_OPCODE) {
		PushByte(Compiler, I~>Opcode[1])
		PushByte(Compiler, I~>Opcode[0])
	}
	else {
		PushByte(Compiler, I~>Opcode[0])
	}
}

define void EmitAssembly(CompilerState* Compiler, Instruction* I, InstructionOperand* ForOperand, InstructionOperand* Other) {
	i8 Mode := 0
	i8 Reg := 0
	i8 RM := 0
	i8 REX := REX_BASE
	i8 SIB := 0
	i8 DispSize := 0
	i8 DispValue := 0
	i8 OperationSize := 0
	
	if (ForOperand->Type & OP_R) {
		Mode := 3
		RM := ClampRegisterNumber(ForOperand->RegisterNumber)
		
		if (RegisterRequiresREX(ForOperand->RegisterNumber)) {
			REX := REX | REX_B
		}
		
		OperationSize := (ForOperand->Type) >> OP_R_OFFSET
	}
	else {
		/* OP_MX map directly to 1/2/4/8, so the OperationSize is directly dependent on the type of the memory operand */
		OperationSize := ForOperand->Type As i8
		
		if (ForOperand->HasSIB) {
			SIBInfo* S := ForOperand~>SIBValue
			
			SIB := MakeSIB(S->Scale, ClampRegisterNumber(S->IndexRegister), ClampRegisterNumber(S->BaseRegister))
			
			if (RegisterRequiresREX(S->BaseRegister)) {
				REX := REX | REX_B
			}
			if (RegisterRequiresREX(S->IndexRegister)) {
				REX := REX | REX_X
			}
			
			Mode := 0
			RM := 4
		}
		else {
			RM := ForOperand->RegisterNumber
			
			if (RM = RSP) {
				SIB := MakeSIB(1, RSP, RSP)
			}
		}
		
		if (ForOperand->DispSize) {
			i8 Size := ForOperand->DispSize
			
			if (Size = 1) {
				Mode := 1
			}
			else if (Size = 4) {
				Mode := 2
			}
			
			DispSize := ForOperand->DispSize
			DispValue := ForOperand->DispValue
		}
	}
	
	if (I->Flags & E_OP_EXT) {
		Reg := I->Extra
	}
	else if (Other->Type & OP_R) {
		Reg := ClampRegisterNumber(Other->RegisterNumber)
		
		if (RegisterRequiresREX(Other->RegisterNumber)) {
			REX := REX | REX_R
		}
		
		if !(OperationSize) {
			OperationSize := (Other->Type) >> OP_R_OFFSET
		}
	}
	
	if (OperationSize = 8) {
		/* REX_W for 64 bit operations */
		
		REX := REX | REX_W
	}
	else if (OperationSize = 2) {
		/* 0x66 for 16 bit operations */
		
		EmitLegacySizePrefix(Compiler)
	}
	
	/* Nothing for 32 bit operations, they are default */
	
	if (OperationSize = 1) {
		/* For byte operations, emit REX_BASE to ensure sil/dil/spl/bpl can be accessed, and not ah/bh/dh/ch */
		
		PushByte(Compiler, REX | REX_BASE)
	}
	else if (REX != REX_BASE) {
		PushByte(Compiler, REX)
	}
	
	if (OperationSize = 1 && !(I->Flags & E_BYTE_OPCODE_N1)) {
		PushByte(Compiler, I~>Opcode[0] - 1 As i16)
	}
	else {
		PushOpcode(Compiler, I)
	}
	
	EmitModRM(Compiler, Mode, Reg, RM)
	
	if (RM = 4 && SIB != 0) {
		PushByte(Compiler, SIB)
	}
	
	if (DispSize = 1) {
		PushByte(Compiler, DispValue As i8)
	}
	else if (DispSize = 4) {
		PushI32(Compiler, DispValue)
	}
	
	
	if (I->Flags & E_IMM_X) {
		if (OperationSize = 8) {
			/* Even if we're working with a 64 bit register, the max imm size is 32, since only movabs gets a 64 bit imm */
			
			OperationSize := 4
		}
		
		PushIX(Compiler, Other->IntegerValue, OperationSize)
	}
	else {
		if (I->Flags & E_IMM8) {
			PushByte(Compiler, Other->IntegerValue As i8)
		}
		else if (I->Flags & E_IMM32) {
			PushI32(Compiler, Other->IntegerValue As i32)
		}
	}
}

define void ResolveOperandFunctionReference(InstructionOperand* Operand) {
	if (Operand && Operand->ReferencesFunction) {
		Operand->LabelNumber := Operand->FunctionReference->LabelNumber
	}
}

define void CompileInstruction(CompilerState* Compiler, InstructionNode* ToCompile) {
	if (ToCompile->Type = INSTRUCTION_LABEL) {
		SetLabel(Compiler, ToCompile->LabelNumber)
	}
	else {
		InstructionOperand* OperandOne := ToCompile->Operands[0]
		InstructionOperand* OperandTwo := ToCompile->Operands[1]
		
		ResolveOperandFunctionReference(OperandOne)
		ResolveOperandFunctionReference(OperandTwo)
		
		InstructionOperand* MemoryOperand := 0
		InstructionOperand* OtherOperand := 0
		
		Instruction* Base := ToCompile->Base
		
		if (Base->Flags & E_RM_IS_OP1) {
			MemoryOperand := OperandOne
			OtherOperand := OperandTwo
		}
		else if (Base->Flags & E_RM_IS_OP2) {
			MemoryOperand := OperandTwo
			OtherOperand := OperandOne
		}
		
		i8 REX := REX_BASE | REX_W
		
		if (MemoryOperand) {
			EmitAssembly(Compiler, Base, MemoryOperand, OtherOperand)
		}
		else {		
			if (Base->Flags & E_LABEL) {
				if (Base->Flags & E_REX_W) {
					PushByte(Compiler, REX)
				}
				
				PushOpcode(Compiler, Base)
				UseLabel(Compiler, OperandOne->LabelNumber)
			}
			else if (Base->Flags & E_REG_IN_OPCODE) {
				i8 TargetRegister := OperandOne->RegisterNumber
				
				PushByte(Compiler, REX)
				PushByte(Compiler, Base~>Opcode[0] + ClampRegisterNumber(TargetRegister))
				
				if (Base->Flags & E_IMM8) {
					PushByte(Compiler, OperandTwo->IntegerValue As i8)
				}
				else if (Base->Flags & E_IMM32) {
					PushI32(Compiler, OperandTwo->IntegerValue As i32)
				}
				else if (Base->Flags & E_IMM64) {
					PushI64(Compiler, OperandTwo->IntegerValue)
				}
			}
			else {
				if (Base->Flags & E_NEEDS_66) {
					PushByte(Compiler, 0x66)
				}
				if (Base->Flags & E_REX_W) {
					PushByte(Compiler, REX)
				}
				
				PushOpcode(Compiler, Base)
			}
		}
	}
}

define void CompileAssembly(CompilerState* Compiler, AssemblyBlock* ToCompile) {
	; Since there's 16 different registers you could assign, we just reserve 16 ASTNode* inside of the
	;  AssemblyBlock struct
	
	for (i8 RegisterValueIndex := 0, RegisterValueIndex < 16, RegisterValueIndex += 1) {
		ASTNode* ThisRegisterValue := ToCompile~>RegisterValues[RegisterValueIndex]
		
		if (ThisRegisterValue != null) {
			; So, if this register has a value, then we compile the value expression
			; But, since any following value expressions could clobber the register we just 
			;  compiled a value for, the safest bet is to just push the value on the stack
			;   and pop them into the actual registers after we know the registers can't get
			;    clobbered anymore.
			
			CompileExpression(Compiler, RAX, ThisRegisterValue)
			EmitPush_R64(Compiler, RAX)
		}
	}
	
	; No registers can get clobbered below here, since we aren't compiling any high level code
	for (RegisterValueIndex := 15, RegisterValueIndex >= 0, RegisterValueIndex -= 1) {
		ThisRegisterValue := ToCompile~>RegisterValues[RegisterValueIndex]
		
		if (ThisRegisterValue != null) {
			; Pop the register values into the target registers in reverse order, since they are pushed
			;  in order
			EmitPop_R64(Compiler, RegisterValueIndex)
		}
	}
	
	for (i32 InstructionIndex := 0, InstructionIndex < ToCompile->InstructionCount, InstructionIndex += 1) {
		CompileInstruction(Compiler, ToCompile->Instructions[InstructionIndex])
	}
	
	FunctionDefine* CurrentFunction := Compiler->CurrentFunction
	
	if (CurrentFunction && CurrentFunction->UsesGlobals) {
		EmitMove_R32_I32(Compiler, R15, Compiler->GlobalBase)
	}
}