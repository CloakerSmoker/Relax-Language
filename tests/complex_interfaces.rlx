#Require "$/Console.rlx"

class AllocateMePlease derives IAllocate {
    i8 Value
}

class Complicated derives INew {
    i32 First
    i64 Second

    define void New() {
        Print("Complicated.New()")

        this->First := 10
        this->Second := 20
    }

    define void New(i32 First) {
        Print("Complicated.New(%i)", First)

        this->First := First
        this->Second := 40
    }

    define void New(i32 First, i64 Second) {
        Print("Complicated.New(%i, %i)", First, Second)

        this->First := First
        this->Second := Second
    }
}

interface IDefineDefaults {
    virtual i32 GetFavoriteNumber() {
        Print("IDefineDefaults.GetFavoriteNumber()")
        return 70
    }
}

class Boring implements IDefineDefaults, derives IAllocate {
    define void IsBoring() {
        Print("Boring.IsBoring()")
    }
}

class Opinionated implements IDefineDefaults, derives IAllocate {
    define i32 GetFavoriteNumber() {
        Print("Opinionated.GetFavoriteNumber()")
        return 80
    }
}

class CantBeEliminated implements IDefineDefaults {
    i8 Dummy
}

interface ICallMethodsFromDefaults {
    virtual i32 InternalGetNumber() {
        Print("ICMFD.IGN: ")
        return 200
    }

    virtual i32 GetNumber() {
        Print("ICMFD.GN(): ")
        return this->InternalGetNumber()
    }
}

class Empty implements ICallMethodsFromDefaults, derives IAllocate {
    i8 Dummy
}

class DefinesGetNumber implements ICallMethodsFromDefaults {
    define i32 GetNumber() {
        return 400
    }
}

class OverloadsDefaults implements ICallMethodsFromDefaults, derives IAllocate {
    define i32 InternalGetNumber() {
        Print("OD.IGN: ")
        return 300
    }
}

define void Test() {
    OverloadsDefaults* OSD := new OverloadsDefaults()
    Print("OSD->GetNumber(): ")
    i32 Value := OSD->GetNumber()
    Print("%i\n", Value)
}

define i32 Main() {
    Print("IAllocate:\n")

    AllocateMePlease* Please := AllocateMePlease:Allocate()

    Please->Value := 20
    Print("Value: %i\n", Please->Value)

    Print("\nINew:\n")

    Print("Zero   Parameter New: ")
    Complicated* C1 := Complicated:New()
    Print("      : %i %i\n", C1->First, C1->Second)

    Print("Single Parameter New: ")
    Complicated* C2 := Complicated:New(30)
    Print("    : %i %i\n", C2->First, C2->Second)

    Print("Double Parameter New: ")
    Complicated* C3 := Complicated:New(50, 60)
    Print(": %i %i\n", C3->First, C3->Second)

    Print("\nDefault Method Implementation:\n")
    
    Boring* B := Boring:Allocate()
    IDefineDefaults* BD := B
    Print("B ->GetFavoriteNumber(): ")
    i32 Favorite := B->GetFavoriteNumber()
    Print(": %i\n", Favorite)
    Print("BO->GetFavoriteNumber(): ")
    i32 Favorite := BD->GetFavoriteNumber()
    Print(": %i\n", Favorite)

    Opinionated* O := Opinionated:Allocate()
    IDefineDefaults* OD := O
    Print("O ->GetFavoriteNumber(): ")
    i32 Favorite := O->GetFavoriteNumber()
    Print(": %i\n", Favorite)
    Print("OD->GetFavoriteNumber(): ")
    i32 Favorite := OD->GetFavoriteNumber()
    Print(": %i\n", Favorite)

    Print("\nTypeID:\n")

    Print("B->TypeID()    : %x\n", B->TypeID())
    Print("typeid:(Boring): %x\n", typeid:(Boring))
    Print("BD->TypeID()   : %x\n", BD->TypeID())

    Print("O->TypeID()         : %x\n", O->TypeID())
    Print("typeid:(Opinionated): %x\n", typeid:(Opinionated))
    Print("OD->TypeID()        : %x\n", OD->TypeID())

    Print("\nNew:\n")

    Print("new Complicated()          : ")
    new Complicated()
    Print("\n")

    Print("new Complicated(i32)       : ")
    new Complicated(80)
    Print("\n")

    Print("new Complicated(i32, i32)  : ")
    new Complicated(90, 100)
    Print("\n")

    Print("new Opinionated()->TypeID(): %x\n", (new Opinionated())->TypeID())

    Print("\nDefault Methods Calling Methods\n")

    Empty* E := new Empty()
    Print("E->GetNumber(): ")
    i32 Value := E->GetNumber()
    Print("%i\n", Value)

    Test()

    return 0
}