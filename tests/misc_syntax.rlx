#Include ./src/lib/Memory.rlx
#Include ./src/lib/String.rlx
#Include ./src/lib/Console.rlx

define void VATest(i32 T, i8 Q) {
	AWrite("Ocall ")
}

define void VATest(i64 T, ... Args) {
	IWriteHex(T)
	WriteLiteral(', ')
	IWriteHex(Args[0])
	WriteLiteral(' ')
	
	i32 C := Args[0] As i32
	Args += 8
	
	for (i32 I := 0, I < C, I += 1) {
		IWriteHex(Args[I])
		
		if (C - 1 != I) {
			WriteLiteral(', ')
		}
	}
}

i64{20} GlobalArray

define void Dummy() {
	WriteLiteral(',')
	IWrite(GlobalArray[10])
}

struct Test {
	i64 A,
	i64 B
}

struct ExtraText {
	i8{200} Text
}

define i32 Main() {
	IWriteHex('aaaaaaaa')
	WriteLiteral(', ')
	IWriteHex('aaaaaaa')
	WriteLiteral(', ')
	IWriteHex('aaaaa')
	WriteLiteral(', ')
	IWriteHex('aaaa')
	WriteLiteral(', ')
	IWriteHex('aaa')
	WriteLiteral(', ')
	IWriteHex('aa')
	WriteLiteral(', ')
	IWriteHex('a')
	
	WriteLiteral(' ')
	
	VATest(10, 1)
	VATest(10, 1, 2, 3)
	
	WriteLiteral(' ')
	
	i8{90} test_array
	
	test_array[2] := 90
	
	IWriteHex(test_array[2])
	
	test_array[89] := 20
	WriteLiteral(',')
	IWrite(test_array[89])
	
	GlobalArray[10] := 10
	Dummy()
	
	WriteLiteral(',')
	IWrite(#ExtraText)
	
	return 0
}
