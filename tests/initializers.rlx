#Require "./src/lib/Console.rlx"

struct Test {
	i32 A, 
	i32 B,
	i32* D
}

struct Test2 {
	Test Nest
	i32 C
}

i8 BIT0_LEFTMOST_PIXEL := 0
i8 BIT0_RIGHTMOST_PIXEL := 1

struct Font {
	i8 Width
	i8 Height
	i8 FirstCharacter
	i8 LastCharacter
	i8 DataOrder
	void* Data
}

Font Font8x12 {
	Width: 8, 
	Height: 12, 
	FirstCharacter: '0', 
	LastCharacter: '!', 
	DataOrder: BIT0_LEFTMOST_PIXEL,
	Data: null
}

struct Test3 {
	i8[7] Data
	i8 Length
}

struct Test4 {
	i64 A
	i64 B
}

struct Test5 {
	union {
		void* Function
		i8* Bytes
	}
}

define void SHOULD_NOT_BE_REMOVED() asm {
	ret
}

Test5 FunctionPointer {Function: &SHOULD_NOT_BE_REMOVED}

define i32 Main() {
	i32 I := 4
	
	Test2 T {Nest: {A: 1, B: 2, D: &I}, C: 3}
	i32[4] Q {0x432, 0x123, 0x576, 0x234}
	
	Print("%i,%i,%i,%i,", T.Nest.A, T.Nest.B, T.C, *T.Nest.D)
	Print("%ix%i,%c-%c,", Font8x12.Width, Font8x12.Height, Font8x12.FirstCharacter, Font8x12.LastCharacter)
	
	for (i32 Index := 0, Index < 3, Index += 1) {
		Print("%x,", Q[Index])
	}
	
	Print("%x ", Q[3])
	
	Test3 String {Data: {'a', 'b', 'c'}, Length: 3}
	
	for (Index := 0, Index < String.Length, Index += 1) {
		Print("%c", String~>Data[Index])
	}
	
	Test4[3] Array {{A: 123}, {A: 432}, {A: 123}}
	
	for (Index := 0, Index < 3, Index += 1) {
		Print("%i", Array[Index]->A)
	}
	
	Print("%i", FunctionPointer.Bytes[0] = 0xC3)
	
	return 0
}