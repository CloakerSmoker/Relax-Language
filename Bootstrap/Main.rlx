#Include Runtime.rlx

#Include Memory.rlx
#Include String.rlx
#Include Console.rlx
#Include SafeString.rlx
#Include HashMap.rlx

#Include Lexer.rlx
#Include Parser.rlx

#Include PEBuilder.rlx
#Include Compiler.rlx

DllImport i64 CreateFile(i16*, i32, i32, void*, i32, i32, i64) {Kernel32.dll, CreateFileW}
DllImport i32 GetFileSize(i64, void) {Kernel32.dll, GetFileSize}
DllImport i8 ReadFile(i64, void*, i32, i32*, void) {Kernel32.dll, ReadFile}
DllImport i8 CloseHandle(i64) {Kernel32.dll, CloseHandle}

DllImport i32 GetLastError() {Kernel32.dll, GetLastError}

define i32 Main(i64 ArgC, i16** ArgV) {
	if (ArgC != 2) {
		AWriteLine("No input file, aborting")
		Exit(1)
	}
	
	i16* InputFilePath := ArgV[1]
	
	i64 GENERIC_READ := 0x80000000
	i8 FILE_SHARE_READ := 1
	i8 FILE_SHARE_WRITE := 2
	i8 OPEN_EXISTING := 3
	i16 FILE_ATTRIBUTE_NORMAL := 128
	
	i64 InputFileHandle := CreateFile(InputFilePath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0)
	
	if (InputFileHandle = -1) {
		AWrite("Could not open input file: error code ")
		IWriteLine(GetLastError())
		AWriteLine("Aborting")
		Exit(1)
	}
	
	AWrite("Input File: ")
	WriteLine(InputFilePath)
	
	i32 InputFileSize := GetFileSize(InputFileHandle, 0)
	void* FileBuffer := Alloc(InputFileSize)
	
	i32 ReadFileBytesRead := 0
	i8 ReadFileSuccess := ReadFile(InputFileHandle, FileBuffer, InputFileSize, &ReadFileBytesRead, 0)
	
	if (!(ReadFileSuccess) || ReadFileBytesRead != InputFileSize) {
		AWrite("Could not open read file: error code ")
		IWriteLine(GetLastError())
		AWriteLine("Aborting")
		Exit(1)
	}
	
	i16* Source := AToW(FileBuffer As i8*, InputFileSize)
	
	Free(FileBuffer)
	CloseHandle(InputFileHandle)
	
	TokenizerState T
	T.CurrentToken := Alloc(Token.Size) As Token*
	T.Source := Source
	T.SourceLength := WLen(Source) - 1
	T.Index := 0
	
	ParserStart(&T)
	
	
}