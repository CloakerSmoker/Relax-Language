define i16* AToW(i8* AString, i32 Length) {
	/* Converts an ASCII string to a wide string */
	
	i16* NewBuffer := (Alloc((Length * 2) + 2) As i16*)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		NewBuffer[Index] := AString[Index]
	}
	
	return NewBuffer
}

define i32 ALen(i8* AString) {
	for (i32 Length := 0, *(AString + Length) != 0, Length += 1) {
	}
	
	return Length
}
define i32 WLen(i16* WString) {
	for (i32 Length := 0, *(WString + Length) != 0, Length += 2) {
	}
	
	return (Length / 2)
}

define i16 Lower(i16 Character) {
	/* Gets a character as lowercase */
	
	if ('A' <= Character && Character <= 'Z') {
		Character += 32
	}
	
	return Character
}

define i8 CharacterEqualsNoCase(i16 CharacterOne, i16 CharacterTwo) {
	/* Checks if two characters are equal, ignoring case */
	return Lower(CharacterOne) = Lower(CharacterTwo)
}

define i8 IsAlpha(i16 Character) {
	/* Checks if a character is alpha */
	
	if ('a' <= Character && Character <= 'z') {
		return 1
	}
	else if ('A' <= Character && Character <= 'Z') {
		return 1
	}

	return 0
}
define i8 IsNumeric(i16 Character) {
	/* Checks if a character is a number of not */
	return (Character >= '0') && (Character <= '9')
}

define i8 IsAlphaNumeric(i16 Character) {
	/* Checks if a character is alphanumeric(/can be part of an identifier) */
	return IsAlpha(Character) || IsNumeric(Character) || Character = '_'
}

define i8 IsPath(i16 Character) {
	if (IsAlphaNumeric(Character)) {
		return true
	}
	else if (Character = '/' || Character = '\') {
		return true
	}
	else if (Character = '.') {
		return true
	}
	
	return false
}

define i8 _IsHex(i16 Character) {
	/* Checks if a character is a hex character (a-fA-F) */
	
	if ((Character >= 'a') && (Character <= 'f')) {
		return true
	}
	else if ((Character >= 'A') && (Character <= 'F')) {
		return true
	}
	
	return false
}
define i8 IsHex(i16 Character) {
	/* Checks if a character is numeric or hex */
	return IsNumeric(Character) || _IsHex(Character)
}

define i8 IsWhiteSpace(i16 Character) {
	if (Character = ' ' || Character = '	') {
		/* space+tab */
		return true
	}
	else if (Character = 10 || Character = 13) {
		/* linefeeds */
		return true
	}

	return (Character = ' ' || Character = '	' || Character = 10 || Character = 13)
}

define void AReverse(i8* Buffer) {
	i8 Temp := 0
	i32 Length := ALen(Buffer)
	
	for (i32 Index := 0, Index < Length, Index += 1) {
		Temp := Buffer[Index]
		Buffer[Index] := Buffer[Length - 1]
		Buffer[Length - 1] := Temp
		
		Length -= 1
	}
}

define i8* IToA(i64 Number) {
	i8* Buffer := (Alloc(100) As i8*)
	i8 Sign := 0
	
	if (Number = 0) {
		Buffer[0] := '0'
		return Buffer
	}
	
	if (Number < 0) {
		Sign := 1
		Number := -Number
	}
	
	for (i32 Index := 0, Number > 0, Index += 1) {
		Buffer[Index] := (Number % 10) + '0'
		Number := Number / 10
	}
	
	if (Sign) {
		Buffer[Index] := '-'
	}
	
	Buffer[Index + 1] := 0
	
	AReverse(Buffer)
	
	return Buffer
}

define i16* IToW(i64 Number) {
	i8* AString := IToA(Number)
	i16* WString := AToW(AString, ALen(AString))
	
	Free(AString As void*)
	
	return WString
}