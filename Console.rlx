DllImport i64 GetStdHandle(i32) {Kernel32.dll, GetStdHandle}
DllImport i8 WriteConsole(i64, i16*, i32, i32*, i64) {Kernel32.dll, WriteConsoleW}
DllImport i8 WriteFile(i64, i8*, i32, i32*, i64) {Kernel32.dll, WriteFile}
DllImport i8 SetConsoleTextAttribute(i64, i16) {Kernel32.dll, SetConsoleTextAttribute}
DllImport i8 ReadConsole(i64, void*, i32, i32*, void) {Kernel32.dll, ReadConsoleW}

i64 STDIN := GetStdHandle(-10)
i64 STDOUT := GetStdHandle(-11)
i64 STDERR := GetStdHandle(-12)

define void SwapOutputStream() {
	i64 Temp := STDOUT
	STDOUT := STDERR
	STDERR := Temp
}
define void WriteNewLine() {
	i32 BytesWritten := 0
	i16 NewLine := 0x0A0D
	
	WriteFile(STDOUT, &NewLine, 2, &BytesWritten, 0)
}

define i32 Write(i16* WString) {
	i32 BytesWritten := 0
	i32 Index := 0
	
	while (WString[Index] != 0) {
		i16 NextCharacter := WString[Index]		
		WriteFile(STDOUT, &NextCharacter, 1, &BytesWritten, 0)
		Index += 1
	}
}
define i32 WriteLine(i16* WString) {
	i32 ReturnValue := Write(WString)
	WriteNewLine()
	
	return ReturnValue
}
define void WriteCharacter(i8 Character) {
	i32 BytesWritten := 0
	
	WriteFile(STDOUT, &Character, 1, &BytesWritten, 0)
}

define i32 AWrite(i8* AString) {
	i32 BytesWritten := 0
	
	WriteFile(STDOUT, AString As i8*, ALen(AString), &BytesWritten, 0)
	
	return BytesWritten
}

define i32 AWriteLine(i8* AString) {
	AWrite(AString)
	
	WriteNewLine()
}

define i32 IWrite(i64 Number) {
	i8* AString := IToA(Number)
	
	i32 Result := AWrite(AString)

	Free(AString)
	
	return Result
}
define i32 IWriteLine(i64 Number) {
	i8* AString := IToA(Number)
	
	i32 Result := AWriteLine(AString)
	
	Free(AString)
	
	return Result
}

define i32 IWriteHex(i64 Number) {
	i8* AString := IToAH(Number)
	
	i32 Result := AWrite(AString)

	Free(AString)
	
	return Result
}
define i32 IWriteHexLine(i64 Number) {
	i8* AString := IToAH(Number)
	
	i32 Result := AWriteLine(AString)
	
	Free(AString)
	
	return Result
}

i16 Bright := 0x08
i16 Red := 0x04
i16 Green := 0x02
i16 Blue := 0x01

i16 White := 0x0F
i16 Black := 0x00

define void SetColor(i8 Foreground, i8 Background) {
	Background := Background * 10 As i8
	
	SetConsoleTextAttribute(STDOUT, Foreground | Background)
}
define void ResetColors() {
	SetColor(White, Black)
}
define void TextColor(i16 Foreground) {
	SetColor(Foreground, Black)
}

define i16* ReadLine(i32 MaxLength) {
	i16* Buffer := Alloc(MaxLength * 2)
	i32 CharactersRead := 0

	ReadConsole(STDIN, Buffer, MaxLength, &CharactersRead, 0)
	
	return Buffer
}