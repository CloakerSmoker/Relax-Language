struct SimpleHeap {
	/* Backing struct stored at the start of the program break to track heap size/next allocation location */
	
	void* Start,
	void* End,
	i64 Size,
	i64 NextOffset
}

i32 DEFAULT_HEAP_SIZE := 0x100000

define SimpleHeap* SimpleHeapInit() {
	linux {
		void* ProgramBreak := syscall(12, 0)
		
		syscall(12, ProgramBreak + DEFAULT_HEAP_SIZE)
		
		SimpleHeap* Heap := ProgramBreak As SimpleHeap*
		
		Heap->Start := ProgramBreak
		Heap->End := ProgramBreak + DEFAULT_HEAP_SIZE
		Heap->Size := DEFAULT_HEAP_SIZE
		Heap->NextOffset := SimpleHeap.Size
		
		return Heap
	}
}

SimpleHeap* ProcessHeap := SimpleHeapInit()

define void SimpleHeapGrow() {
	ProcessHeap->Size += DEFAULT_HEAP_SIZE
	ProcessHeap->End := ProcessHeap->Start + ProcessHeap->Size
	
	syscall(12, ProcessHeap->End)
}

define void* SimpleHeapAlloc(i32 Size) {
	i32 Remainder := Size % 64
	
	if (Remainder) {
		Size += 64 - Remainder
	}
	
	void* Result := ProcessHeap->Start + ProcessHeap->NextOffset
	
	ProcessHeap->NextOffset += Size
	
	return Result
}

define void SimpleHeapCopyClear(i8* From, i8* To, i32 Size) {
	for (i32 Index := 0, Index < Size, Index += 1) {
		To[Index] := From[Index]
		From[Index] := 'R'
	}
}

define void* SimpleHeapReAlloc(void* Memory, i32 NewSize) {
	if (Memory < ProcessHeap->Start || Memory > ProcessHeap->End) {
		return 0 As void*
	}
	
	void* NewMemory := SimpleHeapAlloc(NewSize)
	
	SimpleHeapCopyClear(Memory, NewMemory, NewSize)
	
	return NewMemory
}